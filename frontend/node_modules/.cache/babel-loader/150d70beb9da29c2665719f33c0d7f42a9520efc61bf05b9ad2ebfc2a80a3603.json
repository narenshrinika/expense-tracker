{"ast":null,"code":"/*!\n * Chart.js v4.4.3\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  options;\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.4.3\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = positioners;\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":";;;;;;;;AAWO,MAAMA;EACXC,WAAc;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,OAAO,GAAG,IAAIC;IACnB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,SAAS,GAAGC;EACnB;EAKAC,QAAQC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAChC,MAAMC,SAAYH,SAAMI,SAAS,CAACF,IAAK;IACvC,MAAMG,WAAWL,MAAMM,QAAQ;IAE/BH,UAAUI,OAAO,CAACC,MAAMA,EAAG;MACzBT;MACAU,SAAST,MAAMS,OAAO;MACtBJ;MACAK,aAAaC,KAAKC,GAAG,CAACX,IAAOD,SAAMa,KAAK,EAAER;IAC5C;EACF;EAKAS,QAAW;IACT,IAAI,IAAI,CAACtB,QAAQ,EAAE;MACjB;;IAEF,IAAI,CAACG,QAAQ,GAAG,IAAI;IAEpB,IAAI,CAACH,QAAQ,GAAGuB,iBAAiBC,IAAI,CAACC,QAAQ,MAAM;MAClD,IAAI,CAACC,OAAO;MACZ,IAAI,CAAC1B,QAAQ,GAAG,IAAI;MAEpB,IAAI,IAAI,CAACG,QAAQ,EAAE;QACjB,IAAI,CAACmB,QAAQ;;IAEjB;EACF;EAKAI,OAAQjB,GAAmB;IAAA,IAAnBA,2EAAOkB,IAAKC,IAAG,EAAE;IACvB,IAAIC,SAAY;IAEhB,IAAI,CAAC5B,OAAO,CAACc,OAAO,CAAC,CAACP,OAAOD,KAAU;MACrC,IAAI,CAACC,MAAMsB,OAAO,IAAI,CAACtB,KAAMuB,MAAK,CAACC,MAAM,EAAE;QACzC;;MAEF,MAAMD,QAAQvB,MAAMuB,KAAK;MACzB,IAAIE,IAAIF,KAAMC,OAAM,GAAG;MACvB,IAAIE,OAAO,KAAK;MAChB,IAAIC;MAEJ,OAAOF,KAAK,CAAG,IAAEA,CAAG;QAClBE,IAAOJ,QAAK,CAACE,CAAE;QAEf,IAAIE,KAAKC,OAAO,EAAE;UAChB,IAAID,IAAKE,OAAM,GAAG7B,MAAMM,QAAQ,EAAE;YAGhCN,KAAMM,SAAQ,GAAGqB,KAAKE,MAAM;;UAE9BF,KAAKG,IAAI,CAAC7B;UACVyB,OAAO,IAAI;SACN;UAGLH,KAAK,CAACE,EAAE,GAAGF,KAAK,CAACA,KAAMC,OAAM,GAAG,CAAE;UAClCD,MAAMQ,GAAG;;MAEb;MAEA,IAAIL,IAAM;QACR3B,MAAM2B,IAAI;QACV,IAAI,CAAC5B,OAAO,CAACC,OAAOC,OAAOC,IAAM;;MAGnC,IAAI,CAACsB,KAAMC,OAAM,EAAE;QACjBxB,KAAMsB,QAAO,GAAG,KAAK;QACrB,IAAI,CAACxB,OAAO,CAACC,OAAOC,OAAOC,IAAM;QACjCD,KAAMS,QAAO,GAAG,KAAK;;MAGvBY,aAAaE,MAAMC,MAAM;IAC3B;IAEA,IAAI,CAAC5B,SAAS,GAAGK;IAEjB,IAAIoB,cAAc,CAAG;MACnB,IAAI,CAAC1B,QAAQ,GAAG,KAAK;;EAEzB;EAKAqC,UAAUjC,KAAK,EAAE;IACf,MAAMkC,SAAS,IAAI,CAACxC,OAAO;IAC3B,IAAIO,QAAQiC,MAAOC,IAAG,CAACnC;IACvB,IAAI,CAACC,KAAO;MACVA,KAAQ;QACNsB,SAAS,KAAK;QACdb,SAAS,IAAI;QACbc,OAAO,EAAE;QACTnB,SAAW;UACT+B,UAAU,EAAE;UACZC,UAAU;QACZ;MACF;MACAH,MAAOI,IAAG,CAACtC,KAAOC;;IAEpB,OAAOA;EACT;EAOAsC,OAAOvC,KAAK,EAAEwC,KAAK,EAAEC,EAAE,EAAE;IACvB,IAAI,CAACR,SAAS,CAACjC,OAAOK,SAAS,CAACmC,MAAM,CAACE,IAAI,CAACD;EAC9C;EAOAE,GAAI3C,MAAK,EAAEwB,KAAK,EAAE;IAChB,IAAI,CAACA,SAAS,CAACA,MAAMC,MAAM,EAAE;MAC3B;;IAEF,IAAI,CAACQ,SAAS,CAACjC,OAAOwB,KAAK,CAACkB,IAAI,CAAIlB;EACtC;EAMAoB,IAAI5C,KAAK,EAAE;IACT,OAAO,IAAI,CAACiC,SAAS,CAACjC,OAAOwB,KAAK,CAACC,MAAM,GAAG;EAC9C;EAMAX,MAAMd,KAAK,EAAE;IACX,MAAMC,QAAQ,IAAI,CAACP,OAAO,CAACyC,GAAG,CAACnC;IAC/B,IAAI,CAACC,KAAO;MACV;;IAEFA,KAAMsB,QAAO,GAAG,IAAI;IACpBtB,KAAMa,MAAK,GAAGM,KAAKC,GAAG;IACtBpB,MAAMM,QAAQ,GAAGN,MAAMuB,KAAK,CAACqB,MAAM,CAAC,CAACC,GAAKC,UAAQnC,KAAKoC,GAAG,CAACF,GAAKC,MAAIE,SAAS,CAAG;IAChF,IAAI,CAAClC,QAAQ;EACf;EAEAQ,QAAQvB,KAAK,EAAE;IACb,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAE;MAClB,OAAO,KAAK;;IAEd,MAAMK,QAAQ,IAAI,CAACP,OAAO,CAACyC,GAAG,CAACnC;IAC/B,IAAI,CAACC,KAAS,KAACA,KAAMsB,QAAO,IAAI,CAACtB,KAAMuB,MAAK,CAACC,MAAM,EAAE;MACnD,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAMAyB,KAAKlD,KAAK,EAAE;IACV,MAAMC,QAAQ,IAAI,CAACP,OAAO,CAACyC,GAAG,CAACnC;IAC/B,IAAI,CAACC,KAAS,KAACA,MAAMuB,KAAK,CAACC,MAAM,EAAE;MACjC;;IAEF,MAAMD,QAAQvB,MAAMuB,KAAK;IACzB,IAAIE,IAAIF,KAAMC,OAAM,GAAG;IAEvB,OAAOC,KAAK,CAAG,IAAEA,CAAG;MAClBF,KAAK,CAACE,CAAE,EAACyB,MAAM;IACjB;IACAlD,KAAMuB,MAAK,GAAG,EAAE;IAChB,IAAI,CAACzB,OAAO,CAACC,OAAOC,KAAOmB,OAAKC,GAAG,EAAI;EACzC;EAMA+B,OAAOpD,KAAK,EAAE;IACZ,OAAO,IAAI,CAACN,OAAO,CAAC2D,MAAM,CAACrD;EAC7B;AACF;AAGA,eAAe,eAAgB,IAAIT,QAAW;ACjN9C,MAAM+D,WAAc;AACpB,MAAMC,aAAgB;EACpBC,QAAQC,IAAI,EAAEC,EAAE,EAAEC,MAAM,EAAE;IACxB,OAAOA,SAAS,GAAMD,QAAKD,IAAI;EACjC;EAMAG,MAAMH,IAAI,EAAEC,EAAE,EAAEC,MAAM,EAAE;IACtB,MAAME,KAAKC,MAAaL,IAAQH;IAChC,MAAMS,EAAKF,MAAGG,KAAK,IAAIF,MAAaJ,EAAMJ;IAC1C,OAAOS,MAAMA,EAAGC,MAAK,GACjBD,GAAGE,GAAG,CAACJ,EAAIF,UAAQO,SAAS,KAC5BR,EAAE;EACR;EACAS,OAAOV,IAAI,EAAEC,EAAE,EAAEC,MAAM,EAAE;IACvB,OAAOF,IAAO,GAACC,MAAKD,IAAG,IAAKE;EAC9B;AACF;AAEe,MAAMS;EACnB5E,YAAY6E,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEb,EAAE,EAAE;IACjC,MAAMc,eAAeF,MAAM,CAACC,IAAK;IAEjCb,KAAKe,OAAQ,EAACJ,IAAIX,EAAE,EAAEA,IAAIc,cAAcH,IAAIZ,IAAI,CAAC;IACjD,MAAMA,OAAOgB,OAAQ,EAACJ,IAAIZ,IAAI,EAAEe,cAAcd,GAAG;IAEjD,IAAI,CAAC7B,OAAO,GAAG,IAAI;IACnB,IAAI,CAAC6C,GAAG,GAAGL,IAAI5D,EAAE,IAAI8C,aAAa,CAACc,GAAIlE,KAAI,IAAI,OAAOsD,IAAK;IAC3D,IAAI,CAACkB,OAAO,GAAGC,OAAO,CAACP,IAAIQ,MAAM,CAAC,IAAID,QAAQE,MAAM;IACpD,IAAI,CAACC,MAAM,GAAGnE,KAAKoE,KAAK,CAAC5D,IAAKC,IAAG,EAAMgD,OAAIY,MAAK,IAAI;IACpD,IAAI,CAAChC,SAAS,GAAG,IAAI,CAACnB,MAAM,GAAGlB,IAAKoE,MAAK,CAACX,IAAI9D,QAAQ;IACtD,IAAI,CAAC2E,KAAK,GAAG,CAAC,CAACb,IAAIc,IAAI;IACvB,IAAI,CAACC,OAAO,GAAGd;IACf,IAAI,CAACe,KAAK,GAAGd;IACb,IAAI,CAACe,KAAK,GAAG7B;IACb,IAAI,CAAC8B,GAAG,GAAG7B;IACX,IAAI,CAAC8B,SAAS,GAAG1F;EACnB;EAEA2F,MAAS;IACP,OAAO,IAAI,CAAC5D,OAAO;EACrB;EAEA6D,OAAOrB,GAAG,EAAEX,EAAE,EAAExD,IAAI,EAAE;IACpB,IAAI,IAAI,CAAC2B,OAAO,EAAE;MAChB,IAAI,CAAC9B,OAAO,CAAC,KAAK;MAElB,MAAMyE,eAAe,IAAI,CAACY,OAAO,CAAC,IAAI,CAACC,KAAK,CAAC;MAC7C,MAAMM,OAAUzF,UAAO,IAAI,CAAC6E,MAAM;MAClC,MAAMa,MAAS,OAAI,CAAC3C,SAAS,GAAG0C;MAChC,IAAI,CAACZ,MAAM,GAAG7E;MACd,IAAI,CAAC+C,SAAS,GAAGrC,IAAKoE,MAAK,CAACpE,KAAKoC,GAAG,CAAC4C,MAAQvB,MAAI9D,QAAQ;MACzD,IAAI,CAACuB,MAAM,IAAI6D;MACf,IAAI,CAACT,KAAK,GAAG,CAAC,CAACb,IAAIc,IAAI;MACvB,IAAI,CAACI,GAAG,GAAGd,OAAQ,EAACJ,IAAIX,EAAE,EAAEA,IAAIc,cAAcH,IAAIZ,IAAI,CAAC;MACvD,IAAI,CAAC6B,KAAK,GAAGb,OAAQ,EAACJ,IAAIZ,IAAI,EAAEe,cAAcd,GAAG;;EAErD;EAEAP,MAAS;IACP,IAAI,IAAI,CAACtB,OAAO,EAAE;MAEhB,IAAI,CAACE,IAAI,CAACX,KAAKC,GAAG;MAClB,IAAI,CAACQ,OAAO,GAAG,KAAK;MACpB,IAAI,CAAC9B,OAAO,CAAC,KAAK;;EAEtB;EAEAgC,KAAK7B,IAAI,EAAE;IACT,MAAMyF,OAAUzF,UAAO,IAAI,CAAC6E,MAAM;IAClC,MAAMxE,WAAW,IAAI,CAAC0C,SAAS;IAC/B,MAAMsB,OAAO,IAAI,CAACc,KAAK;IACvB,MAAM5B,OAAO,IAAI,CAAC6B,KAAK;IACvB,MAAMH,OAAO,IAAI,CAACD,KAAK;IACvB,MAAMxB,KAAK,IAAI,CAAC6B,GAAG;IACnB,IAAI5B;IAEJ,IAAI,CAAC9B,OAAO,GAAG4B,SAASC,OAAOyB,QAASQ,UAAUpF,QAAQ;IAE1D,IAAI,CAAC,IAAI,CAACsB,OAAO,EAAE;MACjB,IAAI,CAACuD,OAAO,CAACb,KAAK,GAAGb;MACrB,IAAI,CAAC3D,OAAO,CAAC,IAAI;MACjB;;IAGF,IAAI4F,UAAU,CAAG;MACf,IAAI,CAACP,OAAO,CAACb,KAAK,GAAGd;MACrB;;IAGFE,MAAS,GAACgC,UAAUpF,QAAY;IAChCoD,SAASwB,IAAQxB,aAAS,CAAI,OAAIA,SAASA,MAAM;IACjDA,MAAS,OAAI,CAACgB,OAAO,CAAC/D,KAAKC,GAAG,CAAC,CAAGD,OAAKoC,GAAG,CAAC,CAAGW;IAE9C,IAAI,CAACyB,OAAO,CAACb,IAAK,IAAG,IAAI,CAACG,GAAG,CAACjB,MAAMC,EAAIC;EAC1C;EAEAkC,IAAO;IACL,MAAMC,WAAW,IAAI,CAACN,SAAS,KAAK,IAAI,CAACA,SAAS,GAAG,EAAE,CAAD;IACtD,OAAO,IAAIO,QAAQ,CAACC,KAAKC,GAAQ;MAC/BH,SAASpD,IAAI,CAAC;QAACsD;QAAKC;MAAG;IACzB;EACF;EAEAlG,QAAQmG,QAAQ,EAAE;IAChB,MAAMC,SAASD,QAAW,WAAQ,KAAK;IACvC,MAAMJ,QAAW,OAAI,CAACN,SAAS,IAAI,EAAE;IACrC,KAAK,IAAI9D,CAAI,MAAGA,IAAIoE,QAASrE,OAAM,EAAEC,CAAK;MACxCoE,QAAQ,CAACpE,CAAE,EAACyE,MAAO;IACrB;EACF;AACF;ACjHe,MAAMC;EACnB5G,WAAYQ,MAAK,EAAEqG,MAAM,EAAE;IACzB,IAAI,CAACC,MAAM,GAAGtG;IACd,IAAI,CAACuG,WAAW,GAAG,IAAI5G;IACvB,IAAI,CAAC6G,SAAS,CAACH;EACjB;EAEAG,UAAUH,MAAM,EAAE;IAChB,IAAI,CAACI,SAASJ,MAAS;MACrB;;IAGF,MAAMK,gBAAmBC,UAAOC,IAAI,CAACC,SAASC,SAAS;IACvD,MAAMC,gBAAgB,IAAI,CAACR,WAAW;IAEtCI,OAAOK,mBAAmB,CAACX,QAAQ7F,OAAO,CAACyG,GAAO;MAChD,MAAM5C,MAAMgC,MAAM,CAACY,GAAI;MACvB,IAAI,CAACR,SAASpC,GAAM;QAClB;;MAEF,MAAM6B,WAAW,EAAC;MAClB,KAAK,MAAMgB,UAAUR,gBAAkB;QACrCR,QAAQ,CAACgB,OAAO,GAAG7C,GAAG,CAAC6C,MAAO;MAChC;MAECC,SAAQ9C,GAAI+C,WAAU,CAAK/C,QAAI+C,UAAU,IAAI,CAACH,IAAG,EAAGzG,OAAO,CAAE+D,IAAS;QACrE,IAAIA,SAAS0C,GAAO,KAACF,aAAcnE,IAAG,CAAC2B,IAAO;UAC5CwC,aAAczE,IAAG,CAACiC,IAAM2B;;MAE5B;IACF;EACF;EAMAmB,eAAgB/C,OAAM,EAAEgD,MAAM,EAAE;IAC9B,MAAMC,aAAaD,OAAOE,OAAO;IACjC,MAAMA,UAAUC,qBAAqBnD,MAAQiD;IAC7C,IAAI,CAACC,OAAS;MACZ,OAAO,EAAE;;IAGX,MAAME,UAAa,OAAI,CAACC,iBAAiB,CAACH,OAASD;IACnD,IAAIA,WAAWK,OAAO,EAAE;MAItBC,QAASvD,QAAOkD,OAAO,CAACM,WAAW,EAAEP,UAAYQ,MAAI,CAAC,MAAM;QAC1DzD,OAAOkD,OAAO,GAAGD;MACnB,GAAG,MAAM,CAET;;IAGF,OAAOG;EACT;EAKAC,iBAAkBrD,OAAM,EAAEgD,MAAM,EAAE;IAChC,MAAMP,gBAAgB,IAAI,CAACR,WAAW;IACtC,MAAMmB,aAAa,EAAE;IACrB,MAAMnG,UAAU+C,OAAOwD,WAAW,KAAKxD,MAAOwD,YAAW,GAAG,EAAC;IAC7D,MAAME,QAAQrB,MAAOC,KAAI,CAACU;IAC1B,MAAMpH,OAAOkB,KAAKC,GAAG;IACrB,IAAIK;IAEJ,KAAKA,IAAIsG,MAAMvG,MAAM,GAAG,GAAGC,CAAK,OAAG,EAAEA,CAAG;MACtC,MAAM6C,OAAOyD,KAAK,CAACtG,CAAE;MACrB,IAAI6C,IAAK0D,OAAM,CAAC,OAAO,GAAK;QAC1B;;MAGF,IAAI1D,SAAS,SAAW;QACtBmD,WAAWhF,IAAI,CAAI,OAAI,CAAC2E,eAAe,CAAC/C,MAAQgD;QAChD;;MAEF,MAAMY,QAAQZ,MAAM,CAAC/C,IAAK;MAC1B,IAAIuC,YAAYvF,OAAO,CAACgD,IAAK;MAC7B,MAAMF,MAAM0C,aAAc5E,IAAG,CAACoC;MAE9B,IAAIuC,SAAW;QACb,IAAIzC,OAAOyC,SAAUrB,OAAM,EAAI;UAE7BqB,SAAUpB,OAAM,CAACrB,KAAK6D,KAAOhI;UAC7B;SACK;UACL4G,UAAU3D,MAAM;;;MAGpB,IAAI,CAACkB,OAAO,CAACA,IAAI9D,QAAQ,EAAE;QAEzB+D,MAAM,CAACC,KAAK,GAAG2D;QACf;;MAGF3G,OAAO,CAACgD,KAAK,GAAGuC,YAAY,IAAI1C,SAAUC,MAAKC,QAAQC,IAAM2D;MAC7DR,WAAWhF,IAAI,CAACoE;IAClB;IACA,OAAOY;EACT;EASAhC,MAAOpB,OAAM,EAAEgD,MAAM,EAAE;IACrB,IAAI,IAAI,CAACf,WAAW,CAAC4B,IAAI,KAAK,CAAG;MAE/BxB,MAAOyB,OAAM,CAAC9D,MAAQgD;MACtB;;IAGF,MAAMI,UAAa,OAAI,CAACC,iBAAiB,CAACrD,MAAQgD;IAElD,IAAII,WAAWjG,MAAM,EAAE;MACrB4G,SAAS1F,GAAG,CAAC,IAAI,CAAC2D,MAAM,EAAEoB;MAC1B,OAAO,IAAI;;EAEf;AACF;AAEA,SAASG,QAASH,WAAU,EAAEN,UAAU,EAAE;EACxC,MAAM7F,UAAU,EAAE;EAClB,MAAMqF,OAAOD,MAAOC,KAAI,CAACQ;EACzB,KAAK,IAAI1F,CAAI,MAAGA,IAAIkF,IAAKnF,OAAM,EAAEC,CAAK;IACpC,MAAM4G,OAAOZ,UAAU,CAACd,IAAI,CAAClF,EAAE,CAAC;IAChC,IAAI4G,QAAQA,IAAK7C,OAAM,EAAI;MACzBlE,OAAQmB,KAAI,CAAC4F,KAAKzC,IAAI;;EAE1B;EAEA,OAAOE,QAAQwC,GAAG,CAAChH;AACrB;AAEA,SAASkG,oBAAqBnD,OAAM,EAAEiD,UAAU,EAAE;EAChD,IAAI,CAACA,UAAY;IACf;;EAEF,IAAIC,UAAUlD,OAAOkD,OAAO;EAC5B,IAAI,CAACA,OAAS;IACZlD,OAAOkD,OAAO,GAAGD;IACjB;;EAEF,IAAIC,QAAQI,OAAO,EAAE;IAGnBtD,MAAOkD,QAAO,GAAGA,OAAUb,UAAOyB,MAAM,CAAC,IAAIZ,OAAS;MAACI,SAAS,KAAK;MAAEE,aAAa;IAAE;;EAExF,OAAON;AACT;ACtJA,SAASgB,UAAUC,KAAK,EAAEC,eAAe,EAAE;EACzC,MAAMC,IAAOF,YAASA,KAAMjB,QAAO,IAAI,EAAC;EACxC,MAAMoB,UAAUD,KAAKC,OAAO;EAC5B,MAAM/H,MAAM8H,IAAK9H,IAAG,KAAKf,YAAY4I,kBAAkB,CAAC;EACxD,MAAM1F,MAAM2F,IAAK3F,IAAG,KAAKlD,YAAY4I,kBAAkB,CAAC;EACxD,OAAO;IACL5H,KAAO8H,YAAU5F,MAAMnC,GAAG;IAC1BgI,GAAKD,YAAU/H,MAAMmC;EACvB;AACF;AAEA,SAAS8F,YAAYC,MAAM,EAAEC,MAAM,EAAEN,eAAe,EAAE;EACpD,IAAIA,oBAAoB,KAAK,EAAE;IAC7B,OAAO,KAAK;;EAEd,MAAMO,IAAIT,UAAUO,MAAQL;EAC5B,MAAMQ,IAAIV,UAAUQ,MAAQN;EAE5B,OAAO;IACLS,KAAKD,EAAEL,GAAG;IACVO,OAAOH,EAAEJ,GAAG;IACZQ,QAAQH,EAAEpI,KAAK;IACfwI,MAAML,EAAEnI;EACV;AACF;AAEA,SAASyI,OAAOrB,KAAK,EAAE;EACrB,IAAIsB,GAAGC,GAAGC,CAAGC;EAEb,IAAIlD,SAASyB,KAAQ;IACnBsB,IAAItB,MAAMiB,GAAG;IACbM,IAAIvB,MAAMkB,KAAK;IACfM,IAAIxB,MAAMmB,MAAM;IAChBM,IAAIzB,MAAMoB,IAAI;GACT;IACLE,CAAIC,OAAIC,IAAIC,CAAIzB;;EAGlB,OAAO;IACLiB,GAAKK;IACLJ,KAAOK;IACPJ,MAAQK;IACRJ,IAAMK;IACNC,UAAU1B,UAAU;EACtB;AACF;AAEA,SAAS2B,uBAAwB7J,MAAK,EAAE8J,aAAa,EAAE;EACrD,MAAMlD,OAAO,EAAE;EACf,MAAMmD,WAAW/J,KAAMgK,uBAAsB,CAACF;EAC9C,IAAIpI,CAAGuI;EAEP,KAAKvI,IAAI,GAAGuI,IAAOF,YAAStI,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IACjDkF,KAAKlE,IAAI,CAACqH,QAAQ,CAACrI,EAAE,CAACwI,KAAK;EAC7B;EACA,OAAOtD;AACT;AAEA,SAASuD,WAAWC,KAAK,EAAElC,KAAK,EAAEmC,OAAO,EAAgB;EAAA,IAAd7C,8EAAU,EAAE;EACrD,MAAMZ,OAAOwD,MAAMxD,IAAI;EACvB,MAAM0D,aAAa9C,OAAQ+C,KAAI,KAAK;EACpC,IAAI7I,GAAGuI,MAAMO,YAAcC;EAE3B,IAAIvC,UAAU,IAAI,EAAE;IAClB;;EAGF,KAAKxG,IAAI,GAAGuI,IAAOrD,QAAKnF,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IAC7C8I,YAAe,IAAC5D,IAAI,CAAClF,CAAE;IACvB,IAAI8I,iBAAiBH,OAAS;MAC5B,IAAI7C,QAAQe,GAAG,EAAE;QACf;;MAEF;;IAEFkC,UAAaL,SAAM9C,MAAM,CAACkD,YAAa;IACvC,IAAIE,eAASD,UAAgBH,gBAAepC,cAAU,KAAKyC,IAAKzC,YAAWyC,IAAKF,YAAW,CAAI;MAC7FvC,KAASuC;;EAEb;EACA,OAAOvC;AACT;AAEA,SAAS0C,wBAAyBC,KAAI,EAAEC,IAAI,EAAE;EAC5C,MAAM;IAACC;IAAQC;EAAAA,CAAO,GAAGF;EACzB,MAAMG,WAAWF,MAAOG,KAAI,KAAK,MAAM,MAAM,GAAG;EAChD,MAAMC,WAAWH,MAAOE,KAAI,KAAK,MAAM,MAAM,GAAG;EAChD,MAAMtE,OAAOD,MAAOC,KAAI,CAACiE;EACzB,MAAMO,KAAQ,OAAIC,KAAMzE,MAAKnF,MAAM;EACnC,IAAIC,GAAGuI,IAAMhD;EACb,KAAKvF,IAAI,GAAGuI,IAAOrD,QAAKnF,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IAC7CuF,GAAML,OAAI,CAAClF,CAAE;IACb0J,KAAK,CAAC1J,EAAE,GAAG;MACT,CAACuJ,WAAWhE;MACZ,CAACkE,QAAS,GAAEN,IAAI,CAAC5D,GAAI;IACvB;EACF;EACA,OAAOmE;AACT;AAEA,SAASE,SAAU7C,MAAK,EAAEqC,IAAI,EAAE;EAC9B,MAAMS,OAAU9C,YAASA,KAAMjB,QAAO,CAAC+D,OAAO;EAC9C,OAAOA,OAAYA,gBAAYzL,SAAagL,SAAKV,KAAK,KAAKtK;AAC7D;AAEA,SAAS0L,YAAYC,UAAU,EAAEC,UAAU,EAAEZ,IAAI,EAAE;EACjD,OAAQ,GAAEW,WAAWE,EAAG,IAAGD,UAAWC,GAAG,IAAGb,IAAKV,MAAK,IAAIU,IAAK3K,KAAK,EAAC;AACvE;AAEA,SAASyL,cAAcnD,KAAK,EAAE;EAC5B,MAAM;IAAC5H,GAAG;IAAEmC,GAAG;IAAE6I,UAAU;IAAEC;EAAU,CAAC,GAAGrD,MAAMmD,aAAa;EAC9D,OAAO;IACL/K,GAAKgL,eAAahL,GAAMkL,UAAOC,iBAAiB;IAChDhJ,GAAK8I,eAAa9I,GAAM+I,UAAOE;EACjC;AACF;AAEA,SAASC,iBAAiBC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EACtD,MAAMC,WAAWH,MAAM,CAACC,QAAS,MAAKD,MAAM,CAACC,SAAS,GAAG,EAAC;EAC1D,OAAOE,QAAQ,CAACD,WAAW,KAAKC,QAAQ,CAACD,WAAW,GAAG,EAAC;AAC1D;AAEA,SAASE,oBAAoBnC,KAAK,EAAEY,MAAM,EAAEwB,QAAQ,EAAErM,IAAI,EAAE;EAC1D,KAAK,MAAM2K,IAAQE,WAAOyB,uBAAuB,CAACtM,MAAMyI,OAAO,EAAI;IACjE,MAAMV,KAAQkC,QAAK,CAACU,KAAKZ,KAAK,CAAC;IAC/B,IAAIsC,QAAatE,YAAQ,KAAO,CAACsE,YAAYtE,QAAQ,CAAI;MACvD,OAAO4C,KAAKZ,KAAK;;EAErB;EAEA,OAAO,IAAI;AACb;AAEA,SAASwC,YAAaC,WAAU,EAAEC,MAAM,EAAE;EACxC,MAAM;IAAC5M,KAAK;IAAE6M,WAAa/B;EAAAA,CAAK,GAAG6B;EACnC,MAAMR,SAASnM,KAAM8M,QAAO,KAAK9M,KAAM8M,QAAO,GAAG,EAAC;EAClD,MAAM;IAAC/B;IAAQC;IAAQd,KAAOM;EAAAA,CAAa,GAAGM;EAC9C,MAAMiC,QAAQhC,OAAOG,IAAI;EACzB,MAAM8B,QAAQhC,OAAOE,IAAI;EACzB,MAAMjE,MAAMuE,WAAYT,SAAQC,MAAQF;EACxC,MAAMb,OAAO2C,OAAOnL,MAAM;EAC1B,IAAI2I;EAEJ,KAAK,IAAI1I,CAAI,MAAGA,CAAIuI,SAAM,EAAEvI,CAAG;IAC7B,MAAME,OAAOgL,MAAM,CAAClL,CAAE;IACtB,MAAM;MAAC,CAACqL,QAAQ7C;MAAO,CAAC8C,KAAM,GAAE9E;IAAK,CAAC,GAAGtG;IACzC,MAAMqL,aAAarL,KAAKkL,OAAO,KAAKlL,IAAKkL,QAAO,GAAG,EAAC;IACpD1C,QAAQ6C,UAAU,CAACD,MAAM,GAAGd,iBAAiBC,QAAQlF,GAAKiD;IAC1DE,KAAK,CAACI,aAAa,GAAGtC;IAEtBkC,KAAM8C,KAAI,GAAGX,mBAAoBnC,QAAOY,QAAQ,IAAI,EAAEF,KAAK3K,IAAI;IAC/DiK,KAAM+C,QAAO,GAAGZ,mBAAoBnC,QAAOY,QAAQ,KAAK,EAAEF,KAAK3K,IAAI;IAEnE,MAAMiN,eAAehD,MAAMiD,aAAa,KAAKjD,KAAMiD,cAAa,GAAG,EAAC;IACpED,YAAY,CAAC5C,aAAa,GAAGtC;EAC/B;AACF;AAEA,SAASoF,eAAgBtN,MAAK,EAAEkL,IAAI,EAAE;EACpC,MAAMqC,SAASvN,MAAMuN,MAAM;EAC3B,OAAO5G,MAAOC,KAAI,CAAC2G,QAAQC,MAAM,CAACvG,GAAOsG,UAAM,CAACtG,GAAI,EAACiE,IAAI,KAAKA,MAAMuC,KAAK;AAC3E;AAEA,SAASC,oBAAqBC,OAAM,EAAEzD,KAAK,EAAE;EAC3C,OAAO0D,cAAcD,MACnB;IACElI,QAAQ,KAAK;IACboI,OAAS/N;IACT0K,YAAcN;IACdA;IACAK,IAAM;IACNpK,IAAM;EACR;AAEJ;AAEA,SAAS2N,kBAAkBH,MAAM,EAAEzD,KAAK,EAAE6D,OAAO,EAAE;EACjD,OAAOH,cAAcD,MAAQ;IAC3BlI,QAAQ,KAAK;IACbuI,SAAW9D;IACX0C,MAAQ9M;IACRmO,GAAKnO;IACLiO;IACA7D;IACAK,IAAM;IACNpK,IAAM;EACR;AACF;AAEA,SAAS+N,WAAYpD,KAAI,EAAEtJ,KAAK,EAAE;EAEhC,MAAMgJ,YAAeM,QAAK6B,UAAU,CAACzC,KAAK;EAC1C,MAAMgB,OAAOJ,IAAKE,OAAM,IAAIF,IAAKE,OAAM,CAACE,IAAI;EAC5C,IAAI,CAACA,IAAM;IACT;;EAGF1J,KAAQA,YAASsJ,KAAKqD,OAAO;EAC7B,KAAK,MAAMvB,UAAUpL,KAAO;IAC1B,MAAM2K,SAASS,OAAOE,OAAO;IAC7B,IAAI,CAACX,UAAUA,MAAM,CAACjB,IAAK,MAAKpL,SAAaqM,UAAM,CAACjB,KAAK,CAACV,aAAa,KAAK1K,SAAW;MACrF;;IAEF,OAAOqM,MAAM,CAACjB,IAAK,EAACV,YAAa;IACjC,IAAI2B,MAAM,CAACjB,IAAK,EAACmC,aAAa,KAAKvN,aAAaqM,MAAM,CAACjB,KAAK,CAACmC,aAAa,CAAC7C,aAAa,KAAK1K,SAAW;MACtG,OAAOqM,MAAM,CAACjB,KAAK,CAACmC,aAAa,CAAC7C,YAAa;;EAEnD;AACF;AAEA,MAAM4D,kBAAqB,GAAC7D,IAASA,aAAS,WAAWA,IAAS;AAClE,MAAM8D,mBAAmB,CAACC,QAAQC,MAAWA,cAASD,MAAS3H,UAAOyB,MAAM,CAAC,EAAC,EAAGkG,MAAO;AACxF,MAAME,WAAc,IAACC,QAAU3D,QAAM9K,KAAUyO,iBAAY,CAAC3D,KAAK4D,MAAM,IAAI5D,IAAK6D,SAAQ,IACnF;EAAC/H,IAAMiD,0BAAwB7J,OAAO,IAAI;EAAGsH,QAAQ;AAAI;AAE/C,MAAMsH;EAKnB,OAAO/H,QAAW,KAAG;EAKrB,OAAOgI,kBAAqB,OAAI;EAKhC,OAAOC,eAAkB,OAAI;EAM7BtP,WAAYQ,MAAK,EAAEwK,YAAY,EAAE;IAC/B,IAAI,CAACxK,KAAK,GAAGA;IACb,IAAI,CAAC+O,IAAI,GAAG/O,MAAMgP,GAAG;IACrB,IAAI,CAAC9E,KAAK,GAAGM;IACb,IAAI,CAACyE,eAAe,GAAG,EAAC;IACxB,IAAI,CAACpC,WAAW,GAAG,IAAI,CAACqC,OAAO;IAC/B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACtC,WAAW,CAAC1M,IAAI;IAClC,IAAI,CAACqH,OAAO,GAAG1H;IAEf,IAAI,CAACsP,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,KAAK,GAAGvP;IACb,IAAI,CAACwP,WAAW,GAAGxP;IACnB,IAAI,CAACyP,cAAc,GAAGzP;IACtB,IAAI,CAAC0P,UAAU,GAAG1P;IAClB,IAAI,CAAC2P,UAAU,GAAG3P;IAClB,IAAI,CAAC4P,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,kBAAkB,GAAG,KAAK;IAC/B,IAAI,CAACC,QAAQ,GAAG9P;IAChB,IAAI,CAAC+P,SAAS,GAAG,EAAE;IACnB,IAAI,CAAChB,kBAAkB,GAAGiB,WAAWjB,kBAAkB;IACvD,IAAI,CAACC,eAAe,GAAGgB,WAAWhB,eAAe;IAEjD,IAAI,CAACiB,UAAU;EACjB;EAEAA,UAAa;IACX,MAAMjF,OAAO,IAAI,CAAC+B,WAAW;IAC7B,IAAI,CAACrG,SAAS;IACd,IAAI,CAACwJ,UAAU;IACflF,KAAK6D,QAAQ,GAAGrD,SAAUR,MAAKE,MAAM,EAAEF;IACvC,IAAI,CAACmF,WAAW;IAEhB,IAAI,IAAI,CAACzI,OAAO,CAAC0I,IAAI,IAAI,CAAC,IAAI,CAAClQ,KAAK,CAACmQ,eAAe,CAAC,QAAW;MAC9DC,QAAQC,IAAI,CAAC;;EAEjB;EAEAC,YAAY9F,YAAY,EAAE;IACxB,IAAI,IAAI,CAACN,KAAK,KAAKM,YAAc;MAC/B0D,WAAY,KAAI,CAACrB,WAAW;;IAE9B,IAAI,CAAC3C,KAAK,GAAGM;EACf;EAEAwF,UAAa;IACX,MAAMhQ,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAM8K,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMgB,UAAU,IAAI,CAAC0C,UAAU;IAE/B,MAAMC,QAAW,IAACtF,IAAMjC,KAAGC,CAAGO,QAAMyB,IAAS,WAAMjC,CAAIiC,YAAS,GAAMzB,OAAIP,CAAC;IAE3E,MAAMuH,MAAM3F,KAAK4F,OAAO,GAAGC,eAAe9C,OAAQ6C,QAAO,EAAEpD,gBAAgBtN,KAAO;IAClF,MAAM4Q,MAAM9F,KAAK+F,OAAO,GAAGF,eAAe9C,OAAQgD,QAAO,EAAEvD,gBAAgBtN,KAAO;IAClF,MAAM8Q,MAAMhG,KAAKiG,OAAO,GAAGJ,eAAe9C,OAAQkD,QAAO,EAAEzD,gBAAgBtN,KAAO;IAClF,MAAMgR,YAAYlG,KAAKkG,SAAS;IAChC,MAAMC,MAAMnG,IAAKoG,QAAO,GAAGV,QAASQ,YAAWP,KAAKG,GAAKE;IACzD,MAAMK,MAAMrG,IAAKsG,QAAO,GAAGZ,QAASQ,YAAWJ,KAAKH,GAAKK;IACzDhG,KAAK/B,MAAM,GAAG,IAAI,CAACsI,aAAa,CAACZ;IACjC3F,KAAK9B,MAAM,GAAG,IAAI,CAACqI,aAAa,CAACT;IACjC9F,KAAKwG,MAAM,GAAG,IAAI,CAACD,aAAa,CAACP;IACjChG,KAAKC,MAAM,GAAG,IAAI,CAACsG,aAAa,CAACJ;IACjCnG,KAAKE,MAAM,GAAG,IAAI,CAACqG,aAAa,CAACF;EACnC;EAEAZ,UAAa;IACX,OAAO,IAAI,CAACvQ,KAAK,CAAC6K,IAAI,CAAC0G,QAAQ,CAAC,IAAI,CAACrH,KAAK,CAAC;EAC7C;EAEAgF,OAAU;IACR,OAAO,IAAI,CAAClP,KAAK,CAACwR,cAAc,CAAC,IAAI,CAACtH,KAAK;EAC7C;EAMAmH,cAAcI,OAAO,EAAE;IACrB,OAAO,IAAI,CAACzR,KAAK,CAACuN,MAAM,CAACkE,OAAQ;EACnC;EAKAC,eAAejJ,KAAK,EAAE;IACpB,MAAMqC,OAAO,IAAI,CAAC+B,WAAW;IAC7B,OAAOpE,UAAUqC,KAAKC,MAAM,GACxBD,KAAKE,MAAM,GACXF,KAAKC,MAAM;EACjB;EAEA4G,KAAQ;IACN,IAAI,CAACxQ,OAAO,CAAC;EACf;EAKAyQ,QAAW;IACT,MAAM9G,OAAO,IAAI,CAAC+B,WAAW;IAC7B,IAAI,IAAI,CAACwC,KAAK,EAAE;MACdwC,oBAAoB,IAAI,CAACxC,KAAK,EAAE,IAAI;;IAEtC,IAAIvE,KAAK6D,QAAQ,EAAE;MACjBT,WAAYpD;;EAEhB;EAKAgH,UAAa;IACX,MAAMjE,UAAU,IAAI,CAAC0C,UAAU;IAC/B,MAAM1F,OAAOgD,QAAQhD,IAAI,KAAKgD,OAAQhD,KAAI,GAAG,EAAE,CAAD;IAC9C,MAAMwE,QAAQ,IAAI,CAACA,KAAK;IAMxB,IAAI5I,SAASoE,IAAO;MAClB,MAAMC,OAAO,IAAI,CAAC+B,WAAW;MAC7B,IAAI,CAACwC,KAAK,GAAGzE,yBAAyBC,IAAMC;KACvC,UAAIuE,UAAUxE,IAAM;MACzB,IAAIwE,KAAO;QAETwC,oBAAoBxC,OAAO,IAAI;QAE/B,MAAMvE,OAAO,IAAI,CAAC+B,WAAW;QAC7BqB,WAAYpD;QACZA,IAAKqD,QAAO,GAAG,EAAE;;MAEnB,IAAItD,IAAQlE,WAAOoL,YAAY,CAAClH,IAAO;QACrCmH,kBAAkBnH,MAAM,IAAI;;MAE9B,IAAI,CAACgF,SAAS,GAAG,EAAE;MACnB,IAAI,CAACR,KAAK,GAAGxE;;EAEjB;EAEAoF,WAAc;IACZ,MAAMnF,OAAO,IAAI,CAAC+B,WAAW;IAE7B,IAAI,CAACiF,UAAU;IAEf,IAAI,IAAI,CAACjD,kBAAkB,EAAE;MAC3B/D,KAAK+C,OAAO,GAAG,IAAI,IAAI,CAACgB,kBAAkB;;EAE9C;EAEAoD,sBAAsBC,gBAAgB,EAAE;IACtC,MAAMpH,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMgB,UAAU,IAAI,CAAC0C,UAAU;IAC/B,IAAI4B,eAAe,KAAK;IAExB,IAAI,CAACL,UAAU;IAGf,MAAMM,aAAatH,KAAK6D,QAAQ;IAChC7D,KAAK6D,QAAQ,GAAGrD,SAAUR,MAAKE,MAAM,EAAEF;IAGvC,IAAIA,IAAKV,MAAK,KAAKyD,QAAQzD,KAAK,EAAE;MAChC+H,eAAe,IAAI;MAEnBjE,WAAYpD;MACZA,IAAKV,MAAK,GAAGyD,QAAQzD,KAAK;;IAK5B,IAAI,CAACiI,eAAe,CAACH;IAGrB,IAAIC,YAAgBC,mBAAetH,IAAK6D,SAAQ,EAAE;MAChDjC,YAAa,KAAI,EAAE5B,KAAKqD,OAAO;;EAEnC;EAMA3H,SAAY;IACV,MAAMH,MAAS,OAAI,CAACrG,KAAK,CAACqG,MAAM;IAChC,MAAMiM,YAAYjM,MAAOkM,iBAAgB,CAAC,IAAI,CAACpD,KAAK;IACpD,MAAMqD,SAASnM,OAAOoM,eAAe,CAAC,IAAI,CAAClC,UAAU,EAAI+B,aAAW,IAAI;IACxE,IAAI,CAAC9K,OAAO,GAAGnB,OAAOqM,cAAc,CAACF,QAAQ,IAAI,CAACG,UAAU;IAC5D,IAAI,CAACvD,QAAQ,GAAG,IAAI,CAAC5H,OAAO,CAACoL,OAAO;IACpC,IAAI,CAAC3D,eAAe,GAAG,EAAC;EAC1B;EAMA4D,KAAM/R,MAAK,EAAEgS,KAAK,EAAE;IAClB,MAAM;MAACjG,aAAa/B,IAAI;MAAEuE,OAAOxE;IAAI,CAAC,GAAG,IAAI;IAC7C,MAAM;MAACE;MAAQ4D;IAAAA,CAAS,GAAG7D;IAC3B,MAAMiC,QAAQhC,OAAOG,IAAI;IAEzB,IAAI6H,SAASjS,KAAU,UAAKgS,KAAUjI,UAAKpJ,MAAM,GAAG,IAAI,GAAGqJ,KAAKkI,OAAO;IACvE,IAAIC,OAAOnS,KAAQ,QAAKgK,KAAKqD,OAAO,CAACrN,QAAQ,CAAE;IAC/C,IAAIY,GAAGqB,GAAK6J;IAEZ,IAAI,IAAI,CAACwC,QAAQ,KAAK,KAAK,EAAE;MAC3BtE,KAAKqD,OAAO,GAAGtD;MACfC,IAAKkI,QAAO,GAAG,IAAI;MACnBpG,MAAS/B;KACJ;MACL,IAAI1D,OAAQ0D,KAAI,CAAC/J,MAAM,CAAG;QACxB8L,SAAS,IAAI,CAACsG,cAAc,CAACpI,MAAMD,MAAM/J,KAAOgS;MAClD,OAAO,IAAIrM,SAASoE,IAAI,CAAC/J,MAAM,CAAG;QAChC8L,SAAS,IAAI,CAACuG,eAAe,CAACrI,MAAMD,MAAM/J,KAAOgS;OAC5C;QACLlG,SAAS,IAAI,CAACwG,kBAAkB,CAACtI,MAAMD,MAAM/J,KAAOgS;;MAGtD,MAAMO,0BAA6B,SAAMtQ,GAAG,CAACgK,MAAM,KAAK,IAAI,IAAKkG,QAAQlQ,GAAG,CAACgK,MAAM,GAAGkG,IAAI,CAAClG,KAAM;MACjG,KAAKrL,CAAI,MAAGA,CAAIoR,UAAO,EAAEpR,CAAG;QAC1BoJ,IAAKqD,QAAO,CAACzM,CAAIZ,SAAM,GAAGiC,GAAM6J,SAAM,CAAClL,CAAE;QACzC,IAAIqR,MAAQ;UACV,IAAIM,0BAA8B;YAChCN,SAAS,KAAK;;UAEhBE,IAAOlQ;;MAEX;MACA+H,KAAKkI,OAAO,GAAGD;;IAGjB,IAAIpE,QAAU;MACZjC,aAAa,IAAI,EAAEE;;EAEvB;EAaAwG,mBAAmBtI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IAC3C,MAAM;MAAC/H;MAAQC;IAAAA,CAAO,GAAGF;IACzB,MAAMiC,QAAQhC,OAAOG,IAAI;IACzB,MAAM8B,QAAQhC,OAAOE,IAAI;IACzB,MAAMoI,SAASvI,OAAOwI,SAAS;IAC/B,MAAMC,cAAczI,MAAWC;IAC/B,MAAM4B,SAAS,IAAIvB,KAAMyH;IACzB,IAAIpR,GAAGuI,IAAMC;IAEb,KAAKxI,IAAI,GAAGuI,IAAO6I,QAAK,EAAEpR,CAAIuI,SAAM,EAAEvI,CAAG;MACvCwI,QAAQxI,CAAIZ;MACZ8L,MAAM,CAAClL,EAAE,GAAG;QACV,CAACqL,QAAQyG,WAAezI,WAAO8H,KAAK,CAACS,MAAM,CAACpJ,MAAM,EAAEA;QACpD,CAAC8C,QAAQhC,MAAO6H,MAAK,CAAChI,IAAI,CAACX,MAAM,EAAEA;MACrC;IACF;IACA,OAAO0C;EACT;EAaAsG,eAAepI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACvC,MAAM;MAAC/J;MAAQC;IAAAA,CAAO,GAAG8B;IACzB,MAAM8B,SAAS,IAAIvB,KAAMyH;IACzB,IAAIpR,GAAGuI,MAAMC,KAAOtI;IAEpB,KAAKF,IAAI,GAAGuI,IAAO6I,QAAK,EAAEpR,CAAIuI,SAAM,EAAEvI,CAAG;MACvCwI,QAAQxI,CAAIZ;MACZc,IAAOiJ,OAAI,CAACX,KAAM;MAClB0C,MAAM,CAAClL,EAAE,GAAG;QACVuH,GAAGF,OAAO8J,KAAK,CAACjR,IAAI,CAAC,EAAE,EAAEsI;QACzBhB,GAAGF,OAAO6J,KAAK,CAACjR,IAAI,CAAC,EAAE,EAAEsI;MAC3B;IACF;IACA,OAAO0C;EACT;EAaAuG,gBAAgBrI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACxC,MAAM;MAAC/J;MAAQC;IAAAA,CAAO,GAAG8B;IACzB,MAAM;MAAC2I,QAAW;MAAKC,WAAW;IAAA,CAAI,GAAG,IAAI,CAACtE,QAAQ;IACtD,MAAMxC,SAAS,IAAIvB,KAAMyH;IACzB,IAAIpR,GAAGuI,MAAMC,KAAOtI;IAEpB,KAAKF,IAAI,GAAGuI,IAAO6I,QAAK,EAAEpR,CAAIuI,SAAM,EAAEvI,CAAG;MACvCwI,QAAQxI,CAAIZ;MACZc,IAAOiJ,OAAI,CAACX,KAAM;MAClB0C,MAAM,CAAClL,EAAE,GAAG;QACVuH,GAAGF,MAAO8J,MAAK,CAACc,iBAAiB/R,MAAM6R,QAAWvJ;QAClDhB,GAAGF,MAAO6J,MAAK,CAACc,iBAAiB/R,MAAM8R,QAAWxJ;MACpD;IACF;IACA,OAAO0C;EACT;EAKAgH,UAAU1J,KAAK,EAAE;IACf,OAAO,IAAI,CAAC2C,WAAW,CAACsB,OAAO,CAACjE,KAAM;EACxC;EAKA2J,eAAe3J,KAAK,EAAE;IACpB,OAAO,IAAI,CAAC2C,WAAW,CAAChC,IAAI,CAACX,KAAM;EACrC;EAKAC,WAAW1B,KAAK,EAAEmE,MAAM,EAAErC,IAAI,EAAE;IAC9B,MAAMvK,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAM8K,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM3E,KAAQ0E,SAAM,CAACnE,MAAMyC,IAAI,CAAC;IAChC,MAAMd,KAAQ;MACZxD,IAAMiD,0BAAwB7J,OAAO,IAAI;MACzCsH,QAAQsF,OAAOE,OAAO,CAACrE,MAAMyC,IAAI,CAAC,CAACmC;IACrC;IACA,OAAOlD,UAAWC,QAAOlC,KAAO4C,OAAKZ,KAAK,EAAE;MAACK;IAAI;EACnD;EAKAuJ,sBAAsBC,KAAK,EAAEtL,KAAK,EAAEmE,MAAM,EAAExC,KAAK,EAAE;IACjD,MAAM4J,WAAcpH,SAAM,CAACnE,MAAMyC,IAAI,CAAC;IACtC,IAAIhD,KAAQ8L,mBAAgB,IAAI,GAAGC,MAAMD,WAAW;IACpD,MAAM1M,SAAS8C,KAASwC,WAAOE,OAAO,CAACrE,MAAMyC,IAAI,CAAC;IAClD,IAAId,SAAS9C,MAAQ;MACnB8C,MAAM9C,MAAM,GAAGA;MACfY,QAAQiC,WAAWC,KAAO4J,eAAa,IAAI,CAACnH,WAAW,CAAC3C,KAAK;;IAE/D6J,MAAMlT,GAAG,GAAGD,KAAKC,GAAG,CAACkT,MAAMlT,GAAG,EAAEqH;IAChC6L,MAAM/Q,GAAG,GAAGpC,KAAKoC,GAAG,CAAC+Q,MAAM/Q,GAAG,EAAEkF;EAClC;EAKAgM,SAAUzL,MAAK,EAAEgG,QAAQ,EAAE;IACzB,MAAM3D,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMsB,UAAUrD,KAAKqD,OAAO;IAC5B,MAAM4E,SAASjI,IAAKkI,QAAO,IAAIvK,UAAUqC,KAAKC,MAAM;IACpD,MAAMd,OAAOkE,QAAQ1M,MAAM;IAC3B,MAAM0S,UAAa,OAAI,CAACzC,cAAc,CAACjJ;IACvC,MAAM2B,QAAQoE,WAAYC,WAAU3D,IAAM,MAAI,CAAC9K,KAAK;IACpD,MAAM+T,KAAQ;MAAClT,KAAKkL,OAAOE,iBAAiB;MAAEjJ,KAAK+I,OAAOC;IAAiB;IAC3E,MAAM;MAACnL,KAAKuT,QAAQ;MAAEpR,KAAKqR;IAAQ,CAAC,GAAGzI,aAAcuI;IACrD,IAAIzS,CAAGkL;IAEP,SAAS0H,KAAQ;MACf1H,MAASuB,UAAO,CAACzM,CAAE;MACnB,MAAM+I,UAAamC,SAAM,CAACuH,WAAWjJ,IAAI,CAAC;MAC1C,OAAO,CAACR,cAASkC,OAAM,CAACnE,MAAMyC,IAAI,CAAC,KAAKkJ,QAAW3J,iBAAc4J,QAAW5J;IAC9E;IAEA,KAAK/I,CAAI,MAAGA,CAAIuI,SAAM,EAAEvI,CAAG;MACzB,IAAI4S,KAAS;QACX;;MAEF,IAAI,CAACR,qBAAqB,CAACC,OAAOtL,OAAOmE,MAAQxC;MACjD,IAAI2I,MAAQ;QAEV;;IAEJ;IACA,IAAIA,MAAQ;MAEV,KAAKrR,IAAIuI,IAAO,MAAGvI,CAAK,OAAG,EAAEA,CAAG;QAC9B,IAAI4S,KAAS;UACX;;QAEF,IAAI,CAACR,qBAAqB,CAACC,OAAOtL,OAAOmE,MAAQxC;QACjD;MACF;;IAEF,OAAO2J;EACT;EAEAQ,mBAAmB9L,KAAK,EAAE;IACxB,MAAMmE,MAAS,OAAI,CAACC,WAAW,CAACsB,OAAO;IACvC,MAAM7G,SAAS,EAAE;IACjB,IAAI5F,GAAGuI,IAAM/B;IAEb,KAAKxG,IAAI,GAAGuI,IAAO2C,UAAOnL,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC/CwG,QAAQ0E,MAAM,CAAClL,EAAE,CAAC+G,MAAMyC,IAAI,CAAC;MAC7B,IAAIR,eAASxC,KAAQ;QACnBZ,OAAO5E,IAAI,CAACwF;;IAEhB;IACA,OAAOZ;EACT;EAMAkN,cAAiB;IACf,OAAO,KAAK;EACd;EAKAC,iBAAiBvK,KAAK,EAAE;IACtB,MAAMY,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM9B,SAASD,KAAKC,MAAM;IAC1B,MAAMC,SAASF,KAAKE,MAAM;IAC1B,MAAM4B,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAC9B,OAAO;MACLwK,KAAO3J,WAAS,EAAKA,UAAO4J,gBAAgB,CAAC/H,MAAM,CAAC7B,MAAOG,KAAI,CAAC,IAAI,EAAE;MACtEhD,KAAO8C,WAAS,EAAKA,UAAO2J,gBAAgB,CAAC/H,MAAM,CAAC5B,MAAOE,KAAI,CAAC,IAAI;IACtE;EACF;EAKA/J,QAAQoJ,IAAI,EAAE;IACZ,MAAMO,OAAO,IAAI,CAAC+B,WAAW;IAC7B,IAAI,CAACnH,MAAM,CAAC6E,IAAQ;IACpBO,KAAK8J,KAAK,GAAGrL,OAAOoH,eAAe,IAAI,CAACnJ,OAAO,CAACqN,IAAI,EAAE/L,WAAYgC,MAAK/B,MAAM,EAAE+B,KAAK9B,MAAM,EAAE,IAAI,CAACwL,cAAc;EACjH;EAKA9O,OAAO6E,IAAI,EAAE;EAEb5I,IAAO;IACL,MAAMqN,MAAM,IAAI,CAACD,IAAI;IACrB,MAAM/O,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAM8K,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMiI,QAAWhK,QAAKD,IAAI,IAAI,EAAE;IAChC,MAAMkK,OAAO/U,MAAMgV,SAAS;IAC5B,MAAMvP,SAAS,EAAE;IACjB,MAAM3E,KAAQ,OAAI,CAAC0O,UAAU,IAAI;IACjC,MAAMsD,QAAQ,IAAI,CAACrD,UAAU,IAAKqF,SAASrT,MAAM,GAAGX;IACpD,MAAMmU,uBAA0B,OAAI,CAACzN,OAAO,CAACyN,uBAAuB;IACpE,IAAIvT;IAEJ,IAAIoJ,KAAK+C,OAAO,EAAE;MAChB/C,KAAK+C,OAAO,CAAClM,IAAI,CAACqN,KAAK+F,MAAMjU,KAAOgS;;IAGtC,KAAKpR,IAAIZ,KAAOY,MAAIZ,KAAQgS,UAAO,EAAEpR,CAAG;MACtC,MAAMqM,UAAU+G,QAAQ,CAACpT,CAAE;MAC3B,IAAIqM,QAAQW,MAAM,EAAE;QAClB;;MAEF,IAAIX,QAAQtI,MAAM,IAAIwP,uBAAyB;QAC7CxP,OAAO/C,IAAI,CAACqL;OACP;QACLA,OAAQpM,KAAI,CAACqN,GAAK+F;;IAEtB;IAEA,KAAKrT,IAAI,CAAGA,MAAI+D,OAAOhE,MAAM,EAAE,EAAEC,CAAG;MAClC+D,MAAM,CAAC/D,EAAE,CAACC,IAAI,CAACqN,GAAK+F;IACtB;EACF;EASAG,QAAShL,MAAK,EAAEzE,MAAM,EAAE;IACtB,MAAM8E,OAAO9E,MAAS,cAAW,SAAS;IAC1C,OAAOyE,UAAUpK,SAAa,QAAI,CAAC+M,WAAW,CAACgB,OAAO,GAClD,IAAI,CAACsH,4BAA4B,CAAC5K,QAClC,IAAI,CAAC6K,yBAAyB,CAAClL,SAAS,GAAGK,IAAK;EACtD;EAKAoI,WAAWzI,KAAK,EAAEzE,MAAM,EAAE8E,IAAI,EAAE;IAC9B,MAAMsD,UAAU,IAAI,CAAC0C,UAAU;IAC/B,IAAI8E;IACJ,IAAInL,SAAS,CAAKA,YAAQ,IAAI,CAAC2C,WAAW,CAAChC,IAAI,CAACpJ,MAAM,EAAE;MACtD,MAAMsM,UAAU,IAAI,CAAClB,WAAW,CAAChC,IAAI,CAACX,KAAM;MAC5CmL,UAAUtH,OAAQ6B,SAAQ,KACvB7B,OAAQ6B,SAAQ,GAAG9B,kBAAkB,IAAI,CAAC6E,UAAU,IAAIzI,OAAO6D,OAAO;MACzEsH,QAAQzI,MAAM,GAAG,IAAI,CAACgH,SAAS,CAAC1J;MAChCmL,QAAQpH,GAAG,GAAGJ,OAAQhD,KAAI,CAACX,KAAM;MACjCmL,QAAQnL,KAAK,GAAGmL,OAAQrH,UAAS,GAAG9D;KAC/B;MACLmL,UAAU,IAAI,CAACzF,QAAQ,KACpB,IAAI,CAACA,QAAQ,GAAGlC,qBAAqB,IAAI,CAAC1N,KAAK,CAAC2S,UAAU,IAAI,IAAI,CAACzI,KAAK;MAC3EmL,QAAQxH,OAAO,GAAGA;MAClBwH,QAAQnL,KAAK,GAAGmL,QAAQ7K,YAAY,GAAG,IAAI,CAACN,KAAK;;IAGnDmL,OAAQ5P,OAAM,GAAG,CAAC,CAACA;IACnB4P,QAAQ9K,IAAI,GAAGA;IACf,OAAO8K;EACT;EAMAF,6BAA6B5K,IAAI,EAAE;IACjC,OAAO,IAAI,CAAC+K,sBAAsB,CAAC,IAAI,CAACzG,kBAAkB,CAAClD,EAAE,EAAEpB;EACjE;EAOA6K,yBAA0BlL,MAAK,EAAEK,IAAI,EAAE;IACrC,OAAO,IAAI,CAAC+K,sBAAsB,CAAC,IAAI,CAACxG,eAAe,CAACnD,EAAE,EAAEpB,IAAML;EACpE;EAKAoL,uBAAuBC,WAAW,EAA2B;IAAA,IAAzBhL,2EAAO,SAAS;IAAA,IAAEL,KAAK;IACzD,MAAMzE,SAAS8E,IAAS;IACxB,MAAMiL,QAAQ,IAAI,CAACvG,eAAe;IAClC,MAAMwG,WAAWF,cAAc,GAAMhL;IACrC,MAAM+D,SAASkH,KAAK,CAACC,QAAS;IAC9B,MAAMC,OAAU,OAAI,CAAChG,mBAAmB,IAAIiG,OAAQzL;IACpD,IAAIoE,MAAQ;MACV,OAAOD,iBAAiBC,MAAQoH;;IAElC,MAAMrP,MAAS,OAAI,CAACrG,KAAK,CAACqG,MAAM;IAChC,MAAMiM,YAAYjM,MAAOuP,wBAAuB,CAAC,IAAI,CAACzG,KAAK,EAAEoG;IAC7D,MAAMM,WAAWpQ,MAAS,IAAE,GAAE8P,WAAY,OAAM,EAAE,SAASA,aAAa,GAAG,GAAG,CAACA,aAAa,GAAG;IAC/F,MAAM/C,SAASnM,MAAOoM,gBAAe,CAAC,IAAI,CAAClC,UAAU,EAAI+B;IACzD,MAAMwD,QAAQnP,MAAOC,KAAI,CAACC,QAASiO,SAAQ,CAACS,WAAY;IAGxD,MAAMF,UAAU,MAAM,IAAI,CAAC1C,UAAU,CAACzI,OAAOzE,MAAQ8E;IACrD,MAAMjD,SAASjB,MAAO0P,oBAAmB,CAACvD,QAAQsD,OAAOT,OAASQ;IAElE,IAAIvO,OAAOM,OAAO,EAAE;MAGlBN,OAAOM,OAAO,GAAG8N;MAKjBF,KAAK,CAACC,QAAS,IAAG9O,OAAOqP,MAAM,CAAC3H,iBAAiB/G,MAAQoO;;IAG3D,OAAOpO;EACT;EAMA2O,mBAAmB/L,KAAK,EAAEgM,UAAU,EAAEzQ,MAAM,EAAE;IAC5C,MAAMzF,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMwV,QAAQ,IAAI,CAACvG,eAAe;IAClC,MAAMwG,QAAW,GAAC,aAAYS,UAAW,EAAC;IAC1C,MAAM5H,SAASkH,KAAK,CAACC,QAAS;IAC9B,IAAInH,MAAQ;MACV,OAAOA;;IAET,IAAI9G;IACJ,IAAIxH,MAAMwH,OAAO,CAACV,SAAS,KAAK,KAAK,EAAE;MACrC,MAAMT,MAAS,OAAI,CAACrG,KAAK,CAACqG,MAAM;MAChC,MAAMiM,YAAYjM,MAAO8P,0BAAyB,CAAC,IAAI,CAAChH,KAAK,EAAE+G;MAC/D,MAAM1D,SAASnM,MAAOoM,gBAAe,CAAC,IAAI,CAAClC,UAAU,EAAI+B;MACzD9K,OAAUnB,UAAOqM,cAAc,CAACF,QAAQ,IAAI,CAACG,UAAU,CAACzI,OAAOzE,MAAQyQ;;IAEzE,MAAMxO,aAAa,IAAItB,WAAWpG,KAAOwH,aAAWA,QAAQE,UAAU;IACtE,IAAIF,WAAWA,OAAQ4O,WAAU,EAAE;MACjCZ,KAAK,CAACC,SAAS,GAAG9O,OAAOqP,MAAM,CAACtO;;IAElC,OAAOA;EACT;EAMA2O,iBAAiB7O,OAAO,EAAE;IACxB,IAAI,CAACA,OAAQI,QAAO,EAAE;MACpB;;IAEF,OAAO,IAAI,CAAC2H,cAAc,KAAK,IAAI,CAACA,cAAc,GAAG5I,MAAOyB,OAAM,CAAC,IAAIZ,OAAO;EAChF;EAMA8O,cAAe/L,KAAI,EAAEgM,aAAa,EAAE;IAClC,OAAO,CAACA,iBAAiBnI,kBAAmB7D,UAAS,IAAI,CAACvK,KAAK,CAACwW,mBAAmB;EACrF;EAKAC,iBAAkB3V,MAAK,EAAEyJ,IAAI,EAAE;IAC7B,MAAMmM,SAAY,OAAI,CAACtB,yBAAyB,CAACtU,KAAOyJ;IACxD,MAAMoM,0BAA0B,IAAI,CAACpH,cAAc;IACnD,MAAMgH,aAAgB,OAAI,CAACF,gBAAgB,CAACK;IAC5C,MAAMJ,iBAAiB,IAAI,CAACA,cAAc,CAAC/L,MAAMgM,kBAAmBA,aAAkBI;IACtF,IAAI,CAACC,mBAAmB,CAACL,eAAehM,IAAMmM;IAC9C,OAAO;MAACH;MAAeD;IAAc;EACvC;EAMAO,cAAc9I,OAAO,EAAE7D,KAAK,EAAE9C,UAAU,EAAEmD,IAAI,EAAE;IAC9C,IAAI6D,mBAAmB7D,IAAO;MAC5B5D,MAAOyB,OAAM,CAAC2F,OAAS3G;KAClB;MACL,IAAI,CAAC6O,kBAAkB,CAAC/L,OAAOK,IAAM7E,QAAM,CAACqI,OAAS3G;;EAEzD;EAMAwP,oBAAoBL,aAAa,EAAEhM,IAAI,EAAEhD,UAAU,EAAE;IACnD,IAAIgP,iBAAiB,CAACnI,mBAAmB7D,IAAO;MAC9C,IAAI,CAAC0L,kBAAkB,CAACnW,WAAWyK,IAAM7E,QAAM,CAAC6Q,aAAehP;;EAEnE;EAKAuP,UAAU/I,OAAO,EAAE7D,KAAK,EAAEK,IAAI,EAAE9E,MAAM,EAAE;IACtCsI,QAAQtI,MAAM,GAAGA;IACjB,MAAM+B,OAAU,OAAI,CAAC0N,QAAQ,CAAChL,KAAOzE;IACrC,IAAI,CAACwQ,kBAAkB,CAAC/L,OAAOK,MAAM9E,MAAQC,QAAM,CAACqI,OAAS;MAG3DvG,SAAS,CAAE/B,UAAU,IAAI,CAAC4Q,gBAAgB,CAAC7O,OAAaA;IAC1D;EACF;EAEAuP,iBAAiBhJ,OAAO,EAAEvD,YAAY,EAAEN,KAAK,EAAE;IAC7C,IAAI,CAAC4M,SAAS,CAAC/I,OAAS7D,SAAO,UAAU,KAAK;EAChD;EAEA8M,cAAcjJ,OAAO,EAAEvD,YAAY,EAAEN,KAAK,EAAE;IAC1C,IAAI,CAAC4M,SAAS,CAAC/I,OAAS7D,SAAO,UAAU,IAAI;EAC/C;EAKA+M,wBAA2B;IACzB,MAAMlJ,OAAU,OAAI,CAAClB,WAAW,CAACgB,OAAO;IAExC,IAAIE,OAAS;MACX,IAAI,CAAC+I,SAAS,CAAC/I,OAASjO,aAAW,UAAU,KAAK;;EAEtD;EAKAoX,qBAAwB;IACtB,MAAMnJ,OAAU,OAAI,CAAClB,WAAW,CAACgB,OAAO;IAExC,IAAIE,OAAS;MACX,IAAI,CAAC+I,SAAS,CAAC/I,OAASjO,aAAW,UAAU,IAAI;;EAErD;EAKAuS,gBAAgBH,gBAAgB,EAAE;IAChC,MAAMrH,OAAO,IAAI,CAACwE,KAAK;IACvB,MAAMyF,QAAW,OAAI,CAACjI,WAAW,CAAChC,IAAI;IAGtC,KAAK,MAAM,CAAC1E,MAAQgR,QAAMC,KAAK,IAAI,IAAI,CAACvH,SAAS,EAAE;MACjD,IAAI,CAAC1J,MAAO,EAACgR,IAAMC;IACrB;IACA,IAAI,CAACvH,SAAS,GAAG,EAAE;IAEnB,MAAMwH,UAAUvC,SAASrT,MAAM;IAC/B,MAAM6V,UAAUzM,KAAKpJ,MAAM;IAC3B,MAAMqR,KAAQlS,QAAKC,GAAG,CAACyW,OAASD;IAEhC,IAAIvE,KAAO;MAKT,IAAI,CAACD,KAAK,CAAC,CAAGC;;IAGhB,IAAIwE,UAAUD,OAAS;MACrB,IAAI,CAACE,eAAe,CAACF,SAASC,UAAUD,OAASnF;KAC5C,UAAIoF,UAAUD,OAAS;MAC5B,IAAI,CAACG,eAAe,CAACF,SAASD,OAAUC;;EAE5C;EAKAC,gBAAgBzW,KAAK,EAAEgS,KAAK,EAA2B;IAAA,IAAzBZ,uFAAmB,IAAI;IACnD,MAAMpH,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMhC,OAAOC,KAAKD,IAAI;IACtB,MAAMhC,MAAM/H,KAAQgS;IACpB,IAAIpR;IAEJ,MAAM+V,OAAQC,GAAQ;MACpBA,IAAIjW,MAAM,IAAIqR;MACd,KAAKpR,IAAIgW,GAAIjW,OAAM,GAAG,CAAGC,OAAKmH,KAAKnH,CAAK;QACtCgW,GAAG,CAAChW,CAAE,IAAGgW,GAAG,CAAChW,IAAIoR,KAAM;MACzB;IACF;IACA2E,IAAK5M;IAEL,KAAKnJ,CAAIZ,UAAOY,CAAImH,QAAK,EAAEnH,CAAG;MAC5BmJ,IAAI,CAACnJ,CAAE,IAAG,IAAI,IAAI,CAACoN,eAAe;IACpC;IAEA,IAAI,IAAI,CAACM,QAAQ,EAAE;MACjBqI,KAAK3M,KAAKqD,OAAO;;IAEnB,IAAI,CAAC0E,KAAK,CAAC/R,KAAOgS;IAElB,IAAIZ,gBAAkB;MACpB,IAAI,CAACyF,cAAc,CAAC9M,MAAM/J,OAAOgS,KAAO;;EAE5C;EAEA6E,cAAe5J,QAAO,EAAEjN,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;EAK5CiN,eAAgB1W,MAAK,EAAEgS,KAAK,EAAE;IAC5B,MAAMhI,OAAO,IAAI,CAAC+B,WAAW;IAC7B,IAAI,IAAI,CAACuC,QAAQ,EAAE;MACjB,MAAMwI,UAAU9M,IAAKqD,QAAO,CAAC0J,MAAM,CAAC/W,KAAOgS;MAC3C,IAAIhI,KAAK6D,QAAQ,EAAE;QACjBT,YAAYpD,IAAM8M;;;IAGtB9M,KAAKD,IAAI,CAACgN,MAAM,CAAC/W,KAAOgS;EAC1B;EAKAgF,MAAMC,IAAI,EAAE;IACV,IAAI,IAAI,CAAC3I,QAAQ,EAAE;MACjB,IAAI,CAACS,SAAS,CAACnN,IAAI,CAACqV;KACf;MACL,MAAM,CAAC5R,QAAQgR,IAAMC,OAAK,GAAGW;MAC7B,IAAI,CAAC5R,MAAO,EAACgR,IAAMC;;IAErB,IAAI,CAACpX,KAAK,CAACgY,YAAY,CAACtV,IAAI,CAAC,CAAC,IAAI,CAACwH,KAAK,EAAK6N,QAAK;EACpD;EAEAE,WAAc;IACZ,MAAMnF,QAAQoF,UAAUzW,MAAM;IAC9B,IAAI,CAACqW,KAAK,CAAC,CAAC,mBAAmB,IAAI,CAACvH,UAAU,GAAG1F,IAAI,CAACpJ,MAAM,GAAGqR,OAAOA,MAAM;EAC9E;EAEAqF,UAAa;IACX,IAAI,CAACL,KAAK,CAAC,CAAC,mBAAmB,IAAI,CAACjL,WAAW,CAAChC,IAAI,CAACpJ,MAAM,GAAG,GAAG,EAAE;EACrE;EAEA2W,YAAe;IACb,IAAI,CAACN,KAAK,CAAC,CAAC,mBAAmB,GAAG,EAAE;EACtC;EAEAO,aAAcvX,MAAK,EAAEgS,KAAK,EAAE;IAC1B,IAAIA,KAAO;MACT,IAAI,CAACgF,KAAK,CAAC,CAAC,mBAAmBhX,OAAOgS,MAAM;;IAE9C,MAAMwF,WAAWJ,SAAUzW,OAAM,GAAG;IACpC,IAAI6W,QAAU;MACZ,IAAI,CAACR,KAAK,CAAC,CAAC,mBAAmBhX,OAAOwX,SAAS;;EAEnD;EAEAC,cAAiB;IACf,IAAI,CAACT,KAAK,CAAC,CAAC,mBAAmB,GAAGI,UAAUzW,MAAM,CAAC;EACrD;AACF;ACtiCA,SAAS+W,iBAAkB/P,MAAK,EAAEtI,IAAI,EAAE;EACtC,IAAI,CAACsI,MAAMgQ,MAAM,CAACC,IAAI,EAAE;IACtB,MAAMC,eAAelQ,KAAMgE,wBAAuB,CAACtM;IACnD,IAAImH,SAAS,EAAE;IAEf,KAAK,IAAI5F,IAAI,CAAGuI,SAAO0O,aAAalX,MAAM,EAAEC,CAAIuI,SAAMvI,CAAK;MACzD4F,MAASA,UAAOsR,MAAM,CAACD,YAAY,CAACjX,EAAE,CAACiL,UAAU,CAAC4H,kBAAkB,CAAC9L;IACvE;IACAA,KAAMgQ,OAAM,CAACC,IAAI,GAAGG,aAAavR,MAAOwR,KAAI,CAAC,CAACC,CAAGrP,QAAMqP,CAAIrP;;EAE7D,OAAOjB,MAAMgQ,MAAM,CAACC,IAAI;AAC1B;AAMA,SAASM,oBAAqBlO,KAAI,EAAE;EAClC,MAAMrC,QAAQqC,KAAKC,MAAM;EACzB,MAAMzD,MAASkR,qBAAkB/P,KAAOqC,OAAK3K,IAAI;EACjD,IAAIU,MAAM4H,MAAMwQ,OAAO;EACvB,IAAIvX,GAAGuI,MAAMiP,IAAMjG;EACnB,MAAMkG,mBAAmB,MAAM;IAC7B,IAAID,IAAS,cAASA,IAAS,MAAC,KAAO;MAErC;;IAEF,IAAIvD,QAAQ1C,IAAO;MAEjBpS,GAAMD,QAAKC,GAAG,CAACA,KAAKD,KAAKwY,GAAG,CAACF,OAAOjG,IAASpS;;IAE/CoS,IAAOiG;EACT;EAEA,KAAKxX,IAAI,GAAGuI,IAAO3C,UAAO7F,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IAC/CwX,OAAOzQ,KAAM4Q,iBAAgB,CAAC/R,MAAM,CAAC5F,CAAE;IACvCyX;EACF;EAEAlG,IAAOnT;EACP,KAAK4B,IAAI,CAAGuI,SAAOxB,KAAM6Q,MAAK,CAAC7X,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IACpDwX,IAAOzQ,SAAM8Q,eAAe,CAAC7X;IAC7ByX;EACF;EAEA,OAAOtY;AACT;AAQA,SAAS2Y,yBAAyBtP,KAAK,EAAEuP,KAAK,EAAEjS,OAAO,EAAEkS,UAAU,EAAE;EACnE,MAAMC,YAAYnS,QAAQoS,YAAY;EACtC,IAAIzR,IAAM0R;EAEV,IAAIC,cAAcH,SAAY;IAC5BxR,OAAOsR,KAAM5Y,IAAG,GAAG2G,QAAQuS,kBAAkB;IAC7CF,QAAQrS,QAAQwS,aAAa;GACxB;IAIL7R,OAAOwR,SAAYD;IACnBG,KAAQ;;EAGV,OAAO;IACLI,OAAO9R,IAAOuR;IACdG;IACA/Y,OAAO2Y,KAAMS,OAAM,CAAChQ,MAAM,GAAI/B,IAAO;EACvC;AACF;AAQA,SAASgS,0BAA0BjQ,KAAK,EAAEuP,KAAK,EAAEjS,OAAO,EAAEkS,UAAU,EAAE;EACpE,MAAMQ,SAAST,MAAMS,MAAM;EAC3B,MAAMhB,OAAOgB,MAAM,CAAChQ,KAAM;EAC1B,IAAI+I,OAAO/I,QAAQ,CAAIgQ,SAAM,CAAChQ,KAAQ,KAAE,GAAG,IAAI;EAC/C,IAAIkQ,OAAOlQ,KAAQgQ,UAAOzY,MAAM,GAAG,CAAIyY,SAAM,CAAChQ,QAAQ,CAAE,IAAG,IAAI;EAC/D,MAAMmQ,UAAU7S,QAAQuS,kBAAkB;EAE1C,IAAI9G,SAAS,IAAI,EAAE;IAGjBA,OAAOiG,IAAQkB,QAAS,SAAI,GAAGX,MAAM5Q,GAAG,GAAG4Q,KAAM3Y,MAAK,GAAGsZ,OAAOlB,IAAI,CAAD;;EAGrE,IAAIkB,SAAS,IAAI,EAAE;IAEjBA,OAAOlB,OAAOA,IAAOjG;;EAGvB,MAAMnS,QAAQoY,IAAO,GAACA,QAAOtY,IAAKC,IAAG,CAACoS,MAAMmH,IAAI,KAAK,CAAIC;EACzD,MAAMlS,OAAOvH,IAAKwY,IAAG,CAACgB,OAAOnH,QAAQ,CAAIoH;EAEzC,OAAO;IACLJ,OAAO9R,IAAOuR;IACdG,OAAOrS,QAAQwS,aAAa;IAC5BlZ;EACF;AACF;AAEA,SAASwZ,cAAcC,KAAK,EAAE3Y,IAAI,EAAEoJ,MAAM,EAAEtJ,CAAC,EAAE;EAC7C,MAAM8Y,aAAaxP,MAAO6H,MAAK,CAAC0H,KAAK,CAAC,EAAE,EAAE7Y;EAC1C,MAAM+Y,WAAWzP,MAAO6H,MAAK,CAAC0H,KAAK,CAAC,EAAE,EAAE7Y;EACxC,MAAMb,GAAMD,QAAKC,GAAG,CAAC2Z,UAAYC;EACjC,MAAMzX,GAAMpC,QAAKoC,GAAG,CAACwX,UAAYC;EACjC,IAAIC,QAAW7Z;EACf,IAAI8Z,MAAS3X;EAEb,IAAIpC,KAAKwY,GAAG,CAACvY,OAAOD,IAAKwY,IAAG,CAACpW,GAAM;IACjC0X,QAAW1X;IACX2X,MAAS9Z;;EAKXe,IAAI,CAACoJ,OAAOE,IAAI,CAAC,GAAGyP;EAEpB/Y,KAAKgZ,OAAO,GAAG;IACbF;IACAC;IACA7Z,KAAO0Z;IACP3R,GAAK4R;IACL5Z;IACAmC;EACF;AACF;AAEA,SAAS6X,WAAWN,KAAK,EAAE3Y,IAAI,EAAEoJ,MAAM,EAAEtJ,CAAC,EAAE;EAC1C,IAAIyF,QAAQoT,KAAQ;IAClBD,aAAcC,QAAO3Y,MAAMoJ,MAAQtJ;GAC9B;IACLE,IAAI,CAACoJ,OAAOE,IAAI,CAAC,GAAGF,MAAO6H,MAAK,CAAC0H,KAAO7Y;;EAE1C,OAAOE;AACT;AAEA,SAASkZ,sBAAsBhQ,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;EACvD,MAAM/H,SAASD,KAAKC,MAAM;EAC1B,MAAMC,SAASF,KAAKE,MAAM;EAC1B,MAAMsI,SAASvI,OAAOwI,SAAS;EAC/B,MAAMC,cAAczI,MAAWC;EAC/B,MAAM4B,SAAS,EAAE;EACjB,IAAIlL,GAAGuI,MAAMrI,IAAM2Y;EAEnB,KAAK7Y,IAAIZ,OAAOmJ,IAAOnJ,WAAQgS,KAAK,EAAEpR,IAAIuI,IAAM,IAAEvI,CAAG;IACnD6Y,KAAQ1P,OAAI,CAACnJ,CAAE;IACfE,OAAO,EAAC;IACRA,IAAI,CAACmJ,OAAOG,IAAI,CAAC,GAAGsI,eAAezI,MAAO8H,MAAK,CAACS,MAAM,CAAC5R,EAAE,EAAEA;IAC3DkL,OAAOlK,IAAI,CAACmY,UAAWN,QAAO3Y,MAAMoJ,MAAQtJ;EAC9C;EACA,OAAOkL;AACT;AAEA,SAASmO,WAAWC,MAAM,EAAE;EAC1B,OAAOA,UAAUA,MAAON,SAAQ,KAAK5a,SAAakb,WAAOL,MAAM,KAAK7a;AACtE;AAEA,SAASmb,QAAQ9S,IAAI,EAAE6C,MAAM,EAAEkQ,UAAU,EAAE;EACzC,IAAI/S,SAAS,CAAG;IACd,OAAOwC,IAAKxC;;EAEd,OAAO,CAAC6C,OAAOmQ,YAAY,EAAK,OAAI,CAAC,MAAMnQ,OAAOnK,GAAG,IAAIqa,aAAa,CAAI,IAAC,CAAC,CAAD;AAC7E;AAEA,SAASE,YAAYhU,UAAU,EAAE;EAC/B,IAAIwB,SAAS9H,KAAO+H,OAAKM,GAAKE;EAC9B,IAAIjC,WAAWiU,UAAU,EAAE;IACzBzS,UAAUxB,UAAWkU,KAAI,GAAGlU,WAAW6B,CAAC;IACxCnI,KAAQ;IACR+H,GAAM;GACD;IACLD,UAAUxB,UAAWkU,KAAI,GAAGlU,WAAW8B,CAAC;IACxCpI,KAAQ;IACR+H,GAAM;;EAER,IAAID,OAAS;IACXO,GAAM;IACNE,MAAS;GACJ;IACLF,GAAM;IACNE,MAAS;;EAEX,OAAO;IAACvI;IAAO+H;IAAKD;IAASO;IAAKE;EAAM;AAC1C;AAEA,SAASkS,iBAAiBnU,UAAU,EAAEI,OAAO,EAAE4C,KAAK,EAAEF,KAAK,EAAE;EAC3D,IAAIsR,OAAOhU,QAAQiU,aAAa;EAChC,MAAMzV,MAAM,EAAC;EAEb,IAAI,CAACwV,IAAM;IACTpU,WAAWqU,aAAa,GAAGzV;IAC3B;;EAGF,IAAIwV,SAAS,IAAI,EAAE;IACjBpU,WAAWqU,aAAa,GAAG;MAACtS,KAAK,IAAI;MAAEC,OAAO,IAAI;MAAEC,QAAQ,IAAI;MAAEC,MAAM;IAAI;IAC5E;;EAGF,MAAM;IAACxI;IAAO+H;IAAKD;IAASO;IAAKE;EAAAA,CAAO,GAAG+R,WAAYhU;EAEvD,IAAIoU,SAAS,YAAYpR,KAAO;IAC9BhD,UAAWsU,mBAAkB,GAAG,IAAI;IACpC,IAAI,CAACtR,MAAM8C,IAAI,IAAI,OAAOhD,KAAO;MAC/BsR,IAAOrS;KACF,UAAI,CAACiB,MAAM+C,OAAO,IAAI,OAAOjD,KAAO;MACzCsR,IAAOnS;KACF;MACLrD,GAAG,CAAC2V,SAAUtS,SAAQvI,OAAO+H,GAAKD,WAAS,GAAG,IAAI;MAClD4S,IAAOrS;;;EAIXnD,GAAG,CAAC2V,SAAUH,OAAM1a,OAAO+H,GAAKD,WAAS,GAAG,IAAI;EAChDxB,WAAWqU,aAAa,GAAGzV;AAC7B;AAEA,SAAS2V,UAAUH,IAAI,EAAEzC,CAAC,EAAErP,CAAC,EAAEd,OAAO,EAAE;EACtC,IAAIA,OAAS;IACX4S,IAAOI,QAAKJ,MAAMzC,CAAGrP;IACrB8R,IAAOK,YAASL,MAAM9R,CAAGqP;GACpB;IACLyC,IAAOK,YAASL,MAAMzC,CAAGrP;;EAE3B,OAAO8R;AACT;AAEA,SAASI,KAAKE,IAAI,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAC1B,OAAOF,SAASC,EAAKC,QAAKF,IAASE,UAAKD,KAAKD,IAAI;AACnD;AAEA,SAASD,SAASI,CAAC,EAAEnb,KAAK,EAAE+H,GAAG,EAAE;EAC/B,OAAOoT,MAAM,OAAUnb,WAAQmb,CAAM,aAAQpT,MAAMoT,CAAC;AACtD;AAEA,SAASC,iBAAiB9U,UAAU,QAAmByS,KAAK,EAAE;EAAA,IAAxB;IAACsC;EAAAA,CAAc;EACnD/U,UAAW+U,cAAa,GAAGA,aAAkB,cACzCtC,UAAU,CAAI,UAAO,CAAC,GACtBsC,aAAa;AACnB;AAEe,MAAMC,aAAsBxN;EAEzC,OAAOjD,KAAK,KAAM;EAKlB,OAAO9E,QAAW;IAChBgI,oBAAoB,KAAK;IACzBC,eAAiB;IAEjBiL,kBAAoB;IACpBC,aAAe;IACfqC,SAAS,IAAI;IAEb3U,UAAY;MACV4U,OAAS;QACPnc,IAAM;QACNiH,UAAY,GAAC,KAAK,KAAK,QAAQ,SAAS;MAC1C;IACF;GACA;EAKF,OAAOmV,SAAY;IACjBhP,MAAQ;MACNiP,OAAS;QACPrc,IAAM;QACNsc,QAAQ,IAAI;QACZC,IAAM;UACJD,QAAQ;QACV;MACF;MACAE,OAAS;QACPxc,IAAM;QACNyc,aAAa;MACf;IACF;GACA;EAQFxJ,mBAAmBtI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IAC3C,OAAOgI,sBAAsBhQ,IAAMD,QAAM/J,KAAOgS;EAClD;EAOAI,eAAepI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACvC,OAAOgI,sBAAsBhQ,IAAMD,QAAM/J,KAAOgS;EAClD;EAOAK,gBAAgBrI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACxC,MAAM;MAAC/H;MAAQC;IAAAA,CAAO,GAAGF;IACzB,MAAM;MAAC2I,QAAW;MAAKC,WAAW;IAAA,CAAI,GAAG,IAAI,CAACtE,QAAQ;IACtD,MAAMnE,WAAWF,MAAOG,KAAI,KAAK,MAAMuI,WAAWC,QAAQ;IAC1D,MAAMvI,WAAWH,MAAOE,KAAI,KAAK,MAAMuI,WAAWC,QAAQ;IAC1D,MAAM9G,SAAS,EAAE;IACjB,IAAIlL,GAAGuI,MAAMrI,IAAMib;IACnB,KAAKnb,IAAIZ,OAAOmJ,IAAOnJ,WAAQgS,KAAK,EAAEpR,IAAIuI,IAAM,IAAEvI,CAAG;MACnDmb,GAAMhS,OAAI,CAACnJ,CAAE;MACbE,OAAO,EAAC;MACRA,IAAI,CAACmJ,MAAOG,KAAI,CAAC,GAAGH,OAAO8H,KAAK,CAACc,gBAAiBkJ,MAAK5R,QAAWvJ;MAClEkL,OAAOlK,IAAI,CAACmY,WAAWlH,iBAAiBkJ,GAAK1R,aAAWvJ,MAAMoJ,MAAQtJ;IACxE;IACA,OAAOkL;EACT;EAKAkH,sBAAsBC,KAAK,EAAEtL,KAAK,EAAEmE,MAAM,EAAExC,KAAK,EAAE;IACjD,KAAK,CAAC0J,qBAAqB,CAACC,OAAOtL,OAAOmE,MAAQxC;IAClD,MAAM4Q,SAASpO,OAAOgO,OAAO;IAC7B,IAAII,UAAUvS,KAAU,SAAI,CAACoE,WAAW,CAAC7B,MAAM,EAAE;MAE/C+I,KAAMlT,IAAG,GAAGD,IAAKC,IAAG,CAACkT,KAAMlT,IAAG,EAAEma,OAAOna,GAAG;MAC1CkT,KAAM/Q,IAAG,GAAGpC,IAAKoC,IAAG,CAAC+Q,KAAM/Q,IAAG,EAAEgY,OAAOhY,GAAG;;EAE9C;EAMAwR,cAAiB;IACf,OAAO;EACT;EAKAC,iBAAiBvK,KAAK,EAAE;IACtB,MAAMY,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM;MAAC9B;MAAQC;IAAAA,CAAO,GAAGF;IACzB,MAAM8B,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAC9B,MAAM8Q,SAASpO,OAAOgO,OAAO;IAC7B,MAAM1S,QAAQ6S,WAAWC,MACrB,UAAMA,OAAOla,KAAK,GAAG,OAAOka,MAAOnS,IAAG,GAAG,GACzC,QAAKmC,OAAO2J,gBAAgB,CAAC/H,MAAM,CAAC5B,OAAOE,IAAI,CAAC,CAAC;IAErD,OAAO;MACLwJ,KAAO,OAAK3J,OAAO4J,gBAAgB,CAAC/H,MAAM,CAAC7B,OAAOG,IAAI,CAAC;MACvDhD;IACF;EACF;EAEA6H,UAAa;IACX,IAAI,CAACL,mBAAmB,GAAG,IAAI;IAE/B,KAAK,CAACK,UAAU;IAEhB,MAAMjF,OAAO,IAAI,CAAC+B,WAAW;IAC7B/B,KAAKV,KAAK,GAAG,IAAI,CAACmG,UAAU,GAAGnG,KAAK;EACtC;EAEA1E,OAAO6E,IAAI,EAAE;IACX,MAAMO,OAAO,IAAI,CAAC+B,WAAW;IAC7B,IAAI,CAAC8K,cAAc,CAAC7M,IAAKD,KAAI,EAAE,GAAGC,IAAKD,KAAI,CAACpJ,MAAM,EAAE8I;EACtD;EAEAoN,eAAemF,IAAI,EAAEhc,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACvC,MAAMoH,QAAQpH,IAAS;IACvB,MAAM;MAACL,KAAK;MAAE2C,WAAa;QAAC7B;MAAAA;IAAO,CAAC,GAAG,IAAI;IAC3C,MAAMsQ,OAAOtQ,OAAO+R,YAAY;IAChC,MAAM1B,aAAarQ,OAAOmQ,YAAY;IACtC,MAAM1B,QAAQ,IAAI,CAACuD,SAAS;IAC5B,MAAM;MAACzG,aAAa;MAAED;IAAc,CAAC,GAAG,IAAI,CAACG,iBAAiB,CAAC3V,KAAOyJ;IAEtE,KAAK,IAAI7I,CAAIZ,UAAOY,CAAIZ,WAAQgS,OAAOpR,CAAK;MAC1C,MAAMkL,MAAS,OAAI,CAACgH,SAAS,CAAClS;MAC9B,MAAMub,UAAUtL,SAASmI,aAAclN,OAAM,CAAC5B,MAAOE,KAAI,CAAC,CAAI;QAACoQ;QAAM4B,IAAM5B;MAAI,IAAI,IAAI,CAAC6B,wBAAwB,CAACzb,CAAE;MACnH,MAAM0b,OAAU,OAAI,CAACC,wBAAwB,CAAC3b,CAAG+X;MACjD,MAAMrP,KAAQ,GAACwC,QAAOE,OAAO,IAAI,EAAC,EAAG9B,MAAOE,KAAI,CAAC;MAEjD,MAAM9D,UAAa;QACjBiU;QACAC,MAAM2B,QAAQ3B,IAAI;QAClBI,oBAAoB,CAACtR,SAAS2Q,UAAWnO,QAAOgO,OAAO,KAAM1Q,KAAUE,WAAM8C,IAAI,IAAIhD,KAAUE,WAAM+C,OAAO;QAC5GlE,GAAGoS,UAAa4B,WAAQC,IAAI,GAAGE,QAAQE,MAAM;QAC7CpU,GAAGmS,UAAa+B,WAAQE,MAAM,GAAGL,QAAQC,IAAI;QAC7CK,MAAQlC,eAAa+B,QAAQjV,IAAI,GAAGvH,KAAKwY,GAAG,CAAC6D,OAAQ9U,KAAI,CAAC;QAC1DqV,KAAOnC,eAAaza,KAAKwY,GAAG,CAAC6D,QAAQ9U,IAAI,IAAIiV,QAAQjV;MACvD;MAEA,IAAImO,cAAgB;QAClBlP,WAAWI,OAAO,GAAG+O,aAAiB,QAAI,CAACnB,yBAAyB,CAAC1T,CAAGob,MAAI,CAACpb,CAAE,EAAC+D,MAAM,GAAG,WAAW8E,IAAI;;MAE1G,MAAM/C,UAAUJ,WAAWI,OAAO,IAAIsV,IAAI,CAACpb,EAAE,CAAC8F,OAAO;MACrD+T,gBAAiBnU,aAAYI,SAAS4C,KAAOF;MAC7CgS,gBAAiB9U,aAAYI,OAASiS,QAAMI,KAAK;MACjD,IAAI,CAAChD,aAAa,CAACiG,IAAI,CAACpb,CAAE,GAAEA,GAAG0F,UAAYmD;IAC7C;EACF;EASAkT,UAAWC,KAAI,EAAE1P,SAAS,EAAE;IAC1B,MAAM;MAACjD;IAAM,CAAC,GAAG,IAAI,CAAC8B,WAAW;IACjC,MAAM9C,WAAWgB,MAAO0B,wBAAuB,CAAC,IAAI,CAAC0C,KAAK,EACvD3B,MAAM,CAAC1C,IAAQA,SAAK6B,UAAU,CAACnF,OAAO,CAAC6U,OAAO;IACjD,MAAM9Q,OAAUR,UAAOvD,OAAO,CAAC+D,OAAO;IACtC,MAAMY,SAAS,EAAE;IAEjB,MAAMwR,WAAY7S,IAAS;MACzB,MAAM8B,MAAS9B,QAAK6B,UAAU,CAACiH,SAAS,CAAC5F;MACzC,MAAM4P,MAAMhR,UAAUA,MAAM,CAAC9B,KAAKE,MAAM,CAACE,IAAI,CAAC;MAE9C,IAAI4O,cAAc8D,GAAQC,WAAMD,GAAM;QACpC,OAAO,IAAI;;IAEf;IAEA,KAAK,MAAM9S,QAAQf,QAAU;MAC3B,IAAIiE,cAAclO,SAAa6d,aAAS7S,IAAO;QAC7C;;MAQF,IAAIS,YAAY,KAAK,IAAIY,MAAO2R,QAAO,CAAChT,IAAKV,MAAK,CAAM,MAAC,KAC1DmB,OAAYzL,kBAAagL,IAAKV,MAAK,KAAKtK,SAAY;QACjDqM,MAAOzJ,KAAI,CAACoI,KAAKV,KAAK;;MAExB,IAAIU,KAAKZ,KAAK,KAAKwT,IAAM;QACvB;;IAEJ;IAKA,IAAI,CAACvR,MAAO1K,OAAM,EAAE;MAClB0K,OAAOzJ,IAAI,CAAC5C;;IAGd,OAAOqM;EACT;EAMA4R,eAAe7T,KAAK,EAAE;IACpB,OAAO,IAAI,CAACuT,UAAU,CAAC3d,WAAWoK,OAAOzI,MAAM;EACjD;EAUAuc,eAAexT,YAAY,EAAEyT,IAAI,EAAEjQ,SAAS,EAAE;IAC5C,MAAM7B,MAAS,OAAI,CAACsR,UAAU,CAACjT,YAAcwD;IAC7C,MAAM9D,QAAQ+T,IAACA,KAASne,SACpBqM,UAAO2R,OAAO,CAACG,IACf,KAAC,CAAC;IAEN,OAAQ/T,UAAU,CAAC,IACfiC,OAAO1K,MAAM,GAAG,IAChByI,KAAK;EACX;EAKA8S,SAAY;IACV,MAAMrU,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAMsD,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM9B,SAASD,KAAKC,MAAM;IAC1B,MAAMmP,SAAS,EAAE;IACjB,IAAIxY,CAAGuI;IAEP,KAAKvI,IAAI,CAAGuI,SAAOa,IAAKD,KAAI,CAACpJ,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAClDwY,OAAOxX,IAAI,CAACqI,MAAOsO,iBAAgB,CAAC,IAAI,CAACzF,SAAS,CAAClS,CAAE,EAACqJ,MAAOG,KAAI,CAAC,EAAExJ;IACtE;IAEA,MAAMkY,eAAejR,KAAKiR,YAAY;IACtC,MAAM/Y,MAAM+Y,gBAAgBZ,oBAAqBlO;IAEjD,OAAO;MACLjK;MACAqZ;MACApZ,OAAOiK,OAAOmT,WAAW;MACzBrV,KAAKkC,OAAOoT,SAAS;MACrBzE,UAAY,MAAI,CAACqE,cAAc;MAC/BtV,KAAOsC;MACPsR,SAAS1T,KAAK0T,OAAO;MAErBxC,OAAOD,eAAe,CAAIjR,QAAKoR,kBAAkB,GAAGpR,KAAKqR;IAC3D;EACF;EAMAmD,yBAAyBjT,KAAK,EAAE;IAC9B,MAAM;MAAC2C,aAAa;QAAC7B;QAAQ2D,QAAQ;QAAEzE,KAAOM;MAAAA,CAAa;MAAEhD,OAAS;QAAC8T,MAAM8C,SAAS;QAAEC;MAAAA;IAAa,CAAC,GAAG,IAAI;IAC7G,MAAMnD,aAAakD,SAAa;IAChC,MAAMxR,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAC9B,MAAM8Q,SAASpO,OAAOgO,OAAO;IAC7B,MAAM0D,WAAWvD,UAAWC;IAC5B,IAAI9S,KAAQ0E,SAAM,CAAC5B,OAAOE,IAAI,CAAC;IAC/B,IAAIpK,KAAQ;IACZ,IAAIW,SAASkN,WAAW,IAAI,CAACxE,UAAU,CAACa,QAAQ4B,MAAQ+B,cAAYzG,KAAK;IACzE,IAAIgV,IAAM/U;IAEV,IAAI1G,WAAWyG,KAAO;MACpBpH,QAAQW,MAASyG;MACjBzG,MAASyG;;IAGX,IAAIoW,QAAU;MACZpW,QAAQ8S,OAAON,QAAQ;MACvBjZ,SAASuZ,MAAOL,OAAM,GAAGK,OAAON,QAAQ;MAExC,IAAIxS,UAAU,CAAKyC,SAAKzC,WAAWyC,IAAKqQ,QAAOL,MAAM,CAAG;QACtD7Z,KAAQ;;MAEVA,KAASoH;;IAGX,MAAMsS,aAAa,CAACV,cAAcsE,cAAc,CAACE,WAAWF,YAAYtd,KAAK;IAC7E,IAAIwa,OAAOtQ,MAAOqO,iBAAgB,CAACmB;IAEnC,IAAI,IAAI,CAACxa,KAAK,CAACue,iBAAiB,CAACrU,KAAQ;MACvCgT,IAAOlS,UAAOqO,gBAAgB,CAACvY,KAAQW;KAClC;MAELyb,IAAO5B;;IAGTnT,OAAO+U,IAAO5B;IAEd,IAAI1a,IAAKwY,IAAG,CAACjR,QAAQkW,YAAc;MACjClW,IAAO8S,WAAQ9S,IAAM6C,UAAQkQ,UAAcmD;MAC3C,IAAInW,UAAUgT,UAAY;QACxBI,QAAQnT,IAAO;;MAEjB,MAAMqW,aAAaxT,MAAOyT,mBAAkB,CAAC;MAC7C,MAAMC,WAAW1T,MAAOyT,mBAAkB,CAAC;MAC3C,MAAM5d,GAAMD,QAAKC,GAAG,CAAC2d,UAAYE;MACjC,MAAM1b,GAAMpC,QAAKoC,GAAG,CAACwb,UAAYE;MACjCpD,OAAO1a,KAAKoC,GAAG,CAACpC,KAAKC,GAAG,CAACya,MAAMtY,GAAMnC;MACrCqc,OAAO5B,IAAOnT;MAEd,IAAIwG,YAAY,CAAC2P,QAAU;QAEzB1R,OAAOE,OAAO,CAAC9B,OAAOE,IAAI,CAAC,CAACmC,aAAa,CAAC7C,YAAa,IAAGQ,OAAO2T,gBAAgB,CAACzB,IAAQlS,WAAO2T,gBAAgB,CAACrD;;;IAItH,IAAIA,IAAStQ,YAAOqO,gBAAgB,CAAC6B,UAAa;MAChD,MAAM0D,WAAWjU,IAAKxC,SAAQ6C,MAAO6T,qBAAoB,CAAC3D,UAAc;MACxEI,IAAQsD;MACRzW,IAAQyW;;IAGV,OAAO;MACLzW;MACAmT;MACA4B;MACAI,QAAQJ,OAAO/U,IAAO;IACxB;EACF;EAKAkV,wBAAyBnT,MAAK,EAAEuP,KAAK,EAAE;IACrC,MAAMhR,QAAQgR,MAAMhR,KAAK;IACzB,MAAMjB,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMmW,WAAWnW,QAAQmW,QAAQ;IACjC,MAAMmB,eAAkBnO,kBAAenJ,OAAQsX,gBAAe,EAAEC;IAChE,IAAIzB,MAAQnV;IACZ,IAAIsR,MAAM4C,OAAO,EAAE;MACjB,MAAM3C,aAAaiE,WAAW,IAAI,CAACI,cAAc,CAAC7T,SAASuP,MAAMC,UAAU;MAC3E,MAAM3F,KAAQvM,WAAQoS,YAAY,KAAK,SACnCO,yBAA0BjQ,QAAOuP,KAAOjS,WAASkS,UACjDF,6BAAyBtP,KAAOuP,SAAOjS,SAASkS,UAAW;MAE/D,MAAMsF,aAAa,IAAI,CAAChB,cAAc,CAAC,IAAI,CAAC9T,KAAK,EAAE,IAAI,CAAC2C,WAAW,CAACzC,KAAK,EAAEuT,WAAWzT,QAAQpK,SAAS;MACvGwd,MAASvJ,SAAMjT,KAAK,GAAIiT,MAAMkG,KAAK,GAAG+E,aAAejL,KAAMkG,MAAK,GAAG;MACnE9R,IAAOvH,QAAKC,GAAG,CAACie,iBAAiB/K,MAAMkG,KAAK,GAAGlG,MAAM8F,KAAK;KACrD;MAELyD,SAAS7U,KAAM4Q,iBAAgB,CAAC,IAAI,CAACzF,SAAS,CAAC1J,MAAM,CAACzB,MAAMyC,IAAI,CAAC,EAAEhB;MACnE/B,IAAOvH,QAAKC,GAAG,CAACie,iBAAiBrF,MAAM5Y,GAAG,GAAG4Y,MAAMI,KAAK;;IAG1D,OAAO;MACLyB,MAAMgC,SAASnV,IAAO;MACtB+U,MAAMI,SAASnV,IAAO;MACtBmV;MACAnV;IACF;EACF;EAEAxG,IAAO;IACL,MAAMmJ,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM7B,SAASF,KAAKE,MAAM;IAC1B,MAAMiU,QAAQnU,KAAKD,IAAI;IACvB,MAAMZ,OAAOgV,MAAMxd,MAAM;IACzB,IAAIC,CAAI;IAER,OAAOA,IAAIuI,IAAM,IAAEvI,CAAG;MACpB,IAAI,IAAI,CAACkS,SAAS,CAAClS,CAAE,EAACsJ,OAAOE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC+T,KAAK,CAACvd,CAAE,EAACgN,MAAM,EAAE;QAC/DuQ,KAAK,CAACvd,CAAE,EAACC,IAAI,CAAC,IAAI,CAACoN,IAAI;;IAE3B;EACF;AAEF;AC5oBe,MAAMmQ,gBAAyBtQ;EAE5C,OAAOjD,KAAK,QAAS;EAKrB,OAAO9E,QAAW;IAChBgI,oBAAoB,KAAK;IACzBC,eAAiB;IAEjBpH,UAAY;MACV4U,OAAS;QACPnc,IAAM;QACNiH,UAAY,GAAC,KAAK,KAAK,eAAe;MACxC;IACF;GACA;EAKF,OAAOmV,SAAY;IACjBhP,MAAQ;MACNtE,CAAG;QACD9I,IAAM;MACR;MACA+I,CAAG;QACD/I,IAAM;MACR;IACF;GACA;EAEF4P,UAAa;IACX,IAAI,CAACL,mBAAmB,GAAG,IAAI;IAC/B,KAAK,CAACK,UAAU;EAClB;EAMAqD,mBAAmBtI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IAC3C,MAAMlG,SAAS,KAAK,CAACwG,kBAAkB,CAACtI,MAAMD,MAAM/J,KAAOgS;IAC3D,KAAK,IAAIpR,CAAI,MAAGA,IAAIkL,MAAOnL,OAAM,EAAEC,CAAK;MACtCkL,MAAM,CAAClL,CAAE,EAACkZ,OAAO,GAAG,IAAI,CAACxF,yBAAyB,CAAC1T,CAAIZ,UAAOqe,MAAM;IACtE;IACA,OAAOvS;EACT;EAMAsG,eAAepI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACvC,MAAMlG,SAAS,KAAK,CAACsG,cAAc,CAACpI,MAAMD,MAAM/J,KAAOgS;IACvD,KAAK,IAAIpR,CAAI,MAAGA,IAAIkL,MAAOnL,OAAM,EAAEC,CAAK;MACtC,MAAME,IAAOiJ,OAAI,CAAC/J,QAAQY,CAAE;MAC5BkL,MAAM,CAAClL,CAAE,EAACkZ,OAAO,GAAGjK,eAAe/O,IAAI,CAAC,CAAE,GAAE,IAAI,CAACwT,yBAAyB,CAAC1T,IAAIZ,OAAOqe,MAAM;IAC9F;IACA,OAAOvS;EACT;EAMAuG,gBAAgBrI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACxC,MAAMlG,SAAS,KAAK,CAACuG,eAAe,CAACrI,MAAMD,MAAM/J,KAAOgS;IACxD,KAAK,IAAIpR,CAAI,MAAGA,IAAIkL,MAAOnL,OAAM,EAAEC,CAAK;MACtC,MAAME,IAAOiJ,OAAI,CAAC/J,QAAQY,CAAE;MAC5BkL,MAAM,CAAClL,EAAE,CAACkZ,OAAO,GAAGjK,cAAe/O,SAAQA,KAAK6H,CAAC,IAAI,CAAC7H,IAAK6H,EAAC,EAAE,IAAI,CAAC2L,yBAAyB,CAAC1T,IAAIZ,OAAOqe,MAAM;IAChH;IACA,OAAOvS;EACT;EAKA4H,cAAiB;IACf,MAAM3J,IAAO,OAAI,CAACgC,WAAW,CAAChC,IAAI;IAElC,IAAI7H,GAAM;IACV,KAAK,IAAItB,IAAImJ,IAAKpJ,OAAM,GAAG,CAAGC,OAAK,CAAG,IAAEA,CAAG;MACzCsB,MAAMpC,IAAKoC,IAAG,CAACA,KAAK6H,IAAI,CAACnJ,EAAE,CAACyG,IAAI,CAAC,IAAI,CAACiN,yBAAyB,CAAC1T,CAAM;IACxE;IACA,OAAOsB,MAAM,CAAKA;EACpB;EAKAyR,iBAAiBvK,KAAK,EAAE;IACtB,MAAMY,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMyG,SAAS,IAAI,CAACtT,KAAK,CAAC6K,IAAI,CAACyI,MAAM,IAAI,EAAE;IAC3C,MAAM;MAACvK;MAAQC;IAAAA,CAAO,GAAG8B;IACzB,MAAM8B,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAC9B,MAAMjB,CAAIF,UAAO4L,gBAAgB,CAAC/H,OAAO3D,CAAC;IAC1C,MAAMC,CAAIF,UAAO2L,gBAAgB,CAAC/H,OAAO1D,CAAC;IAC1C,MAAMO,IAAImD,OAAOgO,OAAO;IAExB,OAAO;MACLlG,KAAOpB,QAAM,CAACpJ,MAAM,IAAI;MACxBhC,KAAO,QAAMe,CAAI,UAAOC,CAAKO,QAAI,IAAOA,OAAI,EAAC,CAAK;IACpD;EACF;EAEA/D,OAAO6E,IAAI,EAAE;IACX,MAAM6U,MAAS,OAAI,CAACvS,WAAW,CAAChC,IAAI;IAGpC,IAAI,CAAC8M,cAAc,CAACyH,QAAQ,CAAGA,SAAO3d,MAAM,EAAE8I;EAChD;EAEAoN,eAAeyH,MAAM,EAAEte,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACzC,MAAMoH,QAAQpH,IAAS;IACvB,MAAM;MAACQ;MAAQC;IAAAA,CAAO,GAAG,IAAI,CAAC6B,WAAW;IACzC,MAAM;MAAC0J,aAAa;MAAED;IAAc,CAAC,GAAG,IAAI,CAACG,iBAAiB,CAAC3V,KAAOyJ;IACtE,MAAMwC,QAAQhC,OAAOG,IAAI;IACzB,MAAM8B,QAAQhC,OAAOE,IAAI;IAEzB,KAAK,IAAIxJ,CAAIZ,UAAOY,CAAIZ,WAAQgS,OAAOpR,CAAK;MAC1C,MAAM2d,QAAQD,MAAM,CAAC1d,CAAE;MACvB,MAAMkL,SAAS,CAAC+E,SAAS,IAAI,CAACiC,SAAS,CAAClS;MACxC,MAAM0F,aAAa,EAAC;MACpB,MAAMkY,SAASlY,UAAU,CAAC2F,KAAM,IAAG4E,QAAQ5G,MAAO0T,mBAAkB,CAAC,OAAO1T,OAAOsO,gBAAgB,CAACzM,MAAM,CAACG,MAAM,CAAC;MAClH,MAAMwS,MAASnY,aAAU,CAAC4F,MAAM,GAAG2E,KAAQ3G,UAAO+R,YAAY,KAAK/R,OAAOqO,gBAAgB,CAACzM,MAAM,CAACI,MAAM,CAAC;MAEzG5F,WAAWoY,IAAI,GAAG3B,KAAMyB,YAAWzB,KAAM0B;MAEzC,IAAIjJ,cAAgB;QAClBlP,WAAWI,OAAO,GAAG+O,aAAiB,QAAI,CAACnB,yBAAyB,CAAC1T,GAAG2d,KAAM5Z,OAAM,GAAG,WAAW8E,IAAI;QAEtG,IAAIoH,KAAO;UACTvK,UAAWI,QAAO,CAAC2X,MAAM,GAAG;;;MAIhC,IAAI,CAACtI,aAAa,CAACwI,OAAO3d,GAAG0F,UAAYmD;IAC3C;EACF;EAOA6K,yBAA0BlL,MAAK,EAAEK,IAAI,EAAE;IACrC,MAAMqC,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAC9B,IAAI5C,MAAS,QAAK,CAAC8N,yBAAyB,CAAClL,KAAOK;IAGpD,IAAIjD,OAAOM,OAAO,EAAE;MAClBN,SAASX,MAAOyB,OAAM,CAAC,IAAId,MAAQ;QAACM,SAAS;MAAK;;IAIpD,MAAMuX,SAAS7X,OAAO6X,MAAM;IAC5B,IAAI5U,SAAS,QAAU;MACrBjD,OAAO6X,MAAM,GAAG;;IAElB7X,OAAO6X,MAAM,IAAIxO,eAAe/D,MAAUA,WAAOgO,OAAO,EAAEuE;IAE1D,OAAO7X;EACT;AACF;AC/JA,SAASmY,iBAAkBC,SAAQ,EAAEC,aAAa,EAAEC,MAAM,EAAE;EAC1D,IAAIC,MAAS;EACb,IAAIC,MAAS;EACb,IAAIC,OAAU;EACd,IAAIC,OAAU;EAEd,IAAIL,gBAAgBM,GAAK;IACvB,MAAMC,UAAaR;IACnB,MAAMS,WAAWD,UAAaP;IAC9B,MAAMS,SAASxf,IAAKyf,IAAG,CAACH;IACxB,MAAMI,SAAS1f,IAAK2f,IAAG,CAACL;IACxB,MAAMM,OAAO5f,IAAKyf,IAAG,CAACF;IACtB,MAAMM,OAAO7f,IAAK2f,IAAG,CAACJ;IACtB,MAAMO,UAAU,CAACC,KAAO5H,KAAGrP,MAAMkX,aAAcD,QAAOT,YAAYC,QAAU,MAAI,IAAI,CAAIvf,QAAKoC,GAAG,CAAC+V,GAAGA,IAAI6G,MAAQlW,KAAGA,IAAIkW,MAAO;IAC9H,MAAMiB,UAAU,CAACF,KAAO5H,KAAGrP,MAAMkX,aAAcD,QAAOT,YAAYC,QAAU,MAAI,IAAI,CAAC,IAAIvf,KAAKC,GAAG,CAACkY,GAAGA,CAAI6G,WAAQlW,CAAGA,MAAIkW,MAAO;IAC/H,MAAMkB,OAAOJ,OAAQ,IAAGN,MAAQI;IAChC,MAAMO,OAAOL,OAAQM,UAASV,MAAQG;IACtC,MAAMQ,OAAOJ,OAAQK,KAAId,MAAQI;IACjC,MAAMW,IAAON,WAAQK,EAAKF,YAASV,MAAQG;IAC3CZ,SAAS,CAACiB,IAAOG,OAAG,IAAK;IACzBnB,SAAS,CAACiB,IAAOI,OAAG,IAAK;IACzBpB,UAAU,EAAEe,IAAOG,OAAG,CAAK;IAC3BjB,UAAU,EAAEe,IAAOI,OAAG,CAAK;;EAE7B,OAAO;IAACtB;IAAQC;IAAQC;IAASC;EAAO;AAC1C;AAEe,MAAMoB,kBAA2BxS;EAE9C,OAAOjD,KAAK,UAAW;EAKvB,OAAO9E,QAAW;IAChBgI,oBAAoB,KAAK;IACzBC,eAAiB;IACjBhI,SAAW;MAETua,eAAe,IAAI;MAEnBC,cAAc;IAChB;IACA5Z,UAAY;MACV4U,OAAS;QACPnc,IAAM;QACNiH,UAAY,GAAC,iBAAiB,YAAY,eAAe,eAAe,cAAc,KAAK,KAAK,UAAU,eAAe;MAC3H;IACF;IAEAwY,MAAQ;IAGRF,QAAU;IAGVC,aAAe;IAGfR,MAAQ;IAGRoC,OAAS;IAETvQ,SAAW;GACX;EAEF,OAAOwQ,WAAc;IACnBC,WAAa,EAACxD,QAASA,IAAS;IAChCyD,YAAazD,QAASA,IAAS,kBAAa,CAACA,KAAK0D,UAAU,CAAC,YAAiB,MAAC1D,IAAK0D,WAAU,CAAC;GAC/F;EAKF,OAAOpF,SAAY;IACjBqF,WAAa;IAGbC,OAAS;MACPC,MAAQ;QACNxO,MAAQ;UACNyO,eAAe/hB,KAAK,EAAE;YACpB,MAAM6K,OAAO7K,MAAM6K,IAAI;YACvB,IAAIA,KAAKyI,MAAM,CAAC7R,MAAM,IAAIoJ,IAAK0G,SAAQ,CAAC9P,MAAM,EAAE;cAC9C,MAAM;gBAAC6R,QAAQ;kBAAC0O;kBAAYpe;gBAAAA;cAAM,CAAC,GAAG5D,KAAM8hB,OAAM,CAACta,OAAO;cAE1D,OAAOqD,KAAKyI,MAAM,CAAC2O,GAAG,CAAC,CAACvN,OAAOhT,CAAM;gBACnC,MAAMoJ,OAAO9K,KAAMwR,eAAc,CAAC;gBAClC,MAAM0Q,KAAQpX,QAAK6B,UAAU,CAACuI,QAAQ,CAACxT;gBAEvC,OAAO;kBACLygB,IAAMzN;kBACN0N,WAAWF,MAAMG,eAAe;kBAChCC,aAAaJ,MAAMK,WAAW;kBAC9BC,SAAW5e;kBACX6e,WAAWP,MAAMQ,WAAW;kBAC5BV,UAAYA;kBACZtT,MAAQ,GAAC1O,KAAMue,kBAAiB,CAAC7c;kBAGjCwI,KAAOxI;gBACT;cACF;;YAEF,OAAO,EAAE;UACX;QACF;QAEAihB,QAAQC,CAAC,EAAEC,UAAU,EAAEf,MAAM,EAAE;UAC7BA,OAAO9hB,KAAK,CAAC8iB,oBAAoB,CAACD,WAAW3Y,KAAK;UAClD4X,MAAO9hB,MAAK,CAAC0F,MAAM;QACrB;MACF;IACF;GACA;EAEFlG,WAAYQ,MAAK,EAAEwK,YAAY,EAAE;IAC/B,KAAK,CAACxK,KAAOwK;IAEb,IAAI,CAACkF,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACqT,WAAW,GAAGjjB;IACnB,IAAI,CAACkjB,WAAW,GAAGljB;IACnB,IAAI,CAACigB,OAAO,GAAGjgB;IACf,IAAI,CAACkgB,OAAO,GAAGlgB;EACjB;EAEAkQ,aAAa;EAKb6C,KAAM/R,MAAK,EAAEgS,KAAK,EAAE;IAClB,MAAMjI,IAAO,OAAI,CAAC0F,UAAU,GAAG1F,IAAI;IACnC,MAAMC,OAAO,IAAI,CAAC+B,WAAW;IAE7B,IAAI,IAAI,CAACuC,QAAQ,KAAK,KAAK,EAAE;MAC3BtE,KAAKqD,OAAO,GAAGtD;KACV;MACL,IAAIoY,SAAUvhB,KAAM,CAACmJ,IAAI,CAACnJ,CAAE;MAE5B,IAAI+E,QAASoE,KAAI,CAAC/J,MAAM,CAAG;QACzB,MAAM;UAACmG,GAAM;QAAA,CAAQ,GAAG,IAAI,CAACmI,QAAQ;QACrC6T,SAAUvhB,CAAM,KAACiS,iBAAiB9I,IAAI,CAACnJ,EAAE,EAAEuF;;MAG7C,IAAIvF,CAAGuI;MACP,KAAKvI,IAAIZ,OAAOmJ,IAAOnJ,WAAQgS,KAAK,EAAEpR,IAAIuI,IAAM,IAAEvI,CAAG;QACnDoJ,KAAKqD,OAAO,CAACzM,CAAE,IAAGuhB,MAAOvhB;MAC3B;;EAEJ;EAKAwhB,YAAe;IACb,OAAOC,UAAU,IAAI,CAAC3b,OAAO,CAACkY,QAAQ,GAAG;EAC3C;EAKA0D,iBAAoB;IAClB,OAAOD,SAAU,KAAI,CAAC3b,OAAO,CAACmY,aAAa;EAC7C;EAMA0D,mBAAsB;IACpB,IAAIxiB,GAAMof;IACV,IAAIjd,MAAM,CAACid;IAEX,KAAK,IAAIve,IAAI,CAAGA,MAAI,IAAI,CAAC1B,KAAK,CAAC6K,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,EAAE,EAAEC,CAAG;MACxD,IAAI,IAAI,CAAC1B,KAAK,CAACsjB,gBAAgB,CAAC5hB,MAAM,IAAI,CAAC1B,KAAK,CAACwR,cAAc,CAAC9P,CAAGvB,MAAI,KAAK,IAAI,CAACgP,KAAK,EAAE;QACtF,MAAMxC,aAAa,IAAI,CAAC3M,KAAK,CAACwR,cAAc,CAAC9P,GAAGiL,UAAU;QAC1D,MAAM+S,WAAW/S,WAAWuW,YAAY;QACxC,MAAMvD,gBAAgBhT,WAAWyW,iBAAiB;QAElDviB,GAAMD,QAAKC,GAAG,CAACA,GAAK6e;QACpB1c,MAAMpC,IAAKoC,IAAG,CAACA,KAAK0c,QAAWC;;IAEnC;IAEA,OAAO;MACLD,QAAU7e;MACV8e,eAAe3c,GAAMnC;IACvB;EACF;EAKA6E,OAAO6E,IAAI,EAAE;IACX,MAAMvK,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAM;MAACgV;IAAS,CAAC,GAAGhV;IACpB,MAAM8K,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM0W,OAAOzY,KAAKD,IAAI;IACtB,MAAM0W,OAAU,OAAI,CAACiC,iBAAiB,KAAK,IAAI,CAACC,YAAY,CAACF,IAAQ,QAAI,CAAC/b,OAAO,CAAC+Z,OAAO;IACzF,MAAMmC,UAAU9iB,IAAKoC,IAAG,CAAEpC,KAAKC,IAAG,CAACmU,UAAUwI,KAAK,EAAExI,UAAUuI,MAAM,CAAIgE,UAAM,IAAK,CAAG;IACtF,MAAM3B,SAAShf,IAAKC,IAAG,CAAC8iB,aAAa,IAAI,CAACnc,OAAO,CAACoY,MAAM,EAAE8D,OAAU;IACpE,MAAME,cAAc,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC3Z,KAAK;IAKlD,MAAM;MAACyV;MAAeD;IAAAA,CAAS,GAAG,IAAI,CAAC2D,mBAAmB;IAC1D,MAAM;MAACxD;MAAQC;MAAQC;MAASC;IAAAA,CAAQ,GAAGP,iBAAkBC,WAAUC,aAAeC;IACtF,MAAMkE,WAAW,CAAC9O,UAAUwI,KAAK,GAAG+D,OAAM,IAAK1B;IAC/C,MAAMkE,YAAY,CAAC/O,UAAUuI,MAAM,GAAGgE,OAAM,IAAKzB;IACjD,MAAMkE,YAAYpjB,KAAKoC,GAAG,CAACpC,KAAKC,GAAG,CAACijB,QAAUC,eAAa,CAAG;IAC9D,MAAMf,cAAciB,WAAY,KAAI,CAACzc,OAAO,CAAC2X,MAAM,EAAE6E;IACrD,MAAMjB,WAAcniB,QAAKoC,GAAG,CAACggB,cAAcpD,MAAQ;IACnD,MAAMsE,eAAe,CAAClB,cAAcD,WAAU,IAAK,IAAI,CAACoB,6BAA6B;IACrF,IAAI,CAACpE,OAAO,GAAGA,OAAUiD;IACzB,IAAI,CAAChD,OAAO,GAAGA,OAAUgD;IAEzBlY,KAAKsZ,KAAK,GAAG,IAAI,CAACC,cAAc;IAEhC,IAAI,CAACrB,WAAW,GAAGA,WAAckB,kBAAe,IAAI,CAACI,oBAAoB,CAAC,IAAI,CAACpa,KAAK;IACpF,IAAI,CAAC6Y,WAAW,GAAGniB,IAAKoC,IAAG,CAAC,IAAI,CAACggB,WAAW,GAAGkB,eAAeN,WAAa;IAE3E,IAAI,CAACjM,cAAc,CAAC4L,MAAM,CAAGA,OAAK9hB,MAAM,EAAE8I;EAC5C;EAKAga,cAAe7iB,EAAC,EAAEiQ,KAAK,EAAE;IACvB,MAAMhJ,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAMsD,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM8S,gBAAgB,IAAI,CAACyD,iBAAiB;IAC5C,IAAIzR,KAACA,IAAShJ,IAAK7B,UAAS,CAACua,aAAa,IAAK,CAAC,IAAI,CAACrhB,KAAK,CAACue,iBAAiB,CAAC7c,CAAMoJ,UAAKqD,OAAO,CAACzM,CAAE,MAAK,IAAI,IAAIoJ,IAAKD,KAAI,CAACnJ,EAAE,CAACgN,MAAM,EAAE;MAClI,OAAO;;IAET,OAAO,IAAI,CAAC8V,sBAAsB,CAAC1Z,KAAKqD,OAAO,CAACzM,CAAE,IAAGie,aAAgBM;EACvE;EAEAtI,eAAe4L,IAAI,EAAEziB,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACvC,MAAMoH,QAAQpH,IAAS;IACvB,MAAMvK,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMgV,YAAYhV,MAAMgV,SAAS;IACjC,MAAMrM,OAAO3I,MAAMwH,OAAO;IAC1B,MAAMid,gBAAgB9b,KAAK7B,SAAS;IACpC,MAAM4d,UAAU,CAAC1P,UAAU1L,IAAI,GAAG0L,UAAU5L,KAAI,IAAK;IACrD,MAAMub,UAAU,CAAC3P,UAAU7L,GAAG,GAAG6L,UAAU3L,MAAK,IAAK;IACrD,MAAMiY,eAAe3P,KAAS8S,kBAAcnD,YAAY;IACxD,MAAMyB,WAAczB,kBAAe,CAAI,OAAI,CAACyB,WAAW;IACvD,MAAMC,WAAc1B,kBAAe,CAAI,OAAI,CAAC0B,WAAW;IACvD,MAAM;MAACzM,aAAa;MAAED;IAAc,CAAC,GAAG,IAAI,CAACG,iBAAiB,CAAC3V,KAAOyJ;IACtE,IAAI2V,aAAa,IAAI,CAACgD,YAAY;IAClC,IAAIxhB;IAEJ,KAAKA,CAAI,MAAGA,CAAIZ,UAAO,EAAEY,CAAG;MAC1Bwe,cAAc,IAAI,CAACqE,cAAc,CAAC7iB,CAAGiQ;IACvC;IAEA,KAAKjQ,IAAIZ,KAAOY,MAAIZ,KAAQgS,UAAO,EAAEpR,CAAG;MACtC,MAAMie,aAAgB,OAAI,CAAC4E,cAAc,CAAC7iB,CAAGiQ;MAC7C,MAAMiT,MAAMrB,IAAI,CAAC7hB,CAAE;MACnB,MAAM0F,UAAa;QACjB6B,CAAGyb,YAAU,IAAI,CAAC3E,OAAO;QACzB7W,CAAGyb,YAAU,IAAI,CAAC3E,OAAO;QACzBE;QACAC,UAAUD,UAAaP;QACvBA;QACAqD;QACAD;MACF;MACA,IAAIzM,cAAgB;QAClBlP,WAAWI,OAAO,GAAG+O,aAAiB,QAAI,CAACnB,yBAAyB,CAAC1T,GAAGkjB,GAAInf,OAAM,GAAG,WAAW8E,IAAI;;MAEtG2V,UAAcP;MAEd,IAAI,CAAC9I,aAAa,CAAC+N,KAAKljB,GAAG0F,UAAYmD;IACzC;EACF;EAEA8Z,cAAiB;IACf,MAAMvZ,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMgY,WAAW/Z,KAAKD,IAAI;IAC1B,IAAIuZ,KAAQ;IACZ,IAAI1iB;IAEJ,KAAKA,IAAI,CAAGA,MAAImjB,QAASpjB,OAAM,EAAEC,CAAK;MACpC,MAAMwG,KAAQ4C,QAAKqD,OAAO,CAACzM,CAAE;MAC7B,IAAIwG,UAAU,IAAI,IAAI,CAAC2V,KAAM3V,WAAU,IAAI,CAAClI,KAAK,CAACue,iBAAiB,CAAC7c,MAAM,CAACmjB,QAAQ,CAACnjB,CAAE,EAACgN,MAAM,EAAE;QAC7F0V,KAASxjB,SAAKwY,GAAG,CAAClR;;IAEtB;IAEA,OAAOkc;EACT;EAEAI,uBAAuBtc,KAAK,EAAE;IAC5B,MAAMkc,KAAQ,OAAI,CAACvX,WAAW,CAACuX,KAAK;IACpC,IAAIA,KAAQ,QAAK,CAACvG,MAAM3V,KAAQ;MAC9B,OAAO+X,OAAOrf,KAAKwY,GAAG,CAAClR,SAASkc,KAAI;;IAEtC,OAAO;EACT;EAEA3P,iBAAiBvK,KAAK,EAAE;IACtB,MAAMY,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM7M,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMsT,SAAStT,KAAM6K,KAAI,CAACyI,MAAM,IAAI,EAAE;IACtC,MAAMpL,QAAQ4c,YAAaha,MAAKqD,OAAO,CAACjE,MAAM,EAAElK,MAAMwH,OAAO,CAACud,MAAM;IAEpE,OAAO;MACLrQ,KAAOpB,QAAM,CAACpJ,MAAM,IAAI;MACxBhC;IACF;EACF;EAEAsb,kBAAkBD,IAAI,EAAE;IACtB,IAAIvgB,GAAM;IACV,MAAMhD,QAAQ,IAAI,CAACA,KAAK;IACxB,IAAI0B,GAAGuI,IAAMa,QAAM6B,UAAYnF;IAE/B,IAAI,CAAC+b,IAAM;MAET,KAAK7hB,CAAI,MAAGuI,IAAOjK,SAAM6K,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,EAAEC,CAAIuI,SAAM,EAAEvI,CAAG;QAC5D,IAAI1B,MAAMsjB,gBAAgB,CAAC5hB,CAAI;UAC7BoJ,IAAO9K,SAAMwR,cAAc,CAAC9P;UAC5B6hB,OAAOzY,KAAKD,IAAI;UAChB8B,aAAa7B,KAAK6B,UAAU;UAC5B;;MAEJ;;IAGF,IAAI,CAAC4W,IAAM;MACT,OAAO;;IAGT,KAAK7hB,IAAI,GAAGuI,IAAOsZ,QAAK9hB,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC7C8F,OAAUmF,cAAWyI,yBAAyB,CAAC1T;MAC/C,IAAI8F,QAAQwd,WAAW,KAAK,OAAS;QACnChiB,GAAMpC,QAAKoC,GAAG,CAACA,GAAKwE,UAAQkb,WAAW,IAAI,GAAGlb,OAAQyd,iBAAgB,IAAI;;IAE9E;IACA,OAAOjiB;EACT;EAEAygB,aAAaF,IAAI,EAAE;IACjB,IAAIvgB,GAAM;IAEV,KAAK,IAAItB,CAAI,MAAGuI,IAAOsZ,QAAK9hB,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MACjD,MAAM8F,OAAU,OAAI,CAAC4N,yBAAyB,CAAC1T;MAC/CsB,GAAMpC,QAAKoC,GAAG,CAACA,GAAKwE,UAAQiV,MAAM,IAAI,GAAGjV,OAAQ0d,YAAW,IAAI;IAClE;IACA,OAAOliB;EACT;EAMAshB,qBAAqB9Z,YAAY,EAAE;IACjC,IAAI2a,gBAAmB;IAEvB,KAAK,IAAIzjB,CAAI,MAAGA,CAAI8I,iBAAc,EAAE9I,CAAG;MACrC,IAAI,IAAI,CAAC1B,KAAK,CAACsjB,gBAAgB,CAAC5hB,CAAI;QAClCyjB,gBAAoB,QAAI,CAACtB,cAAc,CAACniB;;IAE5C;IAEA,OAAOyjB;EACT;EAKAtB,eAAerZ,YAAY,EAAE;IAC3B,OAAO5J,KAAKoC,GAAG,CAAC2N,cAAe,KAAI,CAAC3Q,KAAK,CAAC6K,IAAI,CAAC0G,QAAQ,CAAC/G,aAAa,CAAC4a,MAAM,EAAE,CAAI;EACpF;EAMAjB,6BAAgC;IAC9B,OAAO,IAAI,CAACG,oBAAoB,CAAC,IAAI,CAACtkB,KAAK,CAAC6K,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,CAAK;EACvE;AACF;ACtYe,MAAM4jB,cAAuBzW;EAE1C,OAAOjD,KAAK,MAAO;EAKnB,OAAO9E,QAAW;IAChBgI,kBAAoB;IACpBC,eAAiB;IAEjBwW,UAAU,IAAI;IACdC,UAAU;GACV;EAKF,OAAOhJ,SAAY;IACjBhP,MAAQ;MACNiP,OAAS;QACPrc,IAAM;MACR;MACAwc,OAAS;QACPxc,IAAM;MACR;IACF;GACA;EAEF4P,UAAa;IACX,IAAI,CAACL,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,KAAK,CAACI,UAAU;EAClB;EAEArK,OAAO6E,IAAI,EAAE;IACX,MAAMO,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM;MAACgB,OAAS2X;MAAM3a,MAAMuU,MAAS,KAAE;MAAEqG;IAAQ,CAAC,GAAG3a;IAErD,MAAM4a,kBAAqB,OAAI,CAAC1lB,KAAK,CAACwW,mBAAmB;IACzD,IAAI;MAAC1V;MAAOgS;IAAAA,CAAM,GAAG6S,iCAAiC7a,MAAMsU,MAAQsG;IAEpE,IAAI,CAAClW,UAAU,GAAG1O;IAClB,IAAI,CAAC2O,UAAU,GAAGqD;IAElB,IAAI8S,oBAAoB9a,IAAO;MAC7BhK,KAAQ;MACRgS,QAAQsM,OAAO3d,MAAM;;IAIvB+jB,KAAKlf,MAAM,GAAG,IAAI,CAACtG,KAAK;IACxBwlB,KAAKK,aAAa,GAAG,IAAI,CAAC3b,KAAK;IAC/Bsb,KAAKM,UAAU,GAAG,CAAC,CAACL,SAASK,UAAU;IACvCN,KAAKpG,MAAM,GAAGA;IAEd,MAAM5X,OAAU,OAAI,CAAC2N,4BAA4B,CAAC5K;IAClD,IAAI,CAAC,IAAI,CAAC/C,OAAO,CAAC8d,QAAQ,EAAE;MAC1B9d,QAAQkb,WAAW,GAAG;;IAExBlb,QAAQue,OAAO,GAAG,IAAI,CAACve,OAAO,CAACue,OAAO;IACtC,IAAI,CAAClP,aAAa,CAAC2O,MAAM1lB,SAAW;MAClCkmB,UAAU,CAACN;MACXle;KACC+C;IAGH,IAAI,CAACoN,cAAc,CAACyH,QAAQte,OAAOgS,KAAOvI;EAC5C;EAEAoN,eAAeyH,MAAM,EAAEte,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACzC,MAAMoH,QAAQpH,IAAS;IACvB,MAAM;MAACQ;MAAQC;MAAQ2D;MAAU8W;IAAAA,CAAS,GAAG,IAAI,CAAC5Y,WAAW;IAC7D,MAAM;MAAC0J,aAAa;MAAED;IAAc,CAAC,GAAG,IAAI,CAACG,iBAAiB,CAAC3V,KAAOyJ;IACtE,MAAMwC,QAAQhC,OAAOG,IAAI;IACzB,MAAM8B,QAAQhC,OAAOE,IAAI;IACzB,MAAM;MAACqa;MAAUQ;IAAAA,CAAQ,GAAG,IAAI,CAACve,OAAO;IACxC,MAAMye,YAAeC,YAASX,QAAYA,eAAWxZ,OAAOE,iBAAiB;IAC7E,MAAMka,eAAe,IAAI,CAACnmB,KAAK,CAACwW,mBAAmB,IAAI7E,SAASpH,IAAS;IACzE,MAAM1B,MAAM/H,KAAQgS;IACpB,MAAMsT,cAAchH,OAAO3d,MAAM;IACjC,IAAI4kB,aAAavlB,KAAQ,QAAK,IAAI,CAAC8S,SAAS,CAAC9S,KAAQ;IAErD,KAAK,IAAIY,CAAI,MAAGA,CAAI0kB,gBAAa,EAAE1kB,CAAG;MACpC,MAAM2d,QAAQD,MAAM,CAAC1d,CAAE;MACvB,MAAM0F,UAAa+e,kBAAe9G,KAAQ,KAAE;MAE5C,IAAI3d,IAAIZ,KAASY,SAAKmH,GAAK;QACzBzB,UAAWoY,KAAI,GAAG,IAAI;QACtB;;MAGF,MAAM5S,MAAS,OAAI,CAACgH,SAAS,CAAClS;MAC9B,MAAM4kB,QAAWxM,iBAAclN,MAAM,CAACI,KAAM;MAC5C,MAAMsS,SAASlY,UAAU,CAAC2F,KAAM,IAAGhC,MAAOsO,iBAAgB,CAACzM,MAAM,CAACG,MAAM,EAAErL;MAC1E,MAAM6d,SAASnY,UAAU,CAAC4F,KAAM,IAAG2E,SAAS2U,QAAWtb,UAAO+R,YAAY,KAAK/R,MAAOqO,iBAAgB,CAAC1K,QAAW,OAAI,CAACxE,UAAU,CAACa,QAAQ4B,MAAQ+B,cAAY/B,MAAM,CAACI,KAAM,GAAEtL,CAAE;MAE/K0F,WAAWoY,IAAI,GAAG3B,KAAMyB,YAAWzB,MAAM0B,MAAW+G;MACpDlf,WAAWlE,IAAI,GAAGxB,CAAI,QAAKd,IAAMwY,IAAG,CAACxM,MAAM,CAACG,KAAM,IAAGsZ,UAAU,CAACtZ,MAAM,CAAKkZ;MAC3E,IAAIF,OAAS;QACX3e,WAAWwF,MAAM,GAAGA;QACpBxF,WAAW6G,GAAG,GAAGwX,QAAS5a,KAAI,CAACnJ,CAAE;;MAGnC,IAAI4U,cAAgB;QAClBlP,WAAWI,OAAO,GAAG+O,aAAiB,QAAI,CAACnB,yBAAyB,CAAC1T,GAAG2d,KAAM5Z,OAAM,GAAG,WAAW8E,IAAI;;MAGxG,IAAI,CAAC4b,YAAc;QACjB,IAAI,CAACtP,aAAa,CAACwI,OAAO3d,GAAG0F,UAAYmD;;MAG3C8b,UAAazZ;IACf;EACF;EAKA4H,cAAiB;IACf,MAAM1J,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMgB,UAAU/C,KAAK+C,OAAO;IAC5B,MAAM0Y,SAAS1Y,QAAQrG,OAAO,IAAIqG,QAAQrG,OAAO,CAACkb,WAAW,IAAI;IACjE,MAAM7X,IAAOC,QAAKD,IAAI,IAAI,EAAE;IAC5B,IAAI,CAACA,IAAKpJ,OAAM,EAAE;MAChB,OAAO8kB;;IAET,MAAMC,aAAa3b,IAAI,CAAC,CAAE,EAAC1C,IAAI,CAAC,IAAI,CAACiN,yBAAyB,CAAC;IAC/D,MAAMqR,YAAY5b,IAAI,CAACA,IAAKpJ,OAAM,GAAG,CAAE,EAAC0G,IAAI,CAAC,IAAI,CAACiN,yBAAyB,CAACvK,KAAKpJ,MAAM,GAAG;IAC1F,OAAOb,IAAKoC,IAAG,CAACujB,QAAQC,YAAYC,SAAa;EACnD;EAEA9kB,IAAO;IACL,MAAMmJ,OAAO,IAAI,CAAC+B,WAAW;IAC7B/B,KAAK+C,OAAO,CAAC6Y,mBAAmB,CAAC,IAAI,CAAC1mB,KAAK,CAACgV,SAAS,EAAElK,IAAKC,OAAM,CAACG,IAAI;IACvE,KAAK,CAACvJ,IAAI;EACZ;AACF;AC3Ie,MAAMglB,mBAA4B/X;EAE/C,OAAOjD,KAAK,WAAY;EAKxB,OAAO9E,QAAW;IAChBiI,eAAiB;IACjBhI,SAAW;MACTua,eAAe,IAAI;MACnBC,cAAc;IAChB;IACA5Z,UAAY;MACV4U,OAAS;QACPnc,IAAM;QACNiH,UAAY,GAAC,KAAK,KAAK,cAAc,YAAY,eAAe;MAClE;IACF;IACA4J,SAAW;IACXkP,UAAY;GACZ;EAKF,OAAO3D,SAAY;IACjBqF,WAAa;IAEbC,OAAS;MACPC,MAAQ;QACNxO,MAAQ;UACNyO,eAAe/hB,KAAK,EAAE;YACpB,MAAM6K,OAAO7K,MAAM6K,IAAI;YACvB,IAAIA,KAAKyI,MAAM,CAAC7R,MAAM,IAAIoJ,IAAK0G,SAAQ,CAAC9P,MAAM,EAAE;cAC9C,MAAM;gBAAC6R,QAAQ;kBAAC0O;kBAAYpe;gBAAAA;cAAM,CAAC,GAAG5D,KAAM8hB,OAAM,CAACta,OAAO;cAE1D,OAAOqD,KAAKyI,MAAM,CAAC2O,GAAG,CAAC,CAACvN,OAAOhT,CAAM;gBACnC,MAAMoJ,OAAO9K,KAAMwR,eAAc,CAAC;gBAClC,MAAM0Q,KAAQpX,QAAK6B,UAAU,CAACuI,QAAQ,CAACxT;gBAEvC,OAAO;kBACLygB,IAAMzN;kBACN0N,WAAWF,MAAMG,eAAe;kBAChCC,aAAaJ,MAAMK,WAAW;kBAC9BC,SAAW5e;kBACX6e,WAAWP,MAAMQ,WAAW;kBAC5BV,UAAYA;kBACZtT,MAAQ,GAAC1O,KAAMue,kBAAiB,CAAC7c;kBAGjCwI,KAAOxI;gBACT;cACF;;YAEF,OAAO,EAAE;UACX;QACF;QAEAihB,QAAQC,CAAC,EAAEC,UAAU,EAAEf,MAAM,EAAE;UAC7BA,OAAO9hB,KAAK,CAAC8iB,oBAAoB,CAACD,WAAW3Y,KAAK;UAClD4X,MAAO9hB,MAAK,CAAC0F,MAAM;QACrB;MACF;IACF;IAEA6H,MAAQ;MACN9D,CAAG;QACDtJ,IAAM;QACNymB,UAAY;UACVC,SAAS;QACX;QACAjK,aAAa,IAAI;QACjBF,IAAM;UACJoK,UAAU;QACZ;QACAC,WAAa;UACXF,SAAS;QACX;QACA3G,UAAY;MACd;IACF;GACA;EAEF1gB,WAAYQ,MAAK,EAAEwK,YAAY,EAAE;IAC/B,KAAK,CAACxK,KAAOwK;IAEb,IAAI,CAACuY,WAAW,GAAGjjB;IACnB,IAAI,CAACkjB,WAAW,GAAGljB;EACrB;EAEA2U,iBAAiBvK,KAAK,EAAE;IACtB,MAAMY,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM7M,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMsT,SAAStT,KAAM6K,KAAI,CAACyI,MAAM,IAAI,EAAE;IACtC,MAAMpL,KAAQ4c,gBAAaha,IAAKqD,QAAO,CAACjE,MAAM,CAACT,CAAC,EAAEzJ,MAAMwH,OAAO,CAACud,MAAM;IAEtE,OAAO;MACLrQ,KAAOpB,QAAM,CAACpJ,MAAM,IAAI;MACxBhC;IACF;EACF;EAEAiL,gBAAgBrI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACxC,OAAOkU,4BAA4BC,IAAI,CAAC,IAAI,CAAEnc,OAAMD,MAAM/J,KAAOgS;EACnE;EAEApN,OAAO6E,IAAI,EAAE;IACX,MAAMgZ,IAAO,OAAI,CAAC1W,WAAW,CAAChC,IAAI;IAElC,IAAI,CAACqc,aAAa;IAClB,IAAI,CAACvP,cAAc,CAAC4L,MAAM,CAAGA,OAAK9hB,MAAM,EAAE8I;EAC5C;EAKA2J,SAAY;IACV,MAAMpJ,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMkH,KAAQ;MAAClT,KAAKkL,OAAOE,iBAAiB;MAAEjJ,KAAK+I,OAAOC;IAAiB;IAE3ElB,KAAKD,IAAI,CAACrK,OAAO,CAAC,CAACuN,SAAS7D,KAAU;MACpC,MAAM0C,SAAS,IAAI,CAACgH,SAAS,CAAC1J,OAAOT,CAAC;MAEtC,IAAI,CAACoU,MAAMjR,MAAW,SAAI,CAAC5M,KAAK,CAACue,iBAAiB,CAACrU,KAAQ;QACzD,IAAI0C,SAASmH,KAAMlT,IAAG,EAAE;UACtBkT,MAAMlT,GAAG,GAAG+L;;QAGd,IAAIA,SAASmH,KAAM/Q,IAAG,EAAE;UACtB+Q,MAAM/Q,GAAG,GAAG4J;;;IAGlB;IAEA,OAAOmH;EACT;EAKAmT,aAAgB;IACd,MAAMlnB,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMgV,YAAYhV,MAAMgV,SAAS;IACjC,MAAMrM,OAAO3I,MAAMwH,OAAO;IAC1B,MAAM2f,OAAUvmB,QAAKC,GAAG,CAACmU,UAAU5L,KAAK,GAAG4L,SAAU1L,KAAI,EAAE0L,UAAU3L,MAAM,GAAG2L,UAAU7L,GAAG;IAE3F,MAAM6Z,WAAcpiB,QAAKoC,GAAG,CAACmkB,UAAU,CAAG;IAC1C,MAAMpE,WAAcniB,QAAKoC,GAAG,CAAC2F,KAAKye,gBAAgB,GAAGpE,WAACA,GAAc,GAAQra,QAAKye,gBAAgB,GAAI,CAAC,EAAE;IACxG,MAAMlD,eAAe,CAAClB,cAAcD,WAAU,IAAK/iB,MAAMqnB,sBAAsB;IAE/E,IAAI,CAACrE,WAAW,GAAGA,cAAekB,YAAe,OAAI,CAACha,KAAK;IAC3D,IAAI,CAAC6Y,WAAW,GAAG,IAAI,CAACC,WAAW,GAAGkB;EACxC;EAEAvM,eAAe4L,IAAI,EAAEziB,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACvC,MAAMoH,QAAQpH,IAAS;IACvB,MAAMvK,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAM2I,OAAO3I,MAAMwH,OAAO;IAC1B,MAAMid,gBAAgB9b,KAAK7B,SAAS;IACpC,MAAM2B,KAAQ,OAAI,CAACoE,WAAW,CAACyE,MAAM;IACrC,MAAMoT,UAAUjc,MAAM6e,OAAO;IAC7B,MAAM3C,UAAUlc,MAAM8e,OAAO;IAC7B,MAAMC,iBAAoB/e,SAAMgf,aAAa,CAAC,KAAK,GAAMvG;IACzD,IAAIP,KAAQ6G;IACZ,IAAI9lB;IAEJ,MAAMgmB,YAAe,SAAM,IAAI,CAACC,oBAAoB;IAEpD,KAAKjmB,CAAI,MAAGA,CAAIZ,UAAO,EAAEY,CAAG;MAC1Bif,SAAS,IAAI,CAACiH,aAAa,CAAClmB,GAAG6I,IAAMmd;IACvC;IACA,KAAKhmB,CAAIZ,UAAOY,CAAIZ,WAAQgS,OAAOpR,CAAK;MACtC,MAAMkjB,MAAMrB,IAAI,CAAC7hB,CAAE;MACnB,IAAIwe,UAAaS;MACjB,IAAIR,WAAWQ,KAAQ,OAAI,CAACiH,aAAa,CAAClmB,GAAG6I,IAAMmd;MACnD,IAAI1E,WAAchjB,SAAMue,iBAAiB,CAAC7c,KAAK+G,KAAMof,8BAA6B,CAAC,IAAI,CAACjU,SAAS,CAAClS,CAAG+H,GAAC,IAAI,CAAC;MAC3GkX,KAAQR;MAER,IAAIxO,KAAO;QACT,IAAI8S,cAAcnD,YAAY,EAAE;UAC9B0B,WAAc;;QAEhB,IAAIyB,cAAcpD,aAAa,EAAE;UAC/BnB,aAAaC,QAAWqH;;;MAI5B,MAAMpgB,UAAa;QACjB6B,CAAGyb;QACHxb,CAAGyb;QACH5B,WAAa;QACbC;QACA9C;QACAC;QACA3Y,OAAS,MAAI,CAAC4N,yBAAyB,CAAC1T,GAAGkjB,GAAInf,OAAM,GAAG,WAAW8E,IAAI;MACzE;MAEA,IAAI,CAACsM,aAAa,CAAC+N,KAAKljB,GAAG0F,UAAYmD;IACzC;EACF;EAEAod,oBAAuB;IACrB,MAAM7c,OAAO,IAAI,CAAC+B,WAAW;IAC7B,IAAIiG,KAAQ;IAEZhI,KAAKD,IAAI,CAACrK,OAAO,CAAC,CAACuN,SAAS7D,KAAU;MACpC,IAAI,CAAC2T,MAAM,IAAI,CAACjK,SAAS,CAAC1J,OAAOT,CAAC,KAAK,IAAI,CAACzJ,KAAK,CAACue,iBAAiB,CAACrU,KAAQ;QAC1E4I;;IAEJ;IAEA,OAAOA;EACT;EAKA8U,cAAc1d,KAAK,EAAEK,IAAI,EAAEmd,YAAY,EAAE;IACvC,OAAO,IAAI,CAAC1nB,KAAK,CAACue,iBAAiB,CAACrU,KAChCiZ,cAAU,IAAI,CAAC/N,yBAAyB,CAAClL,OAAOK,MAAMoW,KAAK,IAAI+G,gBAC/D,CAAC;EACP;AACF;AC/Ne,MAAMI,aAAsB1G;EAEzC,OAAOzV,KAAK,KAAM;EAKlB,OAAO9E,QAAW;IAEhB+Y,MAAQ;IAGRF,QAAU;IAGVC,aAAe;IAGfR,MAAQ;GACR;AACJ;ACpBe,MAAM4I,eAAwBnZ;EAE3C,OAAOjD,KAAK,OAAQ;EAKpB,OAAO9E,QAAW;IAChBgI,kBAAoB;IACpBC,eAAiB;IACjBkC,SAAW;IACXsU,UAAU,IAAI;IACdxQ,QAAU;MACR0Q,IAAM;QACJtV,IAAM;MACR;IACF;GACA;EAKF,OAAOqM,SAAY;IACjBqF,WAAa;IAEbrU,MAAQ;MACN9D,CAAG;QACDtJ,IAAM;MACR;IACF;GACA;EAKFsU,iBAAiBvK,KAAK,EAAE;IACtB,MAAMc,MAAS,OAAI,CAAC6B,WAAW,CAAC7B,MAAM;IACtC,MAAM4B,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAE9B,OAAO;MACLwK,OAAO1J,MAAOuI,UAAS,EAAE,CAACrJ,KAAM;MAChChC,KAAO,OAAK8C,OAAO2J,gBAAgB,CAAC/H,MAAM,CAAC5B,OAAOE,IAAI,CAAC;IACzD;EACF;EAEAiI,gBAAgBrI,IAAI,EAAED,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE;IACxC,OAAOkU,4BAA4BC,IAAI,CAAC,IAAI,CAAEnc,OAAMD,MAAM/J,KAAOgS;EACnE;EAEApN,OAAO6E,IAAI,EAAE;IACX,MAAMO,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM2Y,OAAO1a,KAAK+C,OAAO;IACzB,MAAMuR,MAAStU,QAAKD,IAAI,IAAI,EAAE;IAC9B,MAAMyI,MAASxI,QAAKC,MAAM,CAACwI,SAAS;IAGpCiS,KAAKpG,MAAM,GAAGA;IAEd,IAAI7U,SAAS,QAAU;MACrB,MAAM/C,OAAU,OAAI,CAAC2N,4BAA4B,CAAC5K;MAClD,IAAI,CAAC,IAAI,CAAC/C,OAAO,CAAC8d,QAAQ,EAAE;QAC1B9d,QAAQkb,WAAW,GAAG;;MAGxB,MAAMtb,UAAa;QACjBlC,OAAO,IAAI;QACX8iB,WAAW1U,MAAO7R,OAAM,KAAK2d,OAAO3d,MAAM;QAC1C+F;MACF;MAEA,IAAI,CAACqP,aAAa,CAAC2O,MAAM1lB,WAAWsH,UAAYmD;;IAIlD,IAAI,CAACoN,cAAc,CAACyH,QAAQ,CAAGA,SAAO3d,MAAM,EAAE8I;EAChD;EAEAoN,eAAeyH,MAAM,EAAEte,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACzC,MAAM9B,KAAQ,OAAI,CAACoE,WAAW,CAACyE,MAAM;IACrC,MAAMK,QAAQpH,IAAS;IAEvB,KAAK,IAAI7I,CAAIZ,UAAOY,CAAIZ,WAAQgS,OAAOpR,CAAK;MAC1C,MAAM2d,QAAQD,MAAM,CAAC1d,CAAE;MACvB,MAAM8F,UAAU,IAAI,CAAC4N,yBAAyB,CAAC1T,GAAG2d,KAAM5Z,OAAM,GAAG,WAAW8E,IAAI;MAChF,MAAM0d,gBAAgBxf,KAAMyf,yBAAwB,CAACxmB,GAAG,IAAI,CAACkS,SAAS,CAAClS,GAAG+H,CAAC;MAE3E,MAAMR,IAAI0I,KAAQlJ,SAAM6e,OAAO,GAAGW,cAAchf,CAAC;MACjD,MAAMC,IAAIyI,KAAQlJ,SAAM8e,OAAO,GAAGU,cAAc/e,CAAC;MAEjD,MAAM9B,UAAa;QACjB6B;QACAC;QACAyX,OAAOsH,cAActH,KAAK;QAC1BnB,IAAM3B,QAAM5U,MAAM4U,KAAM3U;QACxB1B;MACF;MAEA,IAAI,CAACqP,aAAa,CAACwI,OAAO3d,GAAG0F,UAAYmD;IAC3C;EACF;AACF;AClGe,MAAM4d,iBAA0BvZ;EAE7C,OAAOjD,KAAK,SAAU;EAKtB,OAAO9E,QAAW;IAChBgI,oBAAoB,KAAK;IACzBC,eAAiB;IACjBwW,UAAU,KAAK;IACfpV,MAAM;GACN;EAKF,OAAOqM,SAAY;IAEjB6L,WAAa;MACX7d,IAAM;IACR;IAEAgD,MAAQ;MACNtE,CAAG;QACD9I,IAAM;MACR;MACA+I,CAAG;QACD/I,IAAM;MACR;IACF;GACA;EAKFsU,iBAAiBvK,KAAK,EAAE;IACtB,MAAMY,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMyG,SAAS,IAAI,CAACtT,KAAK,CAAC6K,IAAI,CAACyI,MAAM,IAAI,EAAE;IAC3C,MAAM;MAACvK;MAAQC;IAAAA,CAAO,GAAG8B;IACzB,MAAM8B,MAAS,OAAI,CAACgH,SAAS,CAAC1J;IAC9B,MAAMjB,CAAIF,UAAO4L,gBAAgB,CAAC/H,OAAO3D,CAAC;IAC1C,MAAMC,CAAIF,UAAO2L,gBAAgB,CAAC/H,OAAO1D,CAAC;IAE1C,OAAO;MACLwL,KAAOpB,QAAM,CAACpJ,MAAM,IAAI;MACxBhC,KAAO,QAAMe,CAAI,UAAOC,CAAI;IAC9B;EACF;EAEAxD,OAAO6E,IAAI,EAAE;IACX,MAAMO,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAM;MAAChC,IAAMuU,WAAS;IAAE,CAAC,GAAGtU;IAE5B,MAAM4a,kBAAqB,OAAI,CAAC1lB,KAAK,CAACwW,mBAAmB;IACzD,IAAI;MAAC1V;MAAOgS;IAAAA,CAAM,GAAG6S,iCAAiC7a,MAAMsU,MAAQsG;IAEpE,IAAI,CAAClW,UAAU,GAAG1O;IAClB,IAAI,CAAC2O,UAAU,GAAGqD;IAElB,IAAI8S,oBAAoB9a,IAAO;MAC7BhK,KAAQ;MACRgS,QAAQsM,OAAO3d,MAAM;;IAGvB,IAAI,IAAI,CAAC+F,OAAO,CAAC8d,QAAQ,EAAE;MAGzB,IAAI,CAAC,IAAI,CAACzW,kBAAkB,EAAE;QAC5B,IAAI,CAACoB,WAAW;;MAElB,MAAM;QAACpC,OAAS2X;QAAMC;MAAAA,CAAS,GAAG3a;MAGlC0a,KAAKlf,MAAM,GAAG,IAAI,CAACtG,KAAK;MACxBwlB,KAAKK,aAAa,GAAG,IAAI,CAAC3b,KAAK;MAC/Bsb,KAAKM,UAAU,GAAG,CAAC,CAACL,SAASK,UAAU;MACvCN,KAAKpG,MAAM,GAAGA;MAEd,MAAM5X,OAAU,OAAI,CAAC2N,4BAA4B,CAAC5K;MAClD/C,QAAQue,OAAO,GAAG,IAAI,CAACve,OAAO,CAACue,OAAO;MACtC,IAAI,CAAClP,aAAa,CAAC2O,MAAM1lB,SAAW;QAClCkmB,UAAU,CAACN;QACXle;OACC+C;IACL,OAAO,IAAI,IAAI,CAACsE,kBAAkB,EAAE;MAElC,OAAO/D,KAAK+C,OAAO;MACnB,IAAI,CAACgB,kBAAkB,GAAG,KAAK;;IAIjC,IAAI,CAAC8I,cAAc,CAACyH,QAAQte,OAAOgS,KAAOvI;EAC5C;EAEA0F,WAAc;IACZ,MAAM;MAACqV;IAAQ,CAAC,GAAG,IAAI,CAAC9d,OAAO;IAE/B,IAAI,CAAC,IAAI,CAACqH,kBAAkB,IAAIyW,QAAU;MACxC,IAAI,CAACzW,kBAAkB,GAAG,IAAI,CAAC7O,KAAK,CAACqoB,QAAQ,CAACC,UAAU,CAAC;;IAG3D,KAAK,CAACrY,WAAW;EACnB;EAEA0H,eAAeyH,MAAM,EAAEte,KAAK,EAAEgS,KAAK,EAAEvI,IAAI,EAAE;IACzC,MAAMoH,QAAQpH,IAAS;IACvB,MAAM;MAACQ;MAAQC;MAAQ2D;MAAU8W;IAAAA,CAAS,GAAG,IAAI,CAAC5Y,WAAW;IAC7D,MAAM6J,SAAY,OAAI,CAACtB,yBAAyB,CAACtU,KAAOyJ;IACxD,MAAMgM,aAAgB,OAAI,CAACF,gBAAgB,CAACK;IAC5C,MAAMJ,cAAiB,OAAI,CAACA,cAAc,CAAC/L,IAAMgM;IACjD,MAAMxJ,QAAQhC,OAAOG,IAAI;IACzB,MAAM8B,QAAQhC,OAAOE,IAAI;IACzB,MAAM;MAACqa;MAAUQ;IAAAA,CAAQ,GAAG,IAAI,CAACve,OAAO;IACxC,MAAMye,YAAeC,YAASX,QAAYA,eAAWxZ,OAAOE,iBAAiB;IAC7E,MAAMka,eAAe,IAAI,CAACnmB,KAAK,CAACwW,mBAAmB,IAAI7E,SAASpH,IAAS;IACzE,IAAI8b,aAAavlB,KAAQ,QAAK,IAAI,CAAC8S,SAAS,CAAC9S,KAAQ;IAErD,KAAK,IAAIY,CAAIZ,UAAOY,IAAIZ,KAAQgS,UAAO,EAAEpR,CAAG;MAC1C,MAAM2d,QAAQD,MAAM,CAAC1d,CAAE;MACvB,MAAMkL,MAAS,OAAI,CAACgH,SAAS,CAAClS;MAC9B,MAAM0F,UAAa+e,kBAAe9G,KAAQ,KAAE;MAC5C,MAAMiH,QAAWxM,iBAAclN,MAAM,CAACI,KAAM;MAC5C,MAAMsS,SAASlY,UAAU,CAAC2F,KAAM,IAAGhC,MAAOsO,iBAAgB,CAACzM,MAAM,CAACG,MAAM,EAAErL;MAC1E,MAAM6d,SAASnY,UAAU,CAAC4F,KAAM,IAAG2E,SAAS2U,QAAWtb,UAAO+R,YAAY,KAAK/R,MAAOqO,iBAAgB,CAAC1K,QAAW,OAAI,CAACxE,UAAU,CAACa,QAAQ4B,MAAQ+B,cAAY/B,MAAM,CAACI,KAAM,GAAEtL,CAAE;MAE/K0F,WAAWoY,IAAI,GAAG3B,KAAMyB,YAAWzB,MAAM0B,MAAW+G;MACpDlf,WAAWlE,IAAI,GAAGxB,CAAI,QAAKd,IAAMwY,IAAG,CAACxM,MAAM,CAACG,KAAM,IAAGsZ,UAAU,CAACtZ,MAAM,CAAKkZ;MAC3E,IAAIF,OAAS;QACX3e,WAAWwF,MAAM,GAAGA;QACpBxF,WAAW6G,GAAG,GAAGwX,QAAS5a,KAAI,CAACnJ,CAAE;;MAGnC,IAAI4U,cAAgB;QAClBlP,WAAWI,OAAO,GAAG+O,aAAiB,QAAI,CAACnB,yBAAyB,CAAC1T,GAAG2d,KAAM5Z,OAAM,GAAG,WAAW8E,IAAI;;MAGxG,IAAI,CAAC4b,YAAc;QACjB,IAAI,CAACtP,aAAa,CAACwI,OAAO3d,GAAG0F,UAAYmD;;MAG3C8b,UAAazZ;IACf;IAEA,IAAI,CAACgK,mBAAmB,CAACL,eAAehM,IAAMmM;EAChD;EAKAlC,cAAiB;IACf,MAAM1J,OAAO,IAAI,CAAC+B,WAAW;IAC7B,MAAMhC,IAAOC,QAAKD,IAAI,IAAI,EAAE;IAE5B,IAAI,CAAC,IAAI,CAACrD,OAAO,CAAC8d,QAAQ,EAAE;MAC1B,IAAItiB,GAAM;MACV,KAAK,IAAItB,IAAImJ,IAAKpJ,OAAM,GAAG,CAAGC,OAAK,CAAG,IAAEA,CAAG;QACzCsB,MAAMpC,IAAKoC,IAAG,CAACA,KAAK6H,IAAI,CAACnJ,EAAE,CAACyG,IAAI,CAAC,IAAI,CAACiN,yBAAyB,CAAC1T,CAAM;MACxE;MACA,OAAOsB,MAAM,CAAKA;;IAGpB,MAAM6K,UAAU/C,KAAK+C,OAAO;IAC5B,MAAM0Y,SAAS1Y,QAAQrG,OAAO,IAAIqG,QAAQrG,OAAO,CAACkb,WAAW,IAAI;IAEjE,IAAI,CAAC7X,IAAKpJ,OAAM,EAAE;MAChB,OAAO8kB;;IAGT,MAAMC,aAAa3b,IAAI,CAAC,CAAE,EAAC1C,IAAI,CAAC,IAAI,CAACiN,yBAAyB,CAAC;IAC/D,MAAMqR,YAAY5b,IAAI,CAACA,IAAKpJ,OAAM,GAAG,CAAE,EAAC0G,IAAI,CAAC,IAAI,CAACiN,yBAAyB,CAACvK,KAAKpJ,MAAM,GAAG;IAC1F,OAAOb,IAAKoC,IAAG,CAACujB,QAAQC,YAAYC,SAAa;EACnD;AACF;;;;;;;;;;;;;AClLA;;;;AAIC;AA4DD,SAAS8B,QAAwB;EAC/B,MAAM,IAAIC,MAAM,iFAAmF;AACrG;AAEA;;;;;AAKC;AACD,MAAMC;EAEJ;;;;;;;;;;EAUA,OAAOC,QACLC,QAAiD,EACjD;IACAhiB,OAAOyB,MAAM,CAACqgB,eAAgBG,UAAS,EAAED;EAC3C;EAESnhB,OAAmB;EAE5BhI,YAAYgI,OAAkB,EAAE;IAC9B,IAAI,CAACA,OAAO,GAAGA,WAAW,EAAC;EAC7B;;EAGAqhB,OAAO;EAEPC,OAAkC;IAChC,OAAOP;EACT;EAEA1V,KAAuB;IACrB,OAAO0V;EACT;EAEAQ,MAAiB;IACf,OAAOR;EACT;EAEA5lB,GAAc;IACZ,OAAO4lB;EACT;EAEAS,IAAe;IACb,OAAOT;EACT;EAEAU,OAAkB;IAChB,OAAOV;EACT;EAEAW,KAAgB;IACd,OAAOX;EACT;AACF;AAEA,eAAe;EACbY,KAAOV;AACT,CAAE;AC/GF,SAASW,aAAaC,OAAO,EAAEne,IAAI,EAAEhD,KAAK,EAAEohB,SAAS,EAAE;EACrD,MAAM;IAAC3c,UAAU;IAAE9B;IAAMmI;EAAAA,CAAQ,GAAGqW;EACpC,MAAMte,MAAS4B,cAAWE,WAAW,CAAC9B,MAAM;EAC5C,IAAIA,UAAUG,IAASH,YAAOG,IAAI,IAAIA,SAAS,GAAO8H,eAAWnI,IAAKpJ,OAAM,EAAE;IAC5E,MAAM8nB,YAAexe,UAAOye,cAAc,GAAGC,gBAAgBC,YAAY;IACzE,IAAI,CAACJ,SAAW;MACd,OAAOC,aAAa1e,MAAMK,IAAMhD;KAC3B,UAAIyE,UAAW4C,eAAc,EAAE;MAIpC,MAAMoa,KAAK9e,IAAI,CAAC,CAAE;MAClB,MAAMkJ,QAAQ,OAAO4V,EAAGC,SAAQ,KAAK,UAAcD,OAAGC,QAAQ,CAAC1e;MAC/D,IAAI6I,KAAO;QACT,MAAMjT,KAAQyoB,gBAAa1e,IAAMK,QAAMhD,KAAQ6L;QAC/C,MAAMlL,GAAM0gB,gBAAa1e,IAAMK,QAAMhD,KAAQ6L;QAC7C,OAAO;UAAC8V,IAAI/oB,MAAM+oB,EAAE;UAAEC,IAAIjhB,IAAIihB;QAAE;;;;EAKtC,OAAO;IAACD,EAAI;IAAGC,EAAIjf,OAAKpJ,MAAM,GAAG;EAAC;AACpC;AAUA,SAASsoB,wBAAyB/pB,MAAK,EAAEkL,IAAI,EAAE8e,QAAQ,EAAEC,OAAO,EAAEX,SAAS,EAAE;EAC3E,MAAMvf,WAAW/J,MAAMkqB,4BAA4B;EACnD,MAAMhiB,QAAQ8hB,QAAQ,CAAC9e,IAAK;EAC5B,KAAK,IAAIxJ,CAAI,MAAGuI,IAAOF,YAAStI,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IACrD,MAAM;MAACwI;MAAOW;IAAAA,CAAK,GAAGd,QAAQ,CAACrI,CAAE;IACjC,MAAM;MAACmoB;MAAIC;IAAAA,CAAG,GAAGV,YAAarf,SAAQ,CAACrI,EAAE,EAAEwJ,MAAMhD,KAAOohB;IACxD,KAAK,IAAIa,CAAIN,OAAIM,CAAKL,QAAI,EAAEK,CAAG;MAC7B,MAAMpc,UAAUlD,IAAI,CAACsf,CAAE;MACvB,IAAI,CAACpc,OAAQyR,KAAI,EAAE;QACjByK,QAAQlc,SAAS7D,KAAOigB;;IAE5B;EACF;AACF;AAOA,SAASC,wBAAyBlf,KAAI,EAAE;EACtC,MAAMmf,IAAOnf,QAAK4S,OAAO,CAAC,SAAS,CAAC;EACpC,MAAMwM,IAAOpf,QAAK4S,OAAO,CAAC,SAAS,CAAC;EAEpC,OAAO,UAASyM,GAAG,EAAEC,GAAG,EAAE;IACxB,MAAMC,SAASJ,IAAOzpB,QAAKwY,GAAG,CAACmR,GAAIthB,EAAC,GAAGuhB,IAAIvhB,CAAC,IAAI,CAAC;IACjD,MAAMyhB,SAASJ,IAAO1pB,QAAKwY,GAAG,CAACmR,GAAIrhB,EAAC,GAAGshB,IAAIthB,CAAC,IAAI,CAAC;IACjD,OAAOtI,KAAK+pB,IAAI,CAAC/pB,IAAKgqB,IAAG,CAACH,QAAQ,CAAK7pB,SAAKgqB,GAAG,CAACF,MAAQ;EAC1D;AACF;AAWA,SAASG,iBAAkB7qB,MAAK,EAAEgqB,QAAQ,EAAE9e,IAAI,EAAE4f,gBAAgB,EAAEC,gBAAgB,EAAE;EACpF,MAAMvpB,QAAQ,EAAE;EAEhB,IAAI,CAACupB,gBAAoB,KAAC/qB,KAAMgrB,cAAa,CAAChB,QAAW;IACvD,OAAOxoB;;EAGT,MAAMypB,iBAAiB,UAASld,OAAO,EAAEvD,YAAY,EAAEN,KAAK,EAAE;IAC5D,IAAI,CAAC6gB,oBAAoB,CAACG,eAAend,SAAS/N,KAAMgV,UAAS,EAAE,CAAI;MACrE;;IAEF,IAAIjH,QAAQod,OAAO,CAACnB,SAAS/gB,CAAC,EAAE+gB,SAAS9gB,CAAC,EAAE4hB,gBAAmB;MAC7DtpB,MAAMkB,IAAI,CAAC;QAACqL;QAASvD;QAAcN;MAAK;;EAE5C;EAEA6f,yBAAyB/pB,KAAOkL,QAAM8e,QAAUiB,kBAAgB,IAAI;EACpE,OAAOzpB;AACT;AAUA,SAAS4pB,sBAAsBprB,KAAK,EAAEgqB,QAAQ,EAAE9e,IAAI,EAAE4f,gBAAgB,EAAE;EACtE,IAAItpB,QAAQ,EAAE;EAEd,SAASypB,eAAeld,OAAO,EAAEvD,YAAY,EAAEN,KAAK,EAAE;IACpD,MAAM;MAACgW;MAAYC;IAAAA,CAAS,GAAGpS,QAAQsd,QAAQ,CAAC,CAAC,cAAc,WAAW,EAAEP;IAC5E,MAAM;MAACnK;IAAAA,CAAM,GAAG2K,kBAAkBvd,OAAS;MAAC9E,GAAG+gB,SAAS/gB,CAAC;MAAEC,GAAG8gB,SAAS9gB;IAAC;IAExE,IAAI0X,cAAcD,KAAOT,cAAYC,QAAW;MAC9C3e,MAAMkB,IAAI,CAAC;QAACqL;QAASvD;QAAcN;MAAK;;EAE5C;EAEA6f,wBAAyB/pB,QAAOkL,MAAM8e,QAAUiB;EAChD,OAAOzpB;AACT;AAYA,SAAS+pB,yBAAyBvrB,KAAK,EAAEgqB,QAAQ,EAAE9e,IAAI,EAAEoe,SAAS,EAAEwB,gBAAgB,EAAEC,gBAAgB,EAAE;EACtG,IAAIvpB,QAAQ,EAAE;EACd,MAAMgqB,iBAAiBpB,wBAAyBlf;EAChD,IAAIugB,cAAc1f,OAAOE,iBAAiB;EAE1C,SAASgf,eAAeld,OAAO,EAAEvD,YAAY,EAAEN,KAAK,EAAE;IACpD,MAAMihB,UAAUpd,QAAQod,OAAO,CAACnB,SAAS/gB,CAAC,EAAE+gB,QAAS9gB,EAAC,EAAE4hB;IACxD,IAAIxB,aAAa,CAAC6B,OAAS;MACzB;;IAGF,MAAM7N,SAASvP,OAAQ2d,eAAc,CAACZ;IACtC,MAAMa,cAAc,CAAC,CAACZ,gBAAoB/qB,UAAMgrB,aAAa,CAAC1N;IAC9D,IAAI,CAACqO,WAAe,KAACR,OAAS;MAC5B;;IAGF,MAAMS,WAAWJ,eAAexB,QAAU1M;IAC1C,IAAIsO,WAAWH,WAAa;MAC1BjqB,KAAQ,IAAC;QAACuM;QAASvD;QAAcN;MAAK,EAAE;MACxCuhB,WAAcG;KACT,UAAIA,aAAaH,WAAa;MAEnCjqB,MAAMkB,IAAI,CAAC;QAACqL;QAASvD;QAAcN;MAAK;;EAE5C;EAEA6f,wBAAyB/pB,QAAOkL,MAAM8e,QAAUiB;EAChD,OAAOzpB;AACT;AAYA,SAASqqB,gBAAgB7rB,KAAK,EAAEgqB,QAAQ,EAAE9e,IAAI,EAAEoe,SAAS,EAAEwB,gBAAgB,EAAEC,gBAAgB,EAAE;EAC7F,IAAI,CAACA,gBAAoB,KAAC/qB,KAAMgrB,cAAa,CAAChB,QAAW;IACvD,OAAO,EAAE;;EAGX,OAAO9e,IAAS,YAAO,CAACoe,YACpB8B,sBAAsBprB,KAAOgqB,YAAU9e,IAAM4f,sBAC7CS,yBAAyBvrB,KAAOgqB,YAAU9e,IAAMoe,aAAWwB,kBAAkBC,gBAAiB;AACpG;AAWA,SAASe,YAAa9rB,MAAK,EAAEgqB,QAAQ,EAAE9e,IAAI,EAAEoe,SAAS,EAAEwB,gBAAgB,EAAE;EACxE,MAAMtpB,QAAQ,EAAE;EAChB,MAAMuqB,WAAc7gB,YAAS,GAAM,gBAAa,UAAU;EAC1D,IAAI8gB,iBAAiB,KAAK;EAE1BjC,yBAAyB/pB,OAAOkL,IAAM8e,YAAU,CAACjc,SAASvD,cAAcN,KAAU;IAChF,IAAI6D,OAAO,CAACge,WAAY,EAAC/B,QAAQ,CAAC9e,KAAK,EAAE4f,gBAAmB;MAC1DtpB,MAAMkB,IAAI,CAAC;QAACqL;QAASvD;QAAcN;MAAK;MACxC8hB,cAAiBA,qBAAkBje,QAAQod,OAAO,CAACnB,SAAS/gB,CAAC,EAAE+gB,QAAS9gB,EAAC,EAAE4hB;;EAE/E;EAIA,IAAIxB,aAAa,CAAC0C,cAAgB;IAChC,OAAO,EAAE;;EAEX,OAAOxqB;AACT;AAMA,kBAAe;EAEbuoB;EAGAkC,KAAO;IAYL/hB,MAAMlK,KAAK,EAAE4iB,CAAC,EAAEpb,OAAO,EAAEsjB,gBAAgB,EAAE;MACzC,MAAMd,WAAWkC,oBAAoBtJ,CAAG5iB;MAExC,MAAMkL,OAAO1D,OAAQ0D,KAAI,IAAI;MAC7B,MAAM6f,gBAAmBvjB,WAAQujB,gBAAgB,IAAI,KAAK;MAC1D,MAAMvpB,QAAQgG,OAAQ8hB,UAAS,GAC3BuB,kBAAkB7qB,OAAOgqB,QAAU9e,QAAM4f,gBAAkBC,sBAC3Dc,gBAAgB7rB,KAAOgqB,YAAU9e,MAAM,KAAK,EAAE4f,kBAAkBC,gBAAiB;MACrF,MAAMjW,WAAW,EAAE;MAEnB,IAAI,CAACtT,KAAMC,OAAM,EAAE;QACjB,OAAO,EAAE;;MAGXzB,MAAMkqB,4BAA4B,GAAG1pB,OAAO,CAAEsK,IAAS;QACrD,MAAMZ,KAAQ1I,QAAK,CAAC,EAAE,CAAC0I,KAAK;QAC5B,MAAM6D,OAAUjD,QAAKD,IAAI,CAACX,KAAM;QAGhC,IAAI6D,OAAW,KAACA,OAAQyR,KAAI,EAAE;UAC5B1K,SAASpS,IAAI,CAAC;YAACqL;YAASvD,cAAcM,KAAKZ,KAAK;YAAEA;UAAK;;MAE3D;MAEA,OAAO4K;IACT;IAYAjH,QAAQ7N,KAAK,EAAE4iB,CAAC,EAAEpb,OAAO,EAAEsjB,gBAAgB,EAAE;MAC3C,MAAMd,WAAWkC,oBAAoBtJ,CAAG5iB;MACxC,MAAMkL,OAAO1D,OAAQ0D,KAAI,IAAI;MAC7B,MAAM6f,gBAAmBvjB,WAAQujB,gBAAgB,IAAI,KAAK;MAC1D,IAAIvpB,QAAQgG,OAAQ8hB,UAAS,GACzBuB,kBAAkB7qB,OAAOgqB,QAAU9e,QAAM4f,gBAAkBC,sBAC7Dc,gBAAgB7rB,KAAOgqB,YAAU9e,MAAM,KAAK,EAAE4f,kBAAkBC,gBAAiB;MAEnF,IAAIvpB,MAAMC,MAAM,GAAG,CAAG;QACpB,MAAM+I,YAAehJ,QAAK,CAAC,EAAE,CAACgJ,YAAY;QAC1C,MAAMK,IAAO7K,SAAMwR,cAAc,CAAChH,cAAcK,IAAI;QACpDrJ,QAAQ,EAAE;QACV,KAAK,IAAIE,IAAI,CAAGA,MAAImJ,KAAKpJ,MAAM,EAAE,EAAEC,CAAG;UACpCF,MAAMkB,IAAI,CAAC;YAACqL,OAASlD,MAAI,CAACnJ,CAAE;YAAE8I;YAAcN,KAAOxI;UAAC;QACtD;;MAGF,OAAOF;IACT;IAYA6d,MAAMrf,KAAK,EAAE4iB,CAAC,EAAEpb,OAAO,EAAEsjB,gBAAgB,EAAE;MACzC,MAAMd,WAAWkC,oBAAoBtJ,CAAG5iB;MACxC,MAAMkL,OAAO1D,OAAQ0D,KAAI,IAAI;MAC7B,MAAM6f,gBAAmBvjB,WAAQujB,gBAAgB,IAAI,KAAK;MAC1D,OAAOF,iBAAkB7qB,QAAOgqB,QAAU9e,QAAM4f,gBAAkBC;IACpE;IAWAoB,QAAQnsB,KAAK,EAAE4iB,CAAC,EAAEpb,OAAO,EAAEsjB,gBAAgB,EAAE;MAC3C,MAAMd,WAAWkC,oBAAoBtJ,CAAG5iB;MACxC,MAAMkL,OAAO1D,OAAQ0D,KAAI,IAAI;MAC7B,MAAM6f,gBAAmBvjB,WAAQujB,gBAAgB,IAAI,KAAK;MAC1D,OAAOc,gBAAgB7rB,KAAOgqB,YAAU9e,MAAM1D,OAAQ8hB,UAAS,EAAEwB,gBAAkBC;IACrF;IAWA9hB,EAAEjJ,KAAK,EAAE4iB,CAAC,EAAEpb,OAAO,EAAEsjB,gBAAgB,EAAE;MACrC,MAAMd,WAAWkC,oBAAoBtJ,CAAG5iB;MACxC,OAAO8rB,aAAa9rB,KAAOgqB,YAAU,GAAKxiB,UAAQ8hB,SAAS,EAAEwB;IAC/D;IAWA5hB,EAAElJ,KAAK,EAAE4iB,CAAC,EAAEpb,OAAO,EAAEsjB,gBAAgB,EAAE;MACrC,MAAMd,WAAWkC,oBAAoBtJ,CAAG5iB;MACxC,OAAO8rB,aAAa9rB,KAAOgqB,YAAU,GAAKxiB,UAAQ8hB,SAAS,EAAEwB;IAC/D;EACF;AACF,CAAE;ACvWF,MAAMsB,gBAAmB,IAAC,QAAQ,OAAO,SAAS,SAAS;AAE3D,SAASC,gBAAiBC,MAAK,EAAEtC,QAAQ,EAAE;EACzC,OAAOsC,MAAM9e,MAAM,CAACyO,CAAKA,MAAEsQ,GAAG,KAAKvC;AACrC;AAEA,SAASwC,2BAA4BF,MAAK,EAAEphB,IAAI,EAAE;EAChD,OAAOohB,MAAM9e,MAAM,CAACyO,KAAKmQ,iBAAiBtO,OAAO,CAAC7B,CAAEsQ,IAAG,MAAM,CAAC,KAAKtQ,EAAEwQ,GAAG,CAACvhB,IAAI,KAAKA;AACpF;AAEA,SAASwhB,YAAaJ,MAAK,EAAE1jB,OAAO,EAAE;EACpC,OAAO0jB,KAAMxT,KAAI,CAAC,CAACC,GAAGrP,CAAM;IAC1B,MAAMijB,KAAK/jB,OAAUc,OAAIqP,CAAC;IAC1B,MAAMgD,KAAKnT,OAAUmQ,OAAIrP,CAAC;IAC1B,OAAOijB,GAAGvH,MAAM,KAAKrJ,EAAGqJ,OAAM,GAC5BuH,EAAGziB,MAAK,GAAG6R,GAAG7R,KAAK,GACnByiB,GAAGvH,MAAM,GAAGrJ,GAAGqJ,MAAM;EACzB;AACF;AAEA,SAASwH,UAAUC,KAAK,EAAE;EACxB,MAAMC,cAAc,EAAE;EACtB,IAAIprB,CAAGuI,QAAMwiB,GAAKF,OAAKniB,KAAO2iB;EAE9B,KAAKrrB,CAAI,MAAGuI,IAAO,GAAC4iB,MAAS,MAAE,EAAEprB,MAAM,EAAEC,CAAIuI,SAAM,EAAEvI,CAAG;IACtD+qB,GAAMI,QAAK,CAACnrB,CAAE;IACb;MAACsoB,UAAUuC,GAAG;MAAE/kB,SAAS;QAAC4C;QAAO2iB,cAAc;MAAC;IAAC,CAAC,GAAGN,GAAE;IACxDK,YAAYpqB,IAAI,CAAC;MACfwH,KAAOxI;MACP+qB;MACAF;MACAlR,YAAYoR,IAAItR,YAAY;MAC5BiK,QAAQqH,IAAIrH,MAAM;MAClBhb,OAAOA,SAAUmiB,GAAMniB;MACvB2iB;IACF;EACF;EACA,OAAOD;AACT;AAEA,SAASE,YAAYC,OAAO,EAAE;EAC5B,MAAM9gB,SAAS,EAAC;EAChB,KAAK,MAAM+gB,QAAQD,OAAS;IAC1B,MAAM;MAAC7iB,KAAK;MAAEmiB;MAAKQ;IAAAA,CAAY,GAAGG;IAClC,IAAI,CAAC9iB,KAAS,KAACgiB,gBAAiBe,SAAQ,CAACZ,GAAM;MAC7C;;IAEF,MAAMa,SAASjhB,MAAM,CAAC/B,MAAM,KAAK+B,MAAM,CAAC/B,MAAM,GAAG;MAAC0I,KAAO;MAAGua,MAAQ;MAAGjI,MAAQ;MAAGjd,IAAM;KAAC;IACzFilB,OAAOta,KAAK;IACZsa,OAAOhI,MAAM,IAAI2H;EACnB;EACA,OAAO5gB;AACT;AAKA,SAASmhB,cAAcL,OAAO,EAAEM,MAAM,EAAE;EACtC,MAAMphB,SAAS6gB,WAAYC;EAC3B,MAAM;IAACO;IAAcC;EAAAA,CAAc,GAAGF;EACtC,IAAI7rB,GAAGuI,IAAMyjB;EACb,KAAKhsB,IAAI,GAAGuI,IAAOgjB,WAAQxrB,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;IAChDgsB,MAAST,UAAO,CAACvrB,CAAE;IACnB,MAAM;MAACisB;IAAAA,CAAS,GAAGD,OAAOjB,GAAG;IAC7B,MAAMriB,KAAQ+B,SAAM,CAACuhB,OAAOtjB,KAAK,CAAC;IAClC,MAAMzG,SAASyG,KAASsjB,WAAOX,WAAW,GAAG3iB,MAAMgb,MAAM;IACzD,IAAIsI,OAAOrS,UAAU,EAAE;MACrBqS,OAAOlQ,KAAK,GAAG7Z,SAASA,SAAS6pB,YAAeG,eAAYJ,OAAOK,cAAc;MACjFF,OAAOnQ,MAAM,GAAGkQ;KACX;MACLC,OAAOlQ,KAAK,GAAGgQ;MACfE,OAAOnQ,MAAM,GAAG5Z,SAASA,SAAS8pB,aAAgBE,eAAYJ,OAAOM,eAAe;;EAExF;EACA,OAAO1hB;AACT;AAEA,SAAS2hB,iBAAiBjB,KAAK,EAAE;EAC/B,MAAMC,cAAcF,SAAUC;EAC9B,MAAMc,QAAWjB,gBAAaI,WAAYtf,OAAM,CAAC0f,IAAQA,SAAKT,GAAG,CAACkB,QAAQ,GAAG,IAAI;EACjF,MAAMrkB,IAAOojB,gBAAaL,gBAAiBS,cAAa,SAAS,IAAI;EACrE,MAAM1jB,QAAQsjB,YAAaL,kBAAiBS,WAAa;EACzD,MAAM3jB,GAAMujB,gBAAaL,gBAAiBS,cAAa,QAAQ,IAAI;EACnE,MAAMzjB,SAASqjB,YAAaL,kBAAiBS,WAAa;EAC1D,MAAMiB,mBAAmBvB,4BAA4BM,WAAa;EAClE,MAAMkB,iBAAiBxB,4BAA4BM,WAAa;EAEhE,OAAO;IACLa;IACAM,UAAY3kB,OAAKsP,MAAM,CAACzP;IACxB+kB,cAAgB9kB,QAAMwP,MAAM,CAACoV,gBAAgBpV,MAAM,CAACvP,QAAQuP,MAAM,CAACmV;IACnE/Y,WAAWqX,iBAAiBS,WAAa;IACzCqB,UAAU7kB,IAAKsP,OAAM,CAACxP,OAAOwP,MAAM,CAACoV;IACpC3S,YAAYlS,GAAIyP,OAAM,CAACvP,QAAQuP,MAAM,CAACmV;EACxC;AACF;AAEA,SAASK,eAAeC,UAAU,EAAErZ,SAAS,EAAE+D,CAAC,EAAErP,CAAC,EAAE;EACnD,OAAO9I,KAAKoC,GAAG,CAACqrB,UAAU,CAACtV,CAAE,GAAE/D,SAAS,CAAC+D,EAAE,IAAInY,IAAKoC,IAAG,CAACqrB,UAAU,CAAC3kB,EAAE,EAAEsL,SAAS,CAACtL,CAAE;AACrF;AAEA,SAAS4kB,gBAAiBD,WAAU,EAAEE,UAAU,EAAE;EAChDF,UAAWllB,IAAG,GAAGvI,IAAKoC,IAAG,CAACqrB,UAAWllB,IAAG,EAAEolB,WAAWplB,GAAG;EACxDklB,UAAW/kB,KAAI,GAAG1I,IAAKoC,IAAG,CAACqrB,UAAW/kB,KAAI,EAAEilB,WAAWjlB,IAAI;EAC3D+kB,UAAWhlB,OAAM,GAAGzI,IAAKoC,IAAG,CAACqrB,UAAWhlB,OAAM,EAAEklB,WAAWllB,MAAM;EACjEglB,UAAWjlB,MAAK,GAAGxI,IAAKoC,IAAG,CAACqrB,UAAWjlB,MAAK,EAAEmlB,WAAWnlB,KAAK;AAChE;AAEA,SAASolB,WAAWxZ,SAAS,EAAEuY,MAAM,EAAEG,MAAM,EAAEvhB,MAAM,EAAE;EACrD,MAAM;IAACogB;IAAKE;EAAAA,CAAI,GAAGiB;EACnB,MAAMW,aAAarZ,UAAUqZ,UAAU;EAGvC,IAAI,CAAC5nB,SAAS8lB,GAAM;IAClB,IAAImB,OAAOvlB,IAAI,EAAE;MAEf6M,SAAS,CAACuX,IAAI,IAAImB,OAAOvlB,IAAI;;IAE/B,MAAMiC,QAAQ+B,MAAM,CAACuhB,MAAOtjB,MAAK,CAAC,IAAI;MAACjC,IAAM;MAAG2K,KAAO;IAAC;IACxD1I,MAAMjC,IAAI,GAAGvH,IAAKoC,IAAG,CAACoH,KAAMjC,KAAI,EAAEulB,OAAOrS,UAAU,GAAGoR,IAAIlP,MAAM,GAAGkP,IAAIjP,KAAK;IAC5EkQ,OAAOvlB,IAAI,GAAGiC,MAAMjC,IAAI,GAAGiC,MAAM0I,KAAK;IACtCkC,SAAS,CAACuX,IAAI,IAAImB,OAAOvlB,IAAI;;EAG/B,IAAIskB,IAAIgC,UAAU,EAAE;IAClBH,gBAAiBD,aAAY5B,IAAIgC,UAAU;;EAG7C,MAAMC,WAAW9tB,IAAKoC,IAAG,CAAC,GAAGuqB,MAAOoB,WAAU,GAAGP,eAAeC,UAAYrZ,aAAW,MAAQ;EAC/F,MAAM4Z,YAAYhuB,IAAKoC,IAAG,CAAC,GAAGuqB,MAAOsB,YAAW,GAAGT,eAAeC,UAAYrZ,aAAW,KAAO;EAChG,MAAM8Z,eAAeJ,QAAa1Z,eAAU+Z,CAAC;EAC7C,MAAMC,gBAAgBJ,SAAc5Z,eAAUia,CAAC;EAC/Cja,UAAU+Z,CAAC,GAAGL;EACd1Z,UAAUia,CAAC,GAAGL;EAGd,OAAOlB,OAAOrS,UAAU,GACpB;IAAC6T,IAAMJ;IAAcK,KAAOH;GAC5B;IAACE,IAAMF;IAAeG,KAAOL;GAAa;AAChD;AAEA,SAASM,iBAAiBpa,SAAS,EAAE;EACnC,MAAMqZ,aAAarZ,UAAUqZ,UAAU;EAEvC,SAASgB,UAAU9C,GAAG,EAAE;IACtB,MAAM+C,SAAS1uB,IAAKoC,IAAG,CAACqrB,UAAU,CAAC9B,IAAI,GAAGvX,SAAS,CAACuX,IAAI,EAAE;IAC1DvX,SAAS,CAACuX,IAAI,IAAI+C;IAClB,OAAOA;EACT;EACAta,SAAU9L,EAAC,IAAImmB,SAAU;EACzBra,SAAU/L,EAAC,IAAIomB,SAAU;EACzBA,SAAU;EACVA,SAAU;AACZ;AAEA,SAASE,UAAWlU,WAAU,EAAErG,SAAS,EAAE;EACzC,MAAMqZ,aAAarZ,UAAUqZ,UAAU;EAEvC,SAASmB,mBAAmBC,SAAS,EAAE;IACrC,MAAMC,MAAS;MAACpmB,IAAM;MAAGH,GAAK;MAAGC,KAAO;MAAGC,MAAQ;IAAC;IACpDomB,SAAUjvB,QAAO,CAAE+rB,GAAQ;MACzBmD,MAAM,CAACnD,IAAI,GAAG3rB,KAAKoC,GAAG,CAACgS,SAAS,CAACuX,GAAI,GAAE8B,UAAU,CAAC9B,GAAI;IACxD;IACA,OAAOmD;EACT;EAEA,OAAOrU,aACHmU,kBAAmB,EAAC,QAAQ,QAAQ,IACpCA,kBAAmB,EAAC,OAAO,SAAS,CAAC;AAC3C;AAEA,SAASG,SAAS9C,KAAK,EAAE7X,SAAS,EAAEuY,MAAM,EAAEphB,MAAM,EAAE;EAClD,MAAMyjB,aAAa,EAAE;EACrB,IAAIluB,CAAGuI,QAAMyjB,MAAQjB,OAAKoD,KAAOC;EAEjC,KAAKpuB,CAAI,MAAGuI,IAAO4iB,SAAMprB,MAAM,EAAEouB,KAAQ,IAAC,EAAEnuB,IAAIuI,IAAM,IAAEvI,CAAG;IACzDgsB,MAASb,QAAK,CAACnrB,CAAE;IACjB+qB,MAAMiB,OAAOjB,GAAG;IAEhBA,IAAI/mB,MAAM,CACRgoB,OAAOlQ,KAAK,IAAIxI,UAAU+Z,CAAC,EAC3BrB,MAAOnQ,OAAM,IAAIvI,SAAUia,EAAC,EAC5BM,UAAW7B,QAAOrS,UAAU,EAAErG;IAEhC,MAAM;MAACka;MAAMC;IAAAA,CAAM,GAAGX,WAAWxZ,SAAWuY,UAAQG,MAAQvhB;IAI5D0jB,KAASX,YAAQU,WAAWnuB,MAAM;IAGlCquB,UAAUA,OAAWX;IAErB,IAAI,CAAC1C,GAAIkB,SAAQ,EAAE;MACjBiC,WAAWltB,IAAI,CAACgrB;;EAEpB;EAEA,OAAOmC,KAASF,aAASC,UAAY5a,aAAWuY,QAAQphB,MAAW2jB;AACrE;AAEA,SAASC,WAAWtD,GAAG,EAAEnjB,IAAI,EAAEH,GAAG,EAAEqU,KAAK,EAAED,MAAM,EAAE;EACjDkP,IAAItjB,GAAG,GAAGA;EACVsjB,IAAInjB,IAAI,GAAGA;EACXmjB,GAAIrjB,MAAK,GAAGE,IAAOkU;EACnBiP,GAAIpjB,OAAM,GAAGF,GAAMoU;EACnBkP,IAAIjP,KAAK,GAAGA;EACZiP,IAAIlP,MAAM,GAAGA;AACf;AAEA,SAASyS,WAAWnD,KAAK,EAAE7X,SAAS,EAAEuY,MAAM,EAAEphB,MAAM,EAAE;EACpD,MAAM8jB,cAAc1C,OAAO2C,OAAO;EAClC,IAAI;IAACjnB;IAAGC;EAAAA,CAAE,GAAG8L;EAEb,KAAK,MAAM0Y,UAAUb,KAAO;IAC1B,MAAMJ,MAAMiB,OAAOjB,GAAG;IACtB,MAAMriB,QAAQ+B,MAAM,CAACuhB,MAAOtjB,MAAK,CAAC,IAAI;MAAC0I,KAAO;MAAGua,MAAQ;MAAGjI,MAAQ;IAAC;IACrE,MAAMA,SAASsI,MAACA,CAAOX,WAAW,GAAG3iB,MAAMgb,MAAM,IAAK;IACtD,IAAIsI,OAAOrS,UAAU,EAAE;MACrB,MAAMmC,QAAQxI,SAAU+Z,EAAC,GAAG3J;MAC5B,MAAM7H,MAASnT,SAAMjC,IAAI,IAAIskB,IAAIlP,MAAM;MACvC,IAAI5H,QAAQvL,KAAMtJ,MAAK,CAAG;QACxBoI,IAAIkB,MAAMtJ,KAAK;;MAEjB,IAAI2rB,IAAIkB,QAAQ,EAAE;QAChBoC,WAAWtD,GAAKwD,cAAY3mB,IAAI,EAAEJ,CAAGqkB,SAAOoB,UAAU,GAAGsB,WAAY7mB,MAAK,GAAG6mB,YAAY3mB,IAAI,EAAEiU;OAC1F;QACLwS,UAAWtD,MAAKzX,UAAU1L,IAAI,GAAGc,MAAMijB,MAAM,EAAEnkB,GAAGsU,KAAOD;;MAE3DnT,MAAMtJ,KAAK,GAAGoI;MACdkB,MAAMijB,MAAM,IAAI7P;MAChBtU,IAAIujB,IAAIpjB,MAAM;KACT;MACL,MAAMkU,SAASvI,SAAUia,EAAC,GAAG7J;MAC7B,MAAM5H,KAAQpT,SAAMjC,IAAI,IAAIskB,IAAIjP,KAAK;MACrC,IAAI7H,QAAQvL,KAAMtJ,MAAK,CAAG;QACxBmI,IAAImB,MAAMtJ,KAAK;;MAEjB,IAAI2rB,IAAIkB,QAAQ,EAAE;QAChBoC,WAAWtD,GAAKxjB,KAAGgnB,WAAY9mB,IAAG,EAAEqU,OAAO+P,MAAOsB,YAAW,GAAGoB,YAAY5mB,MAAM,GAAG4mB,YAAY9mB,GAAG;OAC/F;QACL4mB,UAAWtD,MAAKxjB,GAAG+L,SAAU7L,IAAG,GAAGiB,KAAMijB,OAAM,EAAE7P,KAAOD;;MAE1DnT,MAAMtJ,KAAK,GAAGmI;MACdmB,MAAMijB,MAAM,IAAI9P;MAChBtU,IAAIwjB,IAAIrjB,KAAK;;EAEjB;EAEA4L,UAAU/L,CAAC,GAAGA;EACd+L,UAAU9L,CAAC,GAAGA;AAChB;AAwBA,cAAe;EAQbinB,MAAOnwB,MAAK,EAAE4B,IAAI,EAAE;IAClB,IAAI,CAAC5B,KAAM6sB,MAAK,EAAE;MAChB7sB,KAAM6sB,MAAK,GAAG,EAAE;;IAIlBjrB,KAAK+rB,QAAQ,GAAG/rB,IAAK+rB,SAAQ,IAAI,KAAK;IACtC/rB,KAAKooB,QAAQ,GAAGpoB,IAAKooB,SAAQ,IAAI;IACjCpoB,KAAKwjB,MAAM,GAAGxjB,IAAKwjB,OAAM,IAAI;IAE7BxjB,KAAKwuB,OAAO,GAAGxuB,IAAKwuB,QAAO,IAAI,YAAW;MACxC,OAAO,CAAC;QACNC,CAAG;QACH1uB,KAAKqT,SAAS,EAAE;UACdpT,KAAKD,IAAI,CAACqT;QACZ;MACF,EAAE;IACJ;IAEAhV,KAAM6sB,MAAK,CAACnqB,IAAI,CAACd;EACnB;EAOA0uB,SAAUtwB,MAAK,EAAEuwB,UAAU,EAAE;IAC3B,MAAMrmB,QAAQlK,KAAM6sB,MAAK,GAAG7sB,MAAM6sB,KAAK,CAAC/O,OAAO,CAACyS,UAAc,KAAC,CAAC;IAChE,IAAIrmB,UAAU,CAAC,CAAG;MAChBlK,MAAM6sB,KAAK,CAAChV,MAAM,CAAC3N,KAAO;;EAE9B;EAQA1D,UAAUxG,KAAK,EAAE4B,IAAI,EAAE4F,OAAO,EAAE;IAC9B5F,IAAK+rB,SAAQ,GAAGnmB,QAAQmmB,QAAQ;IAChC/rB,IAAKooB,SAAQ,GAAGxiB,QAAQwiB,QAAQ;IAChCpoB,IAAKwjB,OAAM,GAAG5d,QAAQ4d,MAAM;EAC9B;EAUA1f,OAAO1F,KAAK,EAAEwd,KAAK,EAAED,MAAM,EAAEiT,UAAU,EAAE;IACvC,IAAI,CAACxwB,KAAO;MACV;;IAGF,MAAMkwB,UAAUO,SAAUzwB,OAAMwH,OAAO,CAACkmB,MAAM,CAACwC,OAAO;IACtD,MAAMtC,iBAAiBhtB,IAAKoC,IAAG,CAACwa,KAAQ0S,WAAQ1S,KAAK,EAAE;IACvD,MAAMqQ,kBAAkBjtB,IAAKoC,IAAG,CAACua,MAAS2S,WAAQ3S,MAAM,EAAE;IAC1D,MAAMsP,QAAQiB,gBAAiB9tB,OAAM6sB,KAAK;IAC1C,MAAM6D,gBAAgB7D,MAAMsB,QAAQ;IACpC,MAAMwC,kBAAkB9D,MAAMxR,UAAU;IAIxCuV,KAAK5wB,KAAM6sB,MAAK,EAAEJ,GAAO;MACvB,IAAI,OAAOA,IAAIoE,YAAY,KAAK,UAAY;QAC1CpE,IAAIoE,YAAY;;IAEpB;IA6BA,MAAMC,0BAA0BJ,aAAc7tB,OAAM,CAAC,CAACuhB,OAAO8I,IAC3DA,UAAKT,GAAG,CAACjlB,OAAO,IAAI0lB,KAAKT,GAAG,CAACjlB,OAAO,CAACqf,OAAO,KAAK,KAAK,GAAGzC,KAAQA,WAAQ,CAAC,EAAE,CAAM;IAEpF,MAAMmJ,SAAS5mB,MAAOqP,OAAM,CAAC;MAC3B2Y,UAAYnR;MACZqR,WAAatR;MACb2S;MACAtC;MACAC;MACAL,cAAcI,iBAAiB,CAAIkD;MACnCrD,eAAeI,eAAkB;IACnC;IACA,MAAMQ,UAAa1nB,UAAOyB,MAAM,CAAC,EAAI8nB;IACrC5B,iBAAiBD,YAAYoC,SAAUD;IACvC,MAAMxb,YAAYrO,MAAOyB,OAAM,CAAC;MAC9BimB;MACAU,CAAGnB;MACHqB,CAAGpB;MACH5kB,GAAGinB,QAAQ5mB,IAAI;MACfJ,GAAGgnB,QAAQ/mB;KACV+mB;IAEH,MAAM/jB,MAASmhB,iBAAcoD,aAAc9X,OAAM,CAAC+X,eAAkBpD;IAGpEoC,SAAS9C,KAAMc,SAAQ,EAAE3Y,WAAWuY,MAAQphB;IAG5CwjB,QAASe,gBAAe1b,WAAWuY,MAAQphB;IAG3C,IAAIwjB,QAASgB,kBAAiB3b,SAAWuY,UAAQphB,MAAS;MAExDwjB,QAASe,gBAAe1b,WAAWuY,MAAQphB;;IAG7CijB,gBAAiBpa;IAGjBgb,WAAWnD,KAAMoB,WAAU,EAAEjZ,WAAWuY,MAAQphB;IAGhD6I,SAAU/L,EAAC,IAAI+L,UAAU+Z,CAAC;IAC1B/Z,SAAU9L,EAAC,IAAI8L,UAAUia,CAAC;IAE1Be,WAAWnD,KAAMqB,eAAc,EAAElZ,WAAWuY,MAAQphB;IAEpDnM,MAAMgV,SAAS,GAAG;MAChB1L,MAAM0L,UAAU1L,IAAI;MACpBH,KAAK6L,UAAU7L,GAAG;MAClBC,OAAO4L,SAAU1L,KAAI,GAAG0L,UAAU+Z,CAAC;MACnC1lB,QAAQ2L,SAAU7L,IAAG,GAAG6L,UAAUia,CAAC;MACnC1R,QAAQvI,UAAUia,CAAC;MACnBzR,OAAOxI,UAAU+Z;IACnB;IAGA6B,KAAK/D,KAAM7X,UAAS,EAAG0Y,MAAW;MAChC,MAAMjB,MAAMiB,OAAOjB,GAAG;MACtB9lB,OAAOyB,MAAM,CAACqkB,GAAKzsB,QAAMgV,SAAS;MAClCyX,IAAI/mB,MAAM,CAACsP,UAAU+Z,CAAC,EAAE/Z,UAAUia,CAAC,EAAE;QAAC3lB,IAAM;QAAGH,GAAK;QAAGC,KAAO;QAAGC,MAAQ;MAAC;IAC5E;EACF;AACF,CAAE;AC9ba,MAAM0nB;EAOnBC,cAAeC,OAAM,EAAErP,WAAW,EAAE;EAQpCsP,eAAe7b,OAAO,EAAE;IACtB,OAAO,KAAK;EACd;EASA8b,iBAAiBnxB,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EAQxCC,oBAAoBrxB,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EAK3CE,mBAAsB;IACpB,OAAO;EACT;EASAC,eAAexjB,OAAO,EAAEyP,KAAK,EAAED,MAAM,EAAEqE,WAAW,EAAE;IAClDpE,QAAQ5c,KAAKoC,GAAG,CAAC,CAAGwa,WAASzP,QAAQyP,KAAK;IAC1CD,MAASA,aAAUxP,QAAQwP,MAAM;IACjC,OAAO;MACLC;MACAD,MAAQ3c,OAAKoC,GAAG,CAAC,CAAG4e,gBAAchhB,KAAKoE,KAAK,CAACwY,KAAQoE,kBAAerE,MAAM;IAC5E;EACF;EAMAiU,WAAWP,MAAM,EAAE;IACjB,OAAO,IAAI;EACb;EAMAQ,aAAaprB,MAAM,EAAE,CAErB;AACF;ACtEe,MAAMqrB,aAAsBX;EACzCC,eAAepvB,IAAI,EAAE;IAInB,OAAOA,QAAQA,KAAK+Q,UAAU,IAAI/Q,KAAK+Q,UAAU,CAAC,SAAS,IAAI;EACjE;EACA8e,aAAaprB,MAAM,EAAE;IACnBA,OAAOmB,OAAO,CAACV,SAAS,GAAG,KAAK;EAClC;AACF;ACTA,MAAM6qB,WAAc;AAOpB,MAAMC,WAAc;EAClBC,UAAY;EACZC,SAAW;EACXC,QAAU;EACVC,YAAc;EACdC,WAAa;EACbC,WAAa;EACbC,SAAW;EACXC,YAAc;EACdC,UAAY;AACd;AAEA,MAAMC,gBAAgBpqB,SAASA,KAAU,SAAI,IAAIA,KAAU;AAQ3D,SAASqqB,WAAWtB,MAAM,EAAErP,WAAW,EAAE;EACvC,MAAMM,QAAQ+O,OAAO/O,KAAK;EAI1B,MAAMsQ,eAAevB,MAAOwB,aAAY,CAAC;EACzC,MAAMC,cAAczB,MAAOwB,aAAY,CAAC;EAGxCxB,MAAM,CAACU,YAAY,GAAG;IACpBjxB,OAAS;MACP6c,MAAQiV;MACRhV,KAAOkV;MACPxQ,KAAO;QACL2E,SAAS3E,MAAM2E,OAAO;QACtBtJ,QAAQ2E,MAAM3E,MAAM;QACpBC,OAAO0E,MAAM1E;MACf;IACF;EACF;EAKA0E,MAAM2E,OAAO,GAAG3E,KAAM2E,QAAO,IAAI;EAEjC3E,MAAMyQ,SAAS,GAAGzQ,KAAMyQ,UAAS,IAAI;EAErC,IAAIL,cAAcI,WAAc;IAC9B,MAAME,eAAeC,aAAa5B,MAAQ;IAC1C,IAAI2B,iBAAiB9yB,SAAW;MAC9BmxB,OAAOzT,KAAK,GAAGoV;;;EAInB,IAAIN,cAAcE,YAAe;IAC/B,IAAIvB,MAAO/O,MAAK,CAAC3E,MAAM,KAAK,EAAI;MAI9B0T,OAAO1T,MAAM,GAAG0T,OAAOzT,KAAK,IAAIoE,eAAe;KAC1C;MACL,MAAMkR,gBAAgBD,aAAa5B,MAAQ;MAC3C,IAAI6B,kBAAkBhzB,SAAW;QAC/BmxB,OAAO1T,MAAM,GAAGuV;;;;EAKtB,OAAO7B;AACT;AAIA,MAAM8B,uBAAuBC,4BAA+B;EAACC,SAAS;AAAI,IAAI,KAAK;AAEnF,SAASC,YAAYC,IAAI,EAAEhzB,IAAI,EAAEixB,QAAQ,EAAE;EACzC,IAAI+B,IAAM;IACRA,IAAKhC,iBAAgB,CAAChxB,MAAMixB,QAAU2B;;AAE1C;AAEA,SAASK,eAAepzB,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EAC7C,IAAIpxB,SAASA,KAAMixB,OAAM,EAAE;IACzBjxB,MAAMixB,MAAM,CAACI,mBAAmB,CAAClxB,MAAMixB,QAAU2B;;AAErD;AAEA,SAASM,eAAgB7wB,MAAK,EAAExC,KAAK,EAAE;EACrC,MAAMG,OAAOyxB,WAAW,CAACpvB,MAAMrC,IAAI,CAAC,IAAIqC,MAAMrC,IAAI;EAClD,MAAM;IAAC8I,CAAC;IAAEC;EAAAA,CAAE,GAAGgjB,oBAAoB1pB,KAAOxC;EAC1C,OAAO;IACLG;IACAH;IACAszB,MAAQ9wB;IACRyG,CAAGA,QAAMnJ,SAAYmJ,OAAI,IAAI;IAC7BC,CAAGA,QAAMpJ,SAAYoJ,OAAI;EAC3B;AACF;AAEA,SAASqqB,gBAAiBC,SAAQ,EAAEvC,MAAM,EAAE;EAC1C,KAAK,MAAMkC,QAAQK,QAAU;IAC3B,IAAIL,IAASlC,eAAUkC,IAAKM,SAAQ,CAACxC,MAAS;MAC5C,OAAO,IAAI;;EAEf;AACF;AAEA,SAASyC,qBAAqB1zB,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EACnD,MAAMH,SAASjxB,MAAMixB,MAAM;EAC3B,MAAM0C,QAAW,OAAIC,gBAAiBC,QAAW;IAC/C,IAAIC,UAAU,KAAK;IACnB,KAAK,MAAMvZ,SAASsZ,OAAS;MAC3BC,UAAUA,OAAWP,qBAAiBhZ,KAAMwZ,WAAU,EAAE9C;MACxD6C,UAAUA,OAAW,KAACP,gBAAiBhZ,OAAMyZ,YAAY,EAAE/C;IAC7D;IACA,IAAI6C,OAAS;MACX1C;;EAEJ;EACAuC,QAASM,QAAO,CAACC,QAAU;IAACC,WAAW,IAAI;IAAEC,SAAS;EAAI;EAC1D,OAAOT;AACT;AAEA,SAASU,qBAAqBr0B,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EACnD,MAAMH,SAASjxB,MAAMixB,MAAM;EAC3B,MAAM0C,QAAW,OAAIC,gBAAiBC,QAAW;IAC/C,IAAIC,UAAU,KAAK;IACnB,KAAK,MAAMvZ,SAASsZ,OAAS;MAC3BC,UAAUA,OAAWP,qBAAiBhZ,KAAMyZ,aAAY,EAAE/C;MAC1D6C,UAAUA,OAAW,KAACP,gBAAiBhZ,OAAMwZ,UAAU,EAAE9C;IAC3D;IACA,IAAI6C,OAAS;MACX1C;;EAEJ;EACAuC,QAASM,QAAO,CAACC,QAAU;IAACC,WAAW,IAAI;IAAEC,SAAS;EAAI;EAC1D,OAAOT;AACT;AAEA,MAAMW,qBAAqB,IAAI30B;AAC/B,IAAI40B,mBAAsB;AAE1B,SAASC,cAAiB;EACxB,MAAMC,MAAMvzB,OAAOwzB,gBAAgB;EACnC,IAAID,QAAQF,mBAAqB;IAC/B;;EAEFA,mBAAsBE;EACtBH,mBAAmB9zB,OAAO,CAAC,CAACm0B,QAAQ30B,KAAU;IAC5C,IAAIA,MAAM40B,uBAAuB,KAAKH,GAAK;MACzCE;;EAEJ;AACF;AAEA,SAASE,6BAA8B70B,MAAK,EAAE20B,MAAM,EAAE;EACpD,IAAI,CAACL,kBAAmBnsB,KAAI,EAAE;IAC5BjH,MAAOiwB,iBAAgB,CAAC,QAAUqD;;EAEpCF,kBAAmBhyB,IAAG,CAACtC,KAAO20B;AAChC;AAEA,SAASG,gCAAgC90B,KAAK,EAAE;EAC9Cs0B,mBAAmBjxB,MAAM,CAACrD;EAC1B,IAAI,CAACs0B,kBAAmBnsB,KAAI,EAAE;IAC5BjH,MAAOmwB,oBAAmB,CAAC,QAAUmD;;AAEzC;AAEA,SAASO,qBAAqB/0B,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EACnD,MAAMH,SAASjxB,MAAMixB,MAAM;EAC3B,MAAM+D,YAAY/D,UAAUgE,cAAehE;EAC3C,IAAI,CAAC+D,SAAW;IACd;;EAEF,MAAML,MAASO,aAAU,CAAC1X,OAAOD,MAAW;IAC1C,MAAMwR,IAAIiG,UAAUG,WAAW;IAC/B/D,SAAS5T,KAAOD;IAChB,IAAIwR,IAAIiG,SAAUG,YAAW,EAAE;MAQ7B/D;;GAEDlwB;EAGH,MAAMyyB,QAAW,OAAIyB,cAAevB,QAAW;IAC7C,MAAMtZ,QAAQsZ,OAAO,CAAC,CAAE;IACxB,MAAMrW,KAAQjD,SAAM8a,WAAW,CAAC7X,KAAK;IACrC,MAAMD,MAAShD,SAAM8a,WAAW,CAAC9X,MAAM;IAIvC,IAAIC,UAAU,CAAKD,eAAW,CAAG;MAC/B;;IAEFoX,OAAOnX,KAAOD;EAChB;EACAoW,SAASM,OAAO,CAACe;EACjBH,8BAA8B70B,KAAO20B;EAErC,OAAOhB;AACT;AAEA,SAAS2B,gBAAgBt1B,KAAK,EAAEG,IAAI,EAAEwzB,QAAQ,EAAE;EAC9C,IAAIA,QAAU;IACZA,SAAS4B,UAAU;;EAErB,IAAIp1B,SAAS,QAAU;IACrB20B,+BAAgC90B;;AAEpC;AAEA,SAASw1B,qBAAqBx1B,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;EACnD,MAAMH,SAASjxB,MAAMixB,MAAM;EAC3B,MAAMwE,QAAQP,SAAU,CAAC1yB,KAAU;IAIjC,IAAIxC,KAAMgP,IAAG,KAAK,IAAI,EAAE;MACtBoiB,SAASiC,gBAAgB7wB,KAAOxC;;GAEjCA;EAEHkzB,YAAYjC,QAAQ9wB,IAAMs1B;EAE1B,OAAOA;AACT;AAMe,MAAMC,WAAoB3E;EAOvCC,cAAeC,OAAM,EAAErP,WAAW,EAAE;IAIlC,MAAMvM,UAAU4b,MAAUA,WAAOte,UAAU,IAAIse,OAAOte,UAAU,CAAC;IASjE,IAAI0C,OAAWA,YAAQ4b,MAAM,KAAKA,MAAQ;MAGxCsB,WAAWtB,MAAQrP;MACnB,OAAOvM;;IAGT,OAAO,IAAI;EACb;EAKA6b,eAAe7b,OAAO,EAAE;IACtB,MAAM4b,SAAS5b,QAAQ4b,MAAM;IAC7B,IAAI,CAACA,MAAM,CAACU,YAAY,EAAE;MACxB,OAAO,KAAK;;IAGd,MAAMjxB,OAAUuwB,SAAM,CAACU,YAAY,CAACjxB,OAAO;IAC3C,CAAC,UAAU,QAAQ,CAACF,OAAO,CAAE+D,IAAS;MACpC,MAAM2D,QAAQxH,OAAO,CAAC6D,IAAK;MAC3B,IAAIuV,cAAc5R,KAAQ;QACxB+oB,OAAO0E,eAAe,CAACpxB;OAClB;QACL0sB,MAAO2E,aAAY,CAACrxB,IAAM2D;;IAE9B;IAEA,MAAMga,KAAQxhB,WAAQwhB,KAAK,IAAI,EAAC;IAChCvb,OAAOC,IAAI,CAACsb,OAAO1hB,OAAO,CAAEyG,GAAQ;MAClCgqB,OAAO/O,KAAK,CAACjb,IAAI,GAAGib,KAAK,CAACjb,GAAI;IAChC;IAOAgqB,MAAOzT,MAAK,GAAGyT,OAAOzT,KAAK;IAE3B,OAAOyT,MAAM,CAACU,WAAY;IAC1B,OAAO,IAAI;EACb;EAQAR,iBAAiBnxB,KAAK,EAAEG,IAAI,EAAEixB,QAAQ,EAAE;IAEtC,IAAI,CAACC,mBAAmB,CAACrxB,KAAOG;IAEhC,MAAM01B,UAAU71B,MAAM81B,QAAQ,KAAK91B,KAAM81B,SAAQ,GAAG,EAAC;IACrD,MAAMC,QAAW;MACfC,MAAQtC;MACRuC,MAAQ5B;MACRM,MAAQI;IACV;IACA,MAAM9K,OAAU8L,WAAQ,CAAC51B,KAAK,IAAIq1B;IAClCK,OAAO,CAAC11B,KAAK,GAAG8pB,QAAQjqB,OAAOG,IAAMixB;EACvC;EAOAC,mBAAoBrxB,MAAK,EAAEG,IAAI,EAAE;IAC/B,MAAM01B,UAAU71B,MAAM81B,QAAQ,KAAK91B,KAAM81B,SAAQ,GAAG,EAAC;IACrD,MAAML,QAAQI,OAAO,CAAC11B,IAAK;IAE3B,IAAI,CAACs1B,KAAO;MACV;;IAGF,MAAMM,QAAW;MACfC,MAAQV;MACRW,MAAQX;MACRX,MAAQW;IACV;IACA,MAAMrL,OAAU8L,WAAQ,CAAC51B,KAAK,IAAIizB;IAClCnJ,QAAQjqB,OAAOG,IAAMs1B;IACrBI,OAAO,CAAC11B,KAAK,GAAGL;EAClB;EAEAwxB,mBAAsB;IACpB,OAAOpwB,OAAOwzB,gBAAgB;EAChC;EAQAnD,eAAeN,MAAM,EAAEzT,KAAK,EAAED,MAAM,EAAEqE,WAAW,EAAE;IACjD,OAAO2P,eAAeN,MAAQzT,SAAOD,MAAQqE;EAC/C;EAKA4P,WAAWP,MAAM,EAAE;IACjB,MAAM+D,YAAY/D,UAAUgE,cAAehE;IAC3C,OAAO,CAAC,EAAE+D,SAAaA,cAAUkB,WAAW,CAAD;EAC7C;AACF;AC/XO,SAASC,eAAgBlF,OAAM,EAAE;EACtC,IAAI,CAACmF,eAAsB,aAAOC,eAAoB,oBAAepF,kBAAkBoF,eAAkB;IACvG,OAAO3E;;EAET,OAAOgE;AACT;ACLe,MAAMY;EAEnB,OAAOzvB,WAAW,EAAG;EACrB,OAAO0vB,gBAAgBz2B,SAAU;EAEjCmJ,CAAU;EACVC,CAAU;EACVzD,SAAS,KAAK;EACd+B,OAAW;EACXM,WAAwC;EAExC0uB,gBAAgB1L,gBAAyB,EAAS;IAChD,MAAM;MAAC7hB;MAAGC;IAAAA,CAAE,GAAG,IAAI,CAACmiB,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAEP;IACzC,OAAO;MAAC7hB;MAAGC;IAAC;EACd;EAEAutB,QAAW;IACT,OAAOvQ,SAAS,IAAI,CAACjd,CAAC,KAAKid,QAAS,KAAI,CAAChd,CAAC;EAC5C;EASAmiB,QAASrjB,MAAe,EAAE0uB,KAAe,EAAoC;IAC3E,MAAMz2B,QAAQ,IAAI,CAAC6H,WAAW;IAC9B,IAAI,CAAC4uB,KAAS,KAACz2B,KAAO;;MAEpB,OAAO,IAAI;;IAEb,MAAM02B,MAA+B,EAAC;IACtC3uB,KAAMxH,QAAO,CAAE+D,IAAS;MACtBoyB,GAAG,CAACpyB,KAAK,GAAGtE,KAAK,CAACsE,IAAK,KAAItE,KAAK,CAACsE,KAAK,CAACkB,MAAM,KAAKxF,KAAK,CAACsE,KAAK,CAACgB,GAAG,GAAG,IAAI,CAAChB,IAAe;IAC1F;IACA,OAAOoyB;EACT;AACF;AC5BO,SAASC,SAASnuB,KAAK,EAAE6Q,KAAK,EAAE;EACrC,MAAMud,QAAWpuB,SAAMjB,OAAO,CAAC8R,KAAK;EACpC,MAAMwd,qBAAqBC,iBAAkBtuB;EAC7C,MAAMuuB,aAAap2B,IAAKC,IAAG,CAACg2B,QAASI,cAAa,IAAIH,kBAAoBA;EAC1E,MAAMI,eAAeL,SAASM,KAAK,CAACC,OAAO,GAAGC,gBAAgB/d,SAAS,EAAE;EACzE,MAAMge,kBAAkBJ,aAAaz1B,MAAM;EAC3C,MAAM81B,QAAQL,YAAY,CAAC,CAAE;EAC7B,MAAMxZ,IAAOwZ,eAAY,CAACI,kBAAkB,CAAE;EAC9C,MAAME,WAAW,EAAE;EAGnB,IAAIF,kBAAkBN,UAAY;IAChCS,UAAWne,QAAOke,QAAUN,gBAAcI,eAAkBN;IAC5D,OAAOQ;;EAGT,MAAMjW,UAAUmW,gBAAiBR,eAAc5d,KAAO0d;EAEtD,IAAIM,kBAAkB,CAAG;IACvB,IAAI51B,CAAGuI;IACP,MAAM0tB,eAAkBL,qBAAkB,CAAI12B,QAAKg3B,KAAK,CAAEla,QAAO6Z,KAAI,KAAMD,eAAkB,SAAM,IAAI;IACvG9X,IAAKlG,QAAOke,UAAUjW,OAASzH,gBAAc6d,mBAAmB,CAAIJ,WAAQI,eAAe,EAAEJ;IAC7F,KAAK71B,IAAI,GAAGuI,IAAOqtB,qBAAkB,CAAC,EAAE51B,IAAIuI,MAAMvI,CAAK;MACrD8d,IAAKlG,QAAOke,QAAUjW,WAAS2V,YAAY,CAACx1B,EAAE,EAAEw1B,YAAY,CAACx1B,IAAI,CAAE;IACrE;IACA8d,IAAKlG,QAAOke,QAAUjW,WAAS7D,IAAM5D,gBAAc6d,mBAAmBre,KAAM7X,OAAM,GAAGic,OAAOia,eAAe;IAC3G,OAAOH;;EAEThY,KAAKlG,OAAOke,QAAUjW;EACtB,OAAOiW;AACT;AAEA,SAAST,kBAAkBtuB,KAAK,EAAE;EAChC,MAAMgU,MAAShU,SAAMjB,OAAO,CAACiV,MAAM;EACnC,MAAMob,aAAapvB,MAAMqvB,SAAS;EAClC,MAAMC,WAAWtvB,MAAMwQ,OAAO,GAAG4e,cAAcpb,SAAS,CAAI,IAAC,CAAD;EAC5D,MAAMub,WAAWvvB,KAAMwvB,WAAU,GAAGJ;EACpC,OAAOj3B,KAAKoE,KAAK,CAACpE,IAAKC,IAAG,CAACk3B,QAAUC;AACvC;AAOA,SAASN,gBAAiBR,aAAY,EAAE5d,KAAK,EAAE0d,UAAU,EAAE;EACzD,MAAMkB,mBAAmBC,cAAejB;EACxC,MAAM3V,UAAUjI,KAAM7X,OAAM,GAAGu1B;EAI/B,IAAI,CAACkB,gBAAkB;IACrB,OAAOt3B,KAAKoC,GAAG,CAACue,OAAS;;EAG3B,MAAM6W,UAAUC,UAAWH;EAC3B,KAAK,IAAIx2B,CAAI,MAAGuI,IAAOmuB,WAAQ32B,MAAM,GAAG,GAAGC,CAAIuI,SAAMvI,CAAK;IACxD,MAAMiC,SAASy0B,OAAO,CAAC12B,CAAE;IACzB,IAAIiC,SAAS4d,OAAS;MACpB,OAAO5d;;EAEX;EACA,OAAO/C,KAAKoC,GAAG,CAACue,OAAS;AAC3B;AAKA,SAAS8V,eAAgB/d,MAAK,EAAE;EAC9B,MAAMgf,SAAS,EAAE;EACjB,IAAI52B,CAAGuI;EACP,KAAKvI,IAAI,GAAGuI,IAAOqP,SAAM7X,MAAM,EAAEC,IAAIuI,MAAMvI,CAAK;IAC9C,IAAI4X,KAAK,CAAC5X,CAAE,EAACy1B,KAAK,EAAE;MAClBmB,OAAO51B,IAAI,CAAChB;;EAEhB;EACA,OAAO42B;AACT;AAQA,SAASb,WAAWne,KAAK,EAAEke,QAAQ,EAAEN,YAAY,EAAE3V,OAAO,EAAE;EAC1D,IAAIzO,KAAQ;EACZ,IAAIsH,OAAO8c,YAAY,CAAC,CAAE;EAC1B,IAAIx1B;EAEJ6f,OAAU3gB,QAAK23B,IAAI,CAAChX;EACpB,KAAK7f,IAAI,CAAGA,MAAI4X,KAAM7X,OAAM,EAAEC,CAAK;IACjC,IAAIA,MAAM0Y,IAAM;MACdod,SAAS90B,IAAI,CAAC4W,KAAK,CAAC5X,CAAE;MACtBoR;MACAsH,IAAO8c,eAAY,CAACpkB,QAAQyO,OAAQ;;EAExC;AACF;AASA,SAAS/B,IAAKlG,MAAK,EAAEke,QAAQ,EAAEjW,OAAO,EAAEiX,UAAU,EAAEC,QAAQ,EAAE;EAC5D,MAAM33B,QAAQ6P,eAAe6nB,UAAY;EACzC,MAAM3vB,MAAMjI,IAAKC,IAAG,CAAC8P,eAAe8nB,UAAUnf,KAAM7X,OAAM,CAAG6X,QAAM7X,MAAM;EACzE,IAAIqR,KAAQ;EACZ,IAAIrR,QAAQC,CAAG0Y;EAEfmH,OAAU3gB,QAAK23B,IAAI,CAAChX;EACpB,IAAIkX,QAAU;IACZh3B,SAASg3B,QAAWD;IACpBjX,UAAU9f,MAASb,QAAKoE,KAAK,CAACvD,MAAS8f;;EAGzCnH,IAAOtZ;EAEP,OAAOsZ,OAAO,CAAG;IACftH;IACAsH,OAAOxZ,IAAKg3B,MAAK,CAAC92B,QAAQgS,KAAQyO;EACpC;EAEA,KAAK7f,IAAId,KAAKoC,GAAG,CAAClC,OAAO,CAAIY,OAAImH,KAAKnH,CAAK;IACzC,IAAIA,MAAM0Y,IAAM;MACdod,SAAS90B,IAAI,CAAC4W,KAAK,CAAC5X,CAAE;MACtBoR;MACAsH,OAAOxZ,IAAKg3B,MAAK,CAAC92B,QAAQgS,KAAQyO;;EAEtC;AACF;AAMA,SAAS4W,cAAezgB,IAAG,EAAE;EAC3B,MAAMghB,MAAMhhB,IAAIjW,MAAM;EACtB,IAAIC,CAAGsnB;EAEP,IAAI0P,MAAM,CAAG;IACX,OAAO,KAAK;;EAGd,KAAK1P,OAAOtR,GAAG,CAAC,CAAE,GAAEhW,CAAI,IAAC,EAAEA,IAAIg3B,GAAK,IAAEh3B,CAAG;IACvC,IAAIgW,GAAG,CAAChW,CAAE,IAAGgW,GAAG,CAAChW,IAAI,CAAE,MAAKsnB,IAAM;MAChC,OAAO,KAAK;;EAEhB;EACA,OAAOA;AACT;ACjKA,MAAM2P,eAAgBC,KAAUA,cAAU,SAAS,OAAUA,aAAU,OAAU,YAASA,KAAK;AAC/F,MAAMC,iBAAiB,CAACpwB,OAAO+S,MAAMiB,MAAWjB,cAAS,SAASA,IAAS,cAAS/S,KAAK,CAAC+S,KAAK,GAAGiB,SAAShU,KAAK,CAAC+S,KAAK,GAAGiB,MAAM;AAC/H,MAAMqc,gBAAgB,CAACC,WAAa9B,oBAAkBr2B,KAAKC,GAAG,CAACo2B,iBAAiB8B,WAAaA;AAY7F,SAASC,OAAOthB,GAAG,EAAEuhB,QAAQ,EAAE;EAC7B,MAAMX,SAAS,EAAE;EACjB,MAAMY,YAAYxhB,GAAIjW,OAAM,GAAGw3B;EAC/B,MAAMP,MAAMhhB,IAAIjW,MAAM;EACtB,IAAIC,CAAI;EAER,OAAOA,IAAIg3B,GAAKh3B,OAAKw3B,SAAW;IAC9BZ,OAAO51B,IAAI,CAACgV,GAAG,CAAC9W,IAAKoE,MAAK,CAACtD,CAAG;EAChC;EACA,OAAO42B;AACT;AAOA,SAASa,mBAAoB1wB,MAAK,EAAEyB,KAAK,EAAEkvB,eAAe,EAAE;EAC1D,MAAM33B,MAASgH,SAAM6Q,KAAK,CAAC7X,MAAM;EACjC,MAAM43B,UAAaz4B,QAAKC,GAAG,CAACqJ,OAAOzI,MAAS;EAC5C,MAAMX,QAAQ2H,MAAMyV,WAAW;EAC/B,MAAMrV,MAAMJ,MAAM0V,SAAS;EAC3B,MAAMmb,UAAU;EAChB,IAAIC,YAAY9wB,KAAM8Q,gBAAe,CAAC8f;EACtC,IAAI5c;EAEJ,IAAI2c,eAAiB;IACnB,IAAI33B,WAAW,CAAG;MAChBgb,SAAS7b,IAAKoC,IAAG,CAACu2B,YAAYz4B,OAAO+H,GAAM0wB;KACtC,UAAIrvB,UAAU,CAAG;MACtBuS,SAAS,CAAChU,MAAM8Q,eAAe,CAAC,KAAKggB,SAAQ,IAAK;KAC7C;MACL9c,MAAS,GAAC8c,UAAY9wB,SAAM8Q,eAAe,CAAC8f,aAAa,EAAC,IAAK;;IAEjEE,aAAaF,UAAanvB,WAAQuS,MAAS,IAACA,MAAM;IAGlD,IAAI8c,SAAYz4B,WAAQw4B,OAAWC,gBAAY1wB,MAAMywB,OAAS;MAC5D;;;EAGJ,OAAOC;AACT;AAMA,SAASC,eAAeC,MAAM,EAAEh4B,MAAM,EAAE;EACtCmvB,IAAK6I,SAASjkB,KAAU;IACtB,MAAMkkB,KAAKlkB,MAAMkkB,EAAE;IACnB,MAAMC,QAAQD,EAAGj4B,OAAM,GAAG;IAC1B,IAAIC;IACJ,IAAIi4B,QAAQl4B,MAAQ;MAClB,KAAKC,CAAI,MAAGA,CAAIi4B,UAAO,EAAEj4B,CAAG;QAC1B,OAAO8T,MAAM3K,IAAI,CAAC6uB,EAAE,CAACh4B,EAAE,CAAC;MAC1B;MACAg4B,EAAG7hB,OAAM,CAAC,CAAG8hB;;EAEjB;AACF;AAKA,SAASC,iBAAkBpyB,QAAO,EAAE;EAClC,OAAOA,QAAQqyB,SAAS,GAAGryB,OAAQqwB,WAAU,GAAG,CAAC;AACnD;AAKA,SAASiC,eAAetyB,OAAO,EAAEuyB,QAAQ,EAAE;EACzC,IAAI,CAACvyB,OAAQqf,QAAO,EAAE;IACpB,OAAO;;EAGT,MAAMmT,IAAOC,UAAOzyB,OAAQwyB,KAAI,EAAED;EAClC,MAAM7J,UAAUO,SAAUjpB,SAAQ0oB,OAAO;EACzC,MAAMgK,QAAQ/yB,OAAQK,SAAQ2a,IAAI,IAAI3a,QAAQ2a,IAAI,CAAC1gB,MAAM,GAAG,CAAC;EAE7D,OAAOy4B,KAASF,QAAKG,UAAU,GAAIjK,QAAQ3S,MAAM;AACnD;AAEA,SAAS6c,kBAAmBzsB,OAAM,EAAElF,KAAK,EAAE;EACzC,OAAOmF,cAAcD,MAAQ;IAC3BlF;IACAtI,IAAM;EACR;AACF;AAEA,SAASk6B,kBAAkB1sB,MAAM,EAAEzD,KAAK,EAAEnI,IAAI,EAAE;EAC9C,OAAO6L,cAAcD,MAAQ;IAC3B5L;IACAmI;IACA/J,IAAM;EACR;AACF;AAEA,SAASm6B,WAAW1B,KAAK,EAAE5O,QAAQ,EAAEphB,OAAO,EAAE;EAE5C,IAAI+tB,MAAM4D,kBAAmB3B;EAC7B,IAAIhwB,OAAYohB,iBAAa,WAAa,CAACphB,WAAWohB,aAAa,OAAU;IAC3E2M,MAAMgC,YAAahC;;EAErB,OAAOA;AACT;AAEA,SAAS6D,UAAU/xB,KAAK,EAAEgU,MAAM,EAAEuN,QAAQ,EAAE4O,KAAK,EAAE;EACjD,MAAM;IAACzvB,GAAG;IAAEG,IAAI;IAAED,MAAM;IAAED,KAAK;IAAEpJ;EAAK,CAAC,GAAGyI;EAC1C,MAAM;IAACuM;IAAWzH;EAAAA,CAAO,GAAGvN;EAC5B,IAAI0f,QAAW;EACf,IAAIoE,UAAU2W,MAAQC;EACtB,MAAMnd,SAASlU,MAASF;EACxB,MAAMqU,QAAQpU,KAAQE;EAEtB,IAAIb,MAAM0S,YAAY,EAAI;IACxBsf,MAASE,kBAAe/B,OAAOtvB,IAAMF;IAErC,IAAI3C,SAASujB,QAAW;MACtB,MAAM4Q,iBAAiBj0B,MAAOC,KAAI,CAACojB,SAAS,CAAC,CAAE;MAC/C,MAAM9hB,QAAQ8hB,QAAQ,CAAC4Q,cAAe;MACtCF,SAASntB,MAAM,CAACqtB,eAAe,CAACvhB,gBAAgB,CAACnR,SAASqV,MAASd;KAC9D,UAAIuN,aAAa,QAAU;MAChC0Q,MAAS,GAAC1lB,WAAU3L,MAAM,GAAG2L,UAAU7L,GAAE,IAAK,IAAIoU,MAASd;KACtD;MACLie,MAAS7B,kBAAepwB,OAAOuhB,QAAUvN;;IAE3CqH,WAAW1a,KAAQE;GACd;IACL,IAAI7C,SAASujB,QAAW;MACtB,MAAM4Q,iBAAiBj0B,MAAOC,KAAI,CAACojB,SAAS,CAAC,CAAE;MAC/C,MAAM9hB,QAAQ8hB,QAAQ,CAAC4Q,cAAe;MACtCH,SAASltB,MAAM,CAACqtB,eAAe,CAACvhB,gBAAgB,CAACnR,SAASsV,KAAQf;KAC7D,UAAIuN,aAAa,QAAU;MAChCyQ,MAAS,GAACzlB,WAAU1L,IAAI,GAAG0L,UAAU5L,KAAI,IAAK,IAAIoU,KAAQf;KACrD;MACLge,MAAS5B,kBAAepwB,OAAOuhB,QAAUvN;;IAE3Cie,MAASC,kBAAe/B,OAAOvvB,MAAQF;IACvCuW,WAAWsK,QAAa,cAAS,CAAChJ,UAAUA,OAAO;;EAErD,OAAO;IAACyZ;IAAQC;IAAQ5W;IAAUpE;EAAQ;AAC5C;AAEe,MAAMmb,KAAcvE;EAGjC92B,YAAY6E,GAAG,EAAE;IACf,KAAK;IAGL,IAAI,CAACsH,EAAE,GAAGtH,IAAIsH,EAAE;IAEhB,IAAI,CAACxL,IAAI,GAAGkE,IAAIlE,IAAI;IAEpB,IAAI,CAACqH,OAAO,GAAG1H;IAEf,IAAI,CAACkP,GAAG,GAAG3K,IAAI2K,GAAG;IAElB,IAAI,CAAChP,KAAK,GAAGqE,IAAIrE,KAAK;IAItB,IAAI,CAACmJ,GAAG,GAAGrJ;IAEX,IAAI,CAACuJ,MAAM,GAAGvJ;IAEd,IAAI,CAACwJ,IAAI,GAAGxJ;IAEZ,IAAI,CAACsJ,KAAK,GAAGtJ;IAEb,IAAI,CAAC0d,KAAK,GAAG1d;IAEb,IAAI,CAACyd,MAAM,GAAGzd;IACd,IAAI,CAACg7B,QAAQ,GAAG;MACdxxB,IAAM;MACNF,KAAO;MACPD,GAAK;MACLE,MAAQ;IACV;IAEA,IAAI,CAACya,QAAQ,GAAGhkB;IAEhB,IAAI,CAACikB,SAAS,GAAGjkB;IAEjB,IAAI,CAACi7B,UAAU,GAAGj7B;IAElB,IAAI,CAACk7B,aAAa,GAAGl7B;IAErB,IAAI,CAACm7B,WAAW,GAAGn7B;IAEnB,IAAI,CAACo7B,YAAY,GAAGp7B;IAIpB,IAAI,CAACoL,IAAI,GAAGpL;IAEZ,IAAI,CAACq7B,aAAa,GAAGr7B;IACrB,IAAI,CAACe,GAAG,GAAGf;IACX,IAAI,CAACkD,GAAG,GAAGlD;IACX,IAAI,CAACs7B,MAAM,GAAGt7B;IAEd,IAAI,CAACwZ,KAAK,GAAG,EAAE;IAEf,IAAI,CAAC+hB,cAAc,GAAG,IAAI;IAE1B,IAAI,CAACC,WAAW,GAAG,IAAI;IAEvB,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACtiB,OAAO,GAAG;IACf,IAAI,CAACgf,UAAU,GAAG;IAClB,IAAI,CAACuD,iBAAiB,GAAG,EAAC;IAE1B,IAAI,CAACtd,WAAW,GAAGpe;IAEnB,IAAI,CAACqe,SAAS,GAAGre;IACjB,IAAI,CAAC0pB,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACiS,QAAQ,GAAG37B;IAChB,IAAI,CAAC47B,QAAQ,GAAG57B;IAChB,IAAI,CAAC67B,aAAa,GAAG77B;IACrB,IAAI,CAAC87B,aAAa,GAAG97B;IACrB,IAAI,CAAC+7B,YAAY,GAAG;IACpB,IAAI,CAACC,YAAY,GAAG;IACpB,IAAI,CAACrjB,MAAM,GAAG,EAAC;IACf,IAAI,CAACsjB,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACnsB,QAAQ,GAAG9P;EAClB;EAMA+oB,KAAKrhB,OAAO,EAAE;IACZ,IAAI,CAACA,OAAO,GAAGA,QAAQw0B,UAAU,CAAC,IAAI,CAACrpB,UAAU;IAEjD,IAAI,CAACzH,IAAI,GAAG1D,QAAQ0D,IAAI;IAGxB,IAAI,CAACwwB,QAAQ,GAAG,IAAI,CAAC7oB,KAAK,CAACrL,QAAQ3G,GAAG;IACtC,IAAI,CAAC46B,QAAQ,GAAG,IAAI,CAAC5oB,KAAK,CAACrL,QAAQxE,GAAG;IACtC,IAAI,CAAC44B,aAAa,GAAG,IAAI,CAAC/oB,KAAK,CAACrL,QAAQy0B,YAAY;IACpD,IAAI,CAACN,aAAa,GAAG,IAAI,CAAC9oB,KAAK,CAACrL,QAAQ00B,YAAY;EACtD;EAQArpB,KAAM5E,IAAG,EAAE/D,KAAK,EAAE;IAChB,OAAO+D;EACT;EAOArC,aAAgB;IACd,IAAI;MAAC8vB,QAAQ;MAAED,QAAQ;MAAEG;MAAeD;IAAAA,CAAc,GAAG,IAAI;IAC7DD,QAAWS,mBAAgBT,QAAU3vB,SAAOE,iBAAiB;IAC7DwvB,QAAWU,mBAAgBV,QAAU1vB,SAAOC,iBAAiB;IAC7D4vB,aAAgBO,mBAAgBP,aAAe7vB,SAAOE,iBAAiB;IACvE0vB,aAAgBQ,mBAAgBR,aAAe5vB,SAAOC,iBAAiB;IACvE,OAAO;MACLnL,KAAKs7B,gBAAgBT,QAAUE;MAC/B54B,KAAKm5B,gBAAgBV,QAAUE;MAC/B9vB,YAAYnB,cAASgxB;MACrB5vB,YAAYpB,cAAS+wB;IACvB;EACF;EAQAvnB,UAAUzF,QAAQ,EAAE;IAElB,IAAI;MAAC5N;MAAKmC;MAAK6I;MAAYC;IAAAA,CAAW,GAAG,IAAI,CAACF,aAAa;IAC3D,IAAImI;IAEJ,IAAIlI,cAAcC,UAAY;MAC5B,OAAO;QAACjL;QAAKmC;MAAG;;IAGlB,MAAMo5B,QAAQ,IAAI,CAAC3vB,uBAAuB;IAC1C,KAAK,IAAI/K,CAAI,MAAGuI,IAAOmyB,SAAM36B,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAClDqS,KAAQqoB,QAAK,CAAC16B,CAAE,EAACiL,UAAU,CAACuH,SAAS,CAAC,IAAI,EAAEzF;MAC5C,IAAI,CAAC5C,UAAY;QACfhL,MAAMD,IAAKC,IAAG,CAACA,KAAKkT,MAAMlT,GAAG;;MAE/B,IAAI,CAACiL,UAAY;QACf9I,MAAMpC,IAAKoC,IAAG,CAACA,KAAK+Q,MAAM/Q,GAAG;;IAEjC;IAGAnC,MAAMiL,UAAcjL,UAAMmC,GAAMA,SAAMnC,GAAG;IACzCmC,MAAM6I,UAAchL,UAAMmC,GAAMnC,SAAMmC,GAAG;IAEzC,OAAO;MACLnC,GAAKs7B,kBAAgBt7B,GAAKs7B,kBAAgBn5B,GAAKnC;MAC/CmC,GAAKm5B,kBAAgBn5B,GAAKm5B,kBAAgBt7B,GAAKmC;IACjD;EACF;EAOAyrB,UAAa;IACX,OAAO;MACLnlB,IAAM,MAAI,CAAC2xB,WAAW,IAAI;MAC1B9xB,GAAK,MAAI,CAAC4xB,UAAU,IAAI;MACxB3xB,KAAO,MAAI,CAAC8xB,YAAY,IAAI;MAC5B7xB,MAAQ,MAAI,CAAC2xB,aAAa,IAAI;IAChC;EACF;EAOAqB,QAAW;IACT,OAAO,IAAI,CAAC/iB,KAAK;EACnB;EAKA/F,SAAY;IACV,MAAM1I,IAAO,OAAI,CAAC7K,KAAK,CAAC6K,IAAI;IAC5B,OAAO,IAAI,CAACrD,OAAO,CAAC8L,MAAM,KAAK,IAAI,CAAC6H,YAAY,KAAKtQ,IAAKyxB,QAAO,GAAGzxB,IAAK0xB,QAAO,CAAK1xB,SAAKyI,MAAM,IAAI,EAAE;EACxG;EAKAkpB,gBAAgD;IAAA,IAAlCxnB,SAAY,2EAAI,CAAChV,KAAK,CAACgV,SAAS;IAC5C,MAAMxT,KAAQ,OAAI,CAAC85B,WAAW,KAAK,IAAI,CAACA,WAAW,GAAG,IAAI,CAACmB,kBAAkB,CAACznB,SAAS;IACvF,OAAOxT;EACT;EAGAqvB,YAAe;IACb,IAAI,CAACpY,MAAM,GAAG,EAAC;IACf,IAAI,CAACsjB,iBAAiB,GAAG,KAAK;EAChC;EAMAW,YAAe;IACbz7B,SAAK,IAAI,CAACuG,OAAO,CAACk1B,YAAY,EAAE,CAAC,IAAI,CAAC;EACxC;EAUAh3B,OAAOoe,QAAQ,EAAEC,SAAS,EAAE4Y,OAAO,EAAE;IACnC,MAAM;MAAC/f,WAAW;MAAEggB,KAAK;MAAEtjB,KAAOud;IAAAA,CAAS,GAAG,IAAI,CAACrvB,OAAO;IAC1D,MAAMq1B,aAAahG,SAASgG,UAAU;IAGtC,IAAI,CAACH,YAAY;IAGjB,IAAI,CAAC5Y,QAAQ,GAAGA;IAChB,IAAI,CAACC,SAAS,GAAGA;IACjB,IAAI,CAAC+W,QAAQ,GAAG6B,OAAUh2B,UAAOyB,MAAM,CAAC;MACtCkB,IAAM;MACNF,KAAO;MACPD,GAAK;MACLE,MAAQ;KACPszB;IAEH,IAAI,CAACrjB,KAAK,GAAG,IAAI;IACjB,IAAI,CAACiiB,WAAW,GAAG,IAAI;IACvB,IAAI,CAACF,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,WAAW,GAAG,IAAI;IAGvB,IAAI,CAACwB,mBAAmB;IACxB,IAAI,CAACC,aAAa;IAClB,IAAI,CAACC,kBAAkB;IAEvB,IAAI,CAAC/E,UAAU,GAAG,IAAI,CAAC9c,YAAY,EAC/B,OAAI,CAACqC,KAAK,GAAGmf,QAAQrzB,IAAI,GAAGqzB,QAAQvzB,KAAK,GACzC,IAAI,CAACmU,MAAM,GAAGof,OAAQxzB,IAAG,GAAGwzB,QAAQtzB,MAAM;IAG9C,IAAI,CAAC,IAAI,CAAC0yB,iBAAiB,EAAE;MAC3B,IAAI,CAACkB,gBAAgB;MACrB,IAAI,CAACC,mBAAmB;MACxB,IAAI,CAACC,eAAe;MACpB,IAAI,CAAC/B,MAAM,GAAGgC,SAAU,KAAI,EAAER,KAAOhgB;MACrC,IAAI,CAACmf,iBAAiB,GAAG,IAAI;;IAG/B,IAAI,CAACsB,gBAAgB;IAErB,IAAI,CAAC/jB,KAAK,GAAG,IAAI,CAACgkB,UAAU,MAAM,EAAE;IAGpC,IAAI,CAACC,eAAe;IAIpB,MAAMC,kBAAkBX,UAAa,OAAI,CAACvjB,KAAK,CAAC7X,MAAM;IACtD,IAAI,CAACg8B,qBAAqB,CAACD,kBAAkBxE,MAAO,KAAI,CAAC1f,KAAK,EAAEujB,cAAc,IAAI,CAACvjB,KAAK;IAMxF,IAAI,CAAC9S,SAAS;IAGd,IAAI,CAACk3B,4BAA4B;IACjC,IAAI,CAACC,sBAAsB;IAC3B,IAAI,CAACC,2BAA2B;IAGhC,IAAI/G,SAAShQ,OAAO,KAAKgQ,SAASD,QAAQ,IAAIC,QAASgH,OAAM,KAAK,MAAK,CAAI;MACzE,IAAI,CAACvkB,KAAK,GAAGsd,SAAS,IAAI,EAAE,IAAI,CAACtd,KAAK;MACtC,IAAI,CAACiiB,WAAW,GAAG,IAAI;MACvB,IAAI,CAACuC,aAAa;;IAGpB,IAAIN,eAAiB;MAEnB,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACnkB,KAAK;;IAGvC,IAAI,CAACykB,SAAS;IACd,IAAI,CAACC,GAAG;IACR,IAAI,CAACC,QAAQ;IAIb,IAAI,CAACC,WAAW;EAClB;EAKA13B,SAAY;IACV,IAAI23B,aAAgB,OAAI,CAAC32B,OAAO,CAACoB,OAAO;IACxC,IAAI4V,UAAYE;IAEhB,IAAI,IAAI,CAACvD,YAAY,EAAI;MACvBqD,UAAa,OAAI,CAAClV,IAAI;MACtBoV,QAAW,OAAI,CAACtV,KAAK;KAChB;MACLoV,UAAa,OAAI,CAACrV,GAAG;MACrBuV,QAAW,OAAI,CAACrV,MAAM;MAEtB80B,gBAAgB,CAACA;;IAEnB,IAAI,CAACjgB,WAAW,GAAGM;IACnB,IAAI,CAACL,SAAS,GAAGO;IACjB,IAAI,CAAC8K,cAAc,GAAG2U;IACtB,IAAI,CAACllB,OAAO,GAAGyF,QAAWF;IAC1B,IAAI,CAAC4f,cAAc,GAAG,IAAI,CAAC52B,OAAO,CAAC62B,aAAa;EAClD;EAEAH,WAAc;IACZj9B,SAAK,IAAI,CAACuG,OAAO,CAAC02B,WAAW,EAAE,CAAC,IAAI,CAAC;EACvC;EAIApB,mBAAsB;IACpB77B,SAAK,IAAI,CAACuG,OAAO,CAACs1B,mBAAmB,EAAE,CAAC,IAAI,CAAC;EAC/C;EACAC,aAAgB;IAEd,IAAI,IAAI,CAAC5hB,YAAY,EAAI;MAEvB,IAAI,CAACqC,KAAK,GAAG,IAAI,CAACsG,QAAQ;MAC1B,IAAI,CAACxa,IAAI,GAAG;MACZ,IAAI,CAACF,KAAK,GAAG,IAAI,CAACoU,KAAK;KAClB;MACL,IAAI,CAACD,MAAM,GAAG,IAAI,CAACwG,SAAS;MAG5B,IAAI,CAAC5a,GAAG,GAAG;MACX,IAAI,CAACE,MAAM,GAAG,IAAI,CAACkU,MAAM;;IAI3B,IAAI,CAAC0d,WAAW,GAAG;IACnB,IAAI,CAACF,UAAU,GAAG;IAClB,IAAI,CAACG,YAAY,GAAG;IACpB,IAAI,CAACF,aAAa,GAAG;EACvB;EACAgC,kBAAqB;IACnB/7B,SAAK,IAAI,CAACuG,OAAO,CAACw1B,kBAAkB,EAAE,CAAC,IAAI,CAAC;EAC9C;EAEAsB,WAAWrgB,IAAI,EAAE;IACf,IAAI,CAACje,KAAK,CAACu+B,aAAa,CAACtgB,IAAM,MAAI,CAACtL,UAAU;IAC9C1R,SAAK,IAAI,CAACuG,OAAO,CAACyW,KAAK,EAAE,CAAC,IAAI,CAAC;EACjC;EAGAgf,gBAAmB;IACjB,IAAI,CAACqB,UAAU,CAAC;EAClB;EACApB,sBAAsB;EACtBC,eAAkB;IAChB,IAAI,CAACmB,UAAU,CAAC;EAClB;EAGAjB,gBAAmB;IACjB,IAAI,CAACiB,UAAU,CAAC;EAClB;EAIAhB,UAAa;IACX,OAAO,EAAE;EACX;EACAC,eAAkB;IAChB,IAAI,CAACe,UAAU,CAAC;EAClB;EAEAE,2BAA8B;IAC5Bv9B,SAAK,IAAI,CAACuG,OAAO,CAACg3B,2BAA2B,EAAE,CAAC,IAAI,CAAC;EACvD;EAKAC,mBAAmBnlB,KAAK,EAAE;IACxB,MAAMud,QAAW,OAAI,CAACrvB,OAAO,CAAC8R,KAAK;IACnC,IAAI5X,GAAGuI,IAAMlI;IACb,KAAKL,IAAI,GAAGuI,IAAOqP,SAAM7X,MAAM,EAAEC,IAAIuI,MAAMvI,CAAK;MAC9CK,IAAOuX,QAAK,CAAC5X,CAAE;MACfK,KAAK2S,KAAK,GAAGzT,QAAK41B,UAAS6H,QAAQ,EAAE,CAAC38B,KAAKmG,KAAK,EAAExG,GAAG4X,MAAM,EAAE,IAAI;IACnE;EACF;EACAqlB,0BAA6B;IAC3B19B,SAAK,IAAI,CAACuG,OAAO,CAACm3B,0BAA0B,EAAE,CAAC,IAAI,CAAC;EACtD;EAIAjB,4BAA+B;IAC7Bz8B,SAAK,IAAI,CAACuG,OAAO,CAACk2B,4BAA4B,EAAE,CAAC,IAAI,CAAC;EACxD;EACAC,sBAAyB;IACvB,MAAMn2B,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMqvB,WAAWrvB,QAAQ8R,KAAK;IAC9B,MAAMslB,WAAW9F,aAAc,KAAI,CAACxf,KAAK,CAAC7X,MAAM,EAAE+F,QAAQ8R,KAAK,CAAC2d,aAAa;IAC7E,MAAM4H,cAAchI,QAASgI,YAAW,IAAI;IAC5C,MAAMC,cAAcjI,SAASiI,WAAW;IACxC,IAAI3D,aAAgB0D;IACpB,IAAIE,WAAWhb,SAAWib;IAE1B,IAAI,CAAC,IAAI,CAACC,UAAU,MAAM,CAACpI,QAAShQ,QAAO,IAAIgY,eAAeC,eAAeF,QAAY,SAAK,CAAC,IAAI,CAACzjB,YAAY,EAAI;MAClH,IAAI,CAACggB,aAAa,GAAG0D;MACrB;;IAGF,MAAMK,aAAa,IAAI,CAACC,cAAc;IACtC,MAAMC,aAAgBF,cAAWG,MAAM,CAAC7hB,KAAK;IAC7C,MAAM8hB,cAAiBJ,cAAWK,OAAO,CAAChiB,MAAM;IAIhD,MAAMuG,QAAW0b,eAAY,IAAI,CAACx/B,KAAK,CAACwd,KAAK,GAAG4hB,aAAe,KAAG,IAAI,CAACtb,QAAQ;IAC/Eib,YAAYv3B,OAAQiV,OAAM,GAAG,IAAI,CAACqH,QAAQ,GAAG8a,WAAW9a,QAAY8a,YAAW,KAAE;IAGjF,IAAIQ,gBAAgB,IAAIL,SAAW;MACjCA,SAAYjb,eAAY8a,YAAYp3B,QAAQiV,MAAM,GAAG,MAAM,EAAC;MAC5DsH,SAAY,OAAI,CAACA,SAAS,GAAG6V,kBAAkBpyB,OAAQkV,KAAI,IAC3Dma,QAAS3G,QAAO,GAAG4J,cAAetyB,SAAQi4B,KAAK,EAAE,IAAI,CAACz/B,KAAK,CAACwH,OAAO,CAACwyB,IAAI;MACxEgF,mBAAmBp+B,IAAK+pB,KAAI,CAACyU,gBAAgBA,gBAAgBE,cAAiBA;MAC9EnE,gBAAgBuE,UAAU9+B,IAAKC,IAAG,CAChCD,KAAK++B,IAAI,CAACH,YAAY,CAACN,WAAWK,OAAO,CAAChiB,MAAM,GAAG,KAAKwhB,WAAW,CAAC,GAAG,KACvEn+B,IAAK++B,KAAI,CAACH,YAAYzb,YAAYib,gBAAkB,GAAC,CAAG,QAAMp+B,KAAK++B,IAAI,CAACH,YAAYF,cAAiBN,qBAAkB,CAAC,CAAG;MAE7H7D,gBAAgBv6B,KAAKoC,GAAG,CAAC67B,aAAaj+B,IAAKC,IAAG,CAACi+B,WAAa3D;;IAG9D,IAAI,CAACA,aAAa,GAAGA;EACvB;EACAyC,2BAA8B;IAC5B38B,SAAK,IAAI,CAACuG,OAAO,CAACo2B,2BAA2B,EAAE,CAAC,IAAI,CAAC;EACvD;EACAE,gBAAgB;EAIhBC,SAAY;IACV98B,SAAK,IAAI,CAACuG,OAAO,CAACu2B,SAAS,EAAE,CAAC,IAAI,CAAC;EACrC;EACAC,GAAM;IAEJ,MAAM7W,OAAU;MACd3J,KAAO;MACPD,MAAQ;IACV;IAEA,MAAM;MAACvd,KAAK;MAAEwH,OAAS;QAAC8R,OAAOud,QAAQ;QAAE4I,KAAOG;QAAWljB,IAAMmjB;MAAAA;IAAS,CAAC,GAAG,IAAI;IAClF,MAAMhZ,UAAU,IAAI,CAACoY,UAAU;IAC/B,MAAM9jB,eAAe,IAAI,CAACA,YAAY;IAEtC,IAAI0L,OAAS;MACX,MAAMiZ,cAAchG,cAAe8F,YAAW5/B,KAAMwH,QAAO,CAACwyB,IAAI;MAChE,IAAI7e,YAAc;QAChBgM,QAAQ3J,KAAK,GAAG,IAAI,CAACsG,QAAQ;QAC7BqD,OAAQ5J,OAAM,GAAGqc,kBAAkBiG,QAAYC;OAC1C;QACL3Y,QAAQ5J,MAAM,GAAG,IAAI,CAACwG,SAAS;QAC/BoD,OAAQ3J,MAAK,GAAGoc,kBAAkBiG,QAAYC;;MAIhD,IAAIjJ,SAAShQ,OAAO,IAAI,IAAI,CAACvN,KAAK,CAAC7X,MAAM,EAAE;QACzC,MAAM;UAAC81B;UAAO7Z;UAAM2hB;UAAQE;QAAAA,CAAQ,GAAG,IAAI,CAACJ,cAAc;QAC1D,MAAMY,cAAclJ,QAAS3G,QAAO,GAAG;QACvC,MAAM8P,YAAe7c,aAAU,IAAI,CAACgY,aAAa;QACjD,MAAM9a,MAAMzf,IAAKyf,IAAG,CAAC2f;QACrB,MAAMzf,MAAM3f,IAAK2f,IAAG,CAACyf;QAErB,IAAI7kB,YAAc;UAEhB,MAAM8kB,cAAcpJ,QAASqJ,OAAM,GAAG,IAAI3f,GAAM8e,UAAO7hB,KAAK,GAAG6C,GAAMkf,WAAQhiB,MAAM;UACnF4J,QAAQ5J,MAAM,GAAG3c,IAAKC,IAAG,CAAC,IAAI,CAACkjB,SAAS,EAAEoD,QAAQ5J,MAAM,GAAG0iB,WAAcF;SACpE;UAGL,MAAMI,aAAatJ,QAASqJ,OAAM,GAAG,IAAI7f,GAAMgf,UAAO7hB,KAAK,GAAG+C,GAAMgf,WAAQhiB,MAAM;UAElF4J,QAAQ3J,KAAK,GAAG5c,IAAKC,IAAG,CAAC,IAAI,CAACijB,QAAQ,EAAEqD,QAAQ3J,KAAK,GAAG2iB,UAAaJ;;QAEvE,IAAI,CAACK,iBAAiB,CAAC7I,OAAO7Z,MAAM6C,GAAKF;;;IAI7C,IAAI,CAACggB,cAAc;IAEnB,IAAIllB,YAAc;MAChB,IAAI,CAACqC,KAAK,GAAG,IAAI,CAACvE,OAAO,GAAGjZ,MAAMwd,KAAK,GAAG,IAAI,CAACsd,QAAQ,CAACxxB,IAAI,GAAG,IAAI,CAACwxB,QAAQ,CAAC1xB,KAAK;MAClF,IAAI,CAACmU,MAAM,GAAG4J,QAAQ5J,MAAM;KACvB;MACL,IAAI,CAACC,KAAK,GAAG2J,QAAQ3J,KAAK;MAC1B,IAAI,CAACD,MAAM,GAAG,IAAI,CAACtE,OAAO,GAAGjZ,MAAMud,MAAM,GAAG,IAAI,CAACud,QAAQ,CAAC3xB,GAAG,GAAG,IAAI,CAAC2xB,QAAQ,CAACzxB,MAAM;;EAExF;EAEA+2B,kBAAkB7I,KAAK,EAAE7Z,IAAI,EAAE6C,GAAG,EAAEF,GAAG,EAAE;IACvC,MAAM;MAAC/G,OAAO;QAACsf;QAAO1I;MAAO,CAAC;MAAElG;IAAQ,CAAC,GAAG,IAAI,CAACxiB,OAAO;IACxD,MAAM84B,SAAY,OAAI,CAACnF,aAAa,KAAK;IACzC,MAAMoF,mBAAmBvW,QAAa,cAAS,IAAI,CAAC9e,IAAI,KAAK;IAE7D,IAAI,IAAI,CAACiQ,YAAY,EAAI;MACvB,MAAMqlB,aAAa,IAAI,CAACjnB,eAAe,CAAC,CAAK,QAAI,CAACjQ,IAAI;MACtD,MAAMm3B,WAAc,OAAI,CAACr3B,KAAK,GAAG,IAAI,CAACmQ,eAAe,CAAC,IAAI,CAACD,KAAK,CAAC7X,MAAM,GAAG;MAC1E,IAAIw5B,WAAc;MAClB,IAAIC,YAAe;MAInB,IAAIoF,SAAW;QACb,IAAIC,gBAAkB;UACpBtF,WAAc5a,SAAMkX,MAAM/Z,KAAK;UAC/B0d,YAAe3a,SAAM7C,KAAKH,MAAM;SAC3B;UACL0d,WAAc1a,SAAMgX,MAAMha,MAAM;UAChC2d,YAAe7a,SAAM3C,KAAKF,KAAK;;OAE5B,UAAIob,UAAU,OAAS;QAC5BsC,eAAexd,KAAKF,KAAK;OACpB,UAAIob,UAAU,KAAO;QAC1BqC,cAAc1D,MAAM/Z,KAAK;OACpB,UAAIob,UAAU,OAAS;QAC5BqC,WAAc1D,SAAM/Z,KAAK,GAAG;QAC5B0d,YAAexd,QAAKF,KAAK,GAAG;;MAI9B,IAAI,CAACyd,WAAW,GAAGr6B,KAAKoC,GAAG,CAAEi4B,eAAcuF,UAAatQ,UAAM,IAAK,IAAI,CAAC1S,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGgjB,UAAS,CAAI;MAC3G,IAAI,CAACtF,YAAY,GAAGt6B,KAAKoC,GAAG,CAAEk4B,gBAAeuF,WAAcvQ,UAAM,IAAK,IAAI,CAAC1S,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGijB,WAAU,CAAI;KAC1G;MACL,IAAI1F,aAAard,IAAKH,OAAM,GAAG;MAC/B,IAAIyd,gBAAgBzD,KAAMha,OAAM,GAAG;MAEnC,IAAIqb,UAAU,OAAS;QACrBmC,UAAa;QACbC,gBAAgBzD,MAAMha,MAAM;OACvB,UAAIqb,UAAU,KAAO;QAC1BmC,aAAard,KAAKH,MAAM;QACxByd,aAAgB;;MAGlB,IAAI,CAACD,UAAU,GAAGA,UAAa7K;MAC/B,IAAI,CAAC8K,aAAa,GAAGA,aAAgB9K;;EAEzC;EAMAmQ,cAAiB;IACf,IAAI,IAAI,CAACvF,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACxxB,IAAI,GAAG1I,KAAKoC,GAAG,CAAC,IAAI,CAACi4B,WAAW,EAAE,IAAI,CAACH,QAAQ,CAACxxB,IAAI;MAClE,IAAI,CAACwxB,QAAQ,CAAC3xB,GAAG,GAAGvI,KAAKoC,GAAG,CAAC,IAAI,CAAC+3B,UAAU,EAAE,IAAI,CAACD,QAAQ,CAAC3xB,GAAG;MAC/D,IAAI,CAAC2xB,QAAQ,CAAC1xB,KAAK,GAAGxI,KAAKoC,GAAG,CAAC,IAAI,CAACk4B,YAAY,EAAE,IAAI,CAACJ,QAAQ,CAAC1xB,KAAK;MACrE,IAAI,CAAC0xB,QAAQ,CAACzxB,MAAM,GAAGzI,KAAKoC,GAAG,CAAC,IAAI,CAACg4B,aAAa,EAAE,IAAI,CAACF,QAAQ,CAACzxB,MAAM;;EAE5E;EAEA40B,QAAW;IACTh9B,SAAK,IAAI,CAACuG,OAAO,CAACy2B,QAAQ,EAAE,CAAC,IAAI,CAAC;EACpC;EAMA9iB,YAAe;IACb,MAAM;MAACjQ;MAAM8e;IAAAA,CAAS,GAAG,IAAI,CAACxiB,OAAO;IACrC,OAAOwiB,QAAa,cAASA,QAAa,iBAAY9e,IAAS;EACjE;EAIAw1B,UAAa;IACX,OAAO,IAAI,CAACl5B,OAAO,CAACmmB,QAAQ;EAC9B;EAMA8P,sBAAsBnkB,KAAK,EAAE;IAC3B,IAAI,CAACklB,2BAA2B;IAEhC,IAAI,CAACC,kBAAkB,CAACnlB;IAGxB,IAAI5X,CAAGuI;IACP,KAAKvI,IAAI,GAAGuI,IAAOqP,SAAM7X,MAAM,EAAEC,IAAIuI,MAAMvI,CAAK;MAC9C,IAAIoY,cAAcR,KAAK,CAAC5X,CAAE,EAACgT,KAAK,CAAG;QACjC4E,KAAMzB,OAAM,CAACnW,CAAG;QAChBuI;QACAvI;;IAEJ;IAEA,IAAI,CAACi9B,0BAA0B;EACjC;EAMAQ,cAAiB;IACf,IAAID,aAAa,IAAI,CAAC3D,WAAW;IAEjC,IAAI,CAAC2D,UAAY;MACf,MAAMrC,aAAa,IAAI,CAACr1B,OAAO,CAAC8R,KAAK,CAACujB,UAAU;MAChD,IAAIvjB,QAAQ,IAAI,CAACA,KAAK;MACtB,IAAIujB,aAAavjB,KAAM7X,OAAM,EAAE;QAC7B6X,QAAQ0f,OAAO1f,KAAOujB;;MAGxB,IAAI,CAACtB,WAAW,GAAG2D,aAAa,IAAI,CAACyB,kBAAkB,CAACrnB,OAAOA,KAAM7X,OAAM,EAAE,IAAI,CAAC+F,OAAO,CAAC8R,KAAK,CAAC2d,aAAa;;IAG/G,OAAOiI;EACT;EAQAyB,mBAAmBrnB,KAAK,EAAE7X,MAAM,EAAEw1B,aAAa,EAAE;IAC/C,MAAM;MAACjoB,GAAG;MAAEwsB,mBAAmB/B;IAAM,CAAC,GAAG,IAAI;IAC7C,MAAMmH,SAAS,EAAE;IACjB,MAAMC,UAAU,EAAE;IAClB,MAAM3H,YAAYt4B,IAAKoE,MAAK,CAACvD,SAASq3B,cAAcr3B,MAAQw1B;IAC5D,IAAI6J,eAAkB;IACtB,IAAIC,gBAAmB;IACvB,IAAIr/B,GAAGyoB,GAAG6W,IAAMtsB,SAAOusB,UAAUC,UAAY1rB,SAAO2kB,UAAY3c,SAAOD,MAAQ4jB;IAE/E,KAAKz/B,CAAI,MAAGA,CAAID,WAAQC,KAAKw3B,SAAW;MACtCxkB,QAAQ4E,KAAK,CAAC5X,CAAE,EAACgT,KAAK;MACtBusB,QAAW,OAAI,CAACG,uBAAuB,CAAC1/B;MACxCsN,IAAIgrB,IAAI,GAAGkH,UAAaD,YAASI,MAAM;MACvC7rB,QAAQikB,MAAM,CAACyH,WAAW,GAAGzH,MAAM,CAACyH,WAAW,IAAI;QAACr2B,MAAM,EAAC;QAAG6uB,IAAI;MAAE;MACpES,aAAa8G,SAAS9G,UAAU;MAChC3c,QAAQD,MAAS;MAEjB,IAAI,CAACzD,cAAcpF,KAAU,MAACvN,QAAQuN,KAAQ;QAC5C8I,KAAQ8jB,gBAAatyB,KAAKwG,KAAM3K,KAAI,EAAE2K,KAAMkkB,GAAE,EAAElc,KAAO9I;QACvD6I,MAAS4c;OACJ,UAAIhzB,QAAQuN,KAAQ;QAEzB,KAAKyV,IAAI,GAAG6W,IAAOtsB,SAAMjT,MAAM,EAAE0oB,IAAI6W,IAAM,IAAE7W,CAAG;UAC9CgX,cAAqCzsB,KAAK,CAACyV,CAAE;UAE7C,IAAI,CAACrQ,cAAcqnB,WAAgB,MAACh6B,QAAQg6B,WAAc;YACxD3jB,KAAQ8jB,gBAAatyB,KAAKwG,KAAM3K,KAAI,EAAE2K,KAAMkkB,GAAE,EAAElc,KAAO2jB;YACvD5jB,MAAU4c;;QAEd;;MAEFyG,OAAOl+B,IAAI,CAAC8a;MACZqjB,QAAQn+B,IAAI,CAAC6a;MACbujB,eAAkBlgC,QAAKoC,GAAG,CAACwa,KAAOsjB;MAClCC,gBAAmBngC,QAAKoC,GAAG,CAACua,MAAQwjB;IACtC;IACAvH,eAAeC,MAAQh4B;IAEvB,MAAM49B,SAASuB,MAAO9iB,QAAO,CAACgjB;IAC9B,MAAMvB,UAAUsB,OAAQ/iB,QAAO,CAACijB;IAEhC,MAAMQ,UAAWC,QAAS;MAAChkB,KAAOojB,QAAM,CAACY,IAAI,IAAI;MAAGjkB,MAAQsjB,SAAO,CAACW,IAAI,IAAI;KAAC;IAE7E,OAAO;MACLjK,OAAOgK,OAAQ;MACf7jB,MAAM6jB,QAAQ9/B,MAAS;MACvB49B,QAAQkC,OAAQlC;MAChBE,SAASgC,OAAQhC;MACjBqB;MACAC;IACF;EACF;EAOAlsB,iBAAiBzM,KAAK,EAAE;IACtB,OAAOA;EACT;EASAmR,gBAAiBnR,MAAK,EAAEgC,KAAK,EAAE;IAC7B,OAAO+J;EACT;EAQA0K,iBAAiB8iB,KAAK,EAAE;EAQxBloB,gBAAgBrP,KAAK,EAAE;IACrB,MAAMoP,QAAQ,IAAI,CAACA,KAAK;IACxB,IAAIpP,QAAQ,CAAKA,YAAQoP,KAAM7X,OAAM,GAAG,CAAG;MACzC,OAAO,IAAI;;IAEb,OAAO,IAAI,CAAC4X,gBAAgB,CAACC,KAAK,CAACpP,MAAM,CAAChC,KAAK;EACjD;EAQAuW,mBAAmBijB,OAAO,EAAE;IAC1B,IAAI,IAAI,CAAClY,cAAc,EAAE;MACvBkY,UAAU,CAAIA;;IAGhB,MAAMD,QAAQ,IAAI,CAACvjB,WAAW,GAAGwjB,OAAU,OAAI,CAACzoB,OAAO;IACvD,OAAO0oB,WAAY,KAAI,CAACvD,cAAc,GAAGwD,YAAY,IAAI,CAAC5hC,KAAK,EAAEyhC,KAAO,OAAKA,KAAK;EACpF;EAMAI,mBAAmBJ,KAAK,EAAE;IACxB,MAAMC,UAAU,CAACD,KAAQ,OAAI,CAACvjB,WAAW,IAAI,IAAI,CAACjF,OAAO;IACzD,OAAO,IAAI,CAACuQ,cAAc,GAAG,IAAIkY,UAAUA,OAAO;EACpD;EAOA3kB,YAAe;IACb,OAAO,IAAI,CAAC1D,gBAAgB,CAAC,IAAI,CAACyoB,YAAY;EAChD;EAKAA,YAAe;IACb,MAAM;MAACjhC,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI;IAEvB,OAAOnC,MAAM,CAAKmC,UAAM,CAAIA,SAC1BnC,MAAM,CAAKmC,UAAM,CAAInC,SACrB,CAAC;EACL;EAKA8R,WAAWzI,KAAK,EAAE;IAChB,MAAMoP,KAAQ,OAAI,CAACA,KAAK,IAAI,EAAE;IAE9B,IAAIpP,KAAS,SAAKA,KAAQoP,SAAM7X,MAAM,EAAE;MACtC,MAAMM,OAAOuX,KAAK,CAACpP,KAAM;MACzB,OAAOnI,IAAK6N,SAAQ,KACrB7N,IAAK6N,SAAQ,GAAGyqB,kBAAkB,IAAI,CAAC1nB,UAAU,IAAIzI,OAAOnI,IAAI;;IAEjE,OAAO,IAAI,CAAC6N,QAAQ,KACpB,IAAI,CAACA,QAAQ,GAAGwqB,mBAAmB,IAAI,CAACp6B,KAAK,CAAC2S,UAAU,IAAI,IAAI;EAClE;EAMAmlB,SAAY;IACV,MAAMiK,WAAc,OAAI,CAACv6B,OAAO,CAAC8R,KAAK;IAGtC,MAAM0oB,GAAM7e,aAAU,IAAI,CAACgY,aAAa;IACxC,MAAM9a,MAAMzf,IAAKwY,IAAG,CAACxY,KAAKyf,GAAG,CAAC2hB;IAC9B,MAAMzhB,MAAM3f,IAAKwY,IAAG,CAACxY,KAAK2f,GAAG,CAACyhB;IAE9B,MAAM9C,aAAa,IAAI,CAACC,cAAc;IACtC,MAAMjP,UAAU6R,WAAYE,gBAAe,IAAI;IAC/C,MAAMlT,IAAImQ,aAAaA,UAAWG,OAAM,CAAC7hB,KAAK,GAAG0S,UAAU,CAAC;IAC5D,MAAMjB,IAAIiQ,aAAaA,UAAWK,QAAO,CAAChiB,MAAM,GAAG2S,UAAU,CAAC;IAG9D,OAAO,IAAI,CAAC/U,YAAY,KACpB8T,IAAI5O,GAAM0O,OAAIxO,MAAMwO,CAAI1O,SAAM4O,IAAI1O,GAAG,GACrC0O,IAAI1O,GAAMwO,OAAI1O,MAAM4O,CAAI5O,SAAM0O,IAAIxO,GAAG;EAC3C;EAMA0e,UAAa;IACX,MAAMpY,OAAU,OAAI,CAACrf,OAAO,CAACqf,OAAO;IAEpC,IAAIA,YAAY,MAAQ;MACtB,OAAO,CAAC,CAACA;;IAGX,OAAO,IAAI,CAACpa,uBAAuB,GAAGhL,MAAM,GAAG;EACjD;EAKAygC,sBAAsBltB,SAAS,EAAE;IAC/B,MAAM9J,OAAO,IAAI,CAACA,IAAI;IACtB,MAAMlL,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMwH,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM;MAACkV,IAAI;MAAEsN;MAAUzD;IAAAA,CAAO,GAAG/e;IACjC,MAAMiV,SAASC,KAAKD,MAAM;IAC1B,MAAMtB,eAAe,IAAI,CAACA,YAAY;IACtC,MAAM7B,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMyf,cAAczf,MAAM7X,MAAM,IAAIgb,MAAS,OAAI,CAAC,CAAD;IACjD,MAAM0lB,KAAKvI,iBAAkBld;IAC7B,MAAMlb,QAAQ,EAAE;IAEhB,MAAM4gC,aAAa7b,MAAOyV,WAAU,CAAC,IAAI,CAACrpB,UAAU;IACpD,MAAM0vB,YAAYD,UAAWvb,QAAO,GAAGub,UAAW5kB,MAAK,GAAG,CAAC;IAC3D,MAAM8kB,gBAAgBD,SAAY;IAClC,MAAME,mBAAmB,UAASd,KAAK,EAAE;MACvC,OAAOG,YAAY5hC,OAAOyhC,KAAOY;IACnC;IACA,IAAIG,aAAa9gC,GAAG63B,SAAWkJ;IAC/B,IAAIC,KAAKC,GAAKC,OAAKC,GAAKC,MAAIC,IAAIC,EAAIC;IAEpC,IAAIjZ,aAAa,KAAO;MACtBwY,WAAcD,oBAAiB,IAAI,CAACl5B,MAAM;MAC1Cs5B,GAAM,OAAI,CAACt5B,MAAM,GAAG84B;MACpBU,MAAML,WAAcF;MACpBS,EAAKR,oBAAiBvtB,SAAU7L,IAAG,CAAIm5B;MACvCW,KAAKjuB,UAAU3L,MAAM;KAChB,UAAI2gB,aAAa,QAAU;MAChCwY,WAAcD,oBAAiB,IAAI,CAACp5B,GAAG;MACvC45B,KAAK/tB,UAAU7L,GAAG;MAClB85B,EAAKV,oBAAiBvtB,SAAU3L,OAAM,CAAIi5B;MAC1CK,MAAMH,WAAcF;MACpBO,GAAM,OAAI,CAAC15B,GAAG,GAAGg5B;KACZ,UAAInY,aAAa,MAAQ;MAC9BwY,WAAcD,oBAAiB,IAAI,CAACn5B,KAAK;MACzCs5B,GAAM,OAAI,CAACt5B,KAAK,GAAG+4B;MACnBS,MAAMJ,WAAcF;MACpBQ,EAAKP,oBAAiBvtB,SAAU1L,KAAI,CAAIg5B;MACxCU,KAAKhuB,UAAU5L,KAAK;KACf,UAAI4gB,aAAa,OAAS;MAC/BwY,WAAcD,oBAAiB,IAAI,CAACj5B,IAAI;MACxCw5B,KAAK9tB,UAAU1L,IAAI;MACnB05B,EAAKT,oBAAiBvtB,SAAU5L,MAAK,CAAIk5B;MACzCI,MAAMF,WAAcF;MACpBM,GAAM,OAAI,CAACt5B,IAAI,GAAG64B;KACb,UAAIj3B,SAAS,GAAK;MACvB,IAAI8e,aAAa,QAAU;QACzBwY,WAAcD,oBAAiB,CAACvtB,SAAU7L,IAAG,GAAG6L,SAAU3L,OAAM,IAAI,CAAI;OACnE,UAAI5C,SAASujB,QAAW;QAC7B,MAAM4Q,iBAAiBj0B,MAAOC,KAAI,CAACojB,SAAS,CAAC,CAAE;QAC/C,MAAM9hB,QAAQ8hB,QAAQ,CAAC4Q,cAAe;QACtC4H,WAAcD,oBAAiB,IAAI,CAACviC,KAAK,CAACuN,MAAM,CAACqtB,eAAe,CAACvhB,gBAAgB,CAACnR;;MAGpF66B,KAAK/tB,UAAU7L,GAAG;MAClB85B,KAAKjuB,UAAU3L,MAAM;MACrBs5B,MAAMH,WAAcF;MACpBO,MAAMF,GAAMR;KACP,UAAIj3B,SAAS,GAAK;MACvB,IAAI8e,aAAa,QAAU;QACzBwY,WAAcD,oBAAiB,CAACvtB,UAAU1L,IAAI,GAAG0L,UAAU5L,KAAI,IAAK;OAC/D,UAAI3C,SAASujB,QAAW;QAC7B,MAAM4Q,iBAAiBj0B,MAAOC,KAAI,CAACojB,SAAS,CAAC,CAAE;QAC/C,MAAM9hB,QAAQ8hB,QAAQ,CAAC4Q,cAAe;QACtC4H,WAAcD,oBAAiB,IAAI,CAACviC,KAAK,CAACuN,MAAM,CAACqtB,eAAe,CAACvhB,gBAAgB,CAACnR;;MAGpFw6B,MAAMF,WAAcF;MACpBM,MAAMF,GAAMP;MACZW,KAAK9tB,UAAU1L,IAAI;MACnB05B,KAAKhuB,UAAU5L,KAAK;;IAGtB,MAAM85B,QAAQvyB,cAAenJ,SAAQ8R,KAAK,CAAC2d,aAAa,EAAE8B;IAC1D,MAAMoK,OAAOviC,KAAKoC,GAAG,CAAC,GAAGpC,IAAK23B,KAAI,CAACQ,WAAcmK;IACjD,KAAKxhC,CAAI,MAAGA,CAAIq3B,gBAAar3B,KAAKyhC,IAAM;MACtC,MAAM9tB,OAAU,OAAI,CAAC1C,UAAU,CAACjR;MAChC,MAAM0hC,cAAc1mB,IAAKsf,WAAU,CAAC3mB;MACpC,MAAMguB,oBAAoB9c,MAAOyV,WAAU,CAAC3mB;MAE5C,MAAMoN,YAAY2gB,YAAY3gB,SAAS;MACvC,MAAM6gB,YAAYF,YAAYx/B,KAAK;MACnC,MAAM2/B,UAAaF,qBAAkBG,IAAI,IAAI,EAAE;MAC/C,MAAMC,mBAAmBJ,kBAAkBK,UAAU;MAErD,MAAM3E,YAAYqE,YAAYrE,SAAS;MACvC,MAAM4E,YAAYP,YAAYO,SAAS;MACvC,MAAMC,cAAiBR,eAAYQ,cAAc,IAAI,EAAE;MACvD,MAAMC,uBAAuBT,YAAYS,oBAAoB;MAE7DtK,SAAYJ,uBAAoB,IAAI,EAAEz3B,CAAG+a;MAGzC,IAAI8c,cAAcz5B,SAAW;QAC3B;;MAGF2iC,gBAAmBb,eAAY5hC,OAAOu5B,SAAW9W;MAEjD,IAAItH,YAAc;QAChBunB,GAAME,SAAME,KAAKE,EAAKP;OACjB;QACLE,GAAME,SAAME,KAAKE,EAAKR;;MAGxBjhC,MAAMkB,IAAI,CAAC;QACTggC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAzlB,KAAOiF;QACP7e,KAAO0/B;QACPC;QACAE;QACA1E;QACA4E;QACAC;QACAC;MACF;IACF;IAEA,IAAI,CAAChI,YAAY,GAAG9C;IACpB,IAAI,CAAC+C,YAAY,GAAG0G;IAEpB,OAAOhhC;EACT;EAKAi7B,mBAAmBznB,SAAS,EAAE;IAC5B,MAAM9J,OAAO,IAAI,CAACA,IAAI;IACtB,MAAM1D,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM;MAACwiB,QAAQ;MAAE1Q,KAAOyoB;IAAAA,CAAY,GAAGv6B;IACvC,MAAM2T,eAAe,IAAI,CAACA,YAAY;IACtC,MAAM7B,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAM;MAACsf;MAAOkL;MAAY5T,OAAO;MAAEgQ;IAAM,CAAC,GAAG6B;IAC7C,MAAMI,KAAKvI,iBAAkBpyB,SAAQkV,IAAI;IACzC,MAAMqnB,iBAAiB5B,EAAKjS;IAC5B,MAAM8T,eAAkB9D,YAAS,CAAChQ,UAAU6T,cAAc;IAC1D,MAAMrkB,QAAW,IAACyD,SAAU,KAAI,CAACgY,aAAa;IAC9C,MAAM35B,QAAQ,EAAE;IAChB,IAAIE,GAAGuI,IAAMlI,QAAM2S,KAAOzL,KAAGC,GAAG+6B,SAAWxC,SAAOzH,IAAMG,cAAY+J,SAAWC;IAC/E,IAAIC,YAAe;IAEnB,IAAIpa,aAAa,KAAO;MACtB9gB,CAAI,OAAI,CAACG,MAAM,GAAG26B;MAClBC,SAAY,OAAI,CAACI,uBAAuB;KACnC,UAAIra,aAAa,QAAU;MAChC9gB,CAAI,OAAI,CAACC,GAAG,GAAG66B;MACfC,SAAY,OAAI,CAACI,uBAAuB;KACnC,UAAIra,aAAa,MAAQ;MAC9B,MAAM2M,GAAM,OAAI,CAAC2N,uBAAuB,CAACnC;MACzC8B,YAAYtN,IAAIsN,SAAS;MACzBh7B,IAAI0tB,IAAI1tB,CAAC;KACJ,UAAI+gB,aAAa,OAAS;MAC/B,MAAM2M,GAAM,OAAI,CAAC2N,uBAAuB,CAACnC;MACzC8B,YAAYtN,IAAIsN,SAAS;MACzBh7B,IAAI0tB,IAAI1tB,CAAC;KACJ,UAAIiC,SAAS,GAAK;MACvB,IAAI8e,aAAa,QAAU;QACzB9gB,CAAI,GAAE8L,UAAU7L,IAAG,GAAG6L,SAAU3L,OAAM,IAAI,CAAK06B;OAC1C,UAAIt9B,SAASujB,QAAW;QAC7B,MAAM4Q,iBAAiBj0B,MAAOC,KAAI,CAACojB,SAAS,CAAC,CAAE;QAC/C,MAAM9hB,QAAQ8hB,QAAQ,CAAC4Q,cAAe;QACtC1xB,CAAI,OAAI,CAAClJ,KAAK,CAACuN,MAAM,CAACqtB,cAAe,EAACvhB,gBAAgB,CAACnR,KAAS67B;;MAElEE,SAAY,OAAI,CAACI,uBAAuB;KACnC,UAAIn5B,SAAS,GAAK;MACvB,IAAI8e,aAAa,QAAU;QACzB/gB,CAAI,GAAE+L,UAAU1L,KAAI,GAAG0L,SAAU5L,MAAK,IAAI,CAAK26B;OAC1C,UAAIt9B,SAASujB,QAAW;QAC7B,MAAM4Q,iBAAiBj0B,MAAOC,KAAI,CAACojB,SAAS,CAAC,CAAE;QAC/C,MAAM9hB,QAAQ8hB,QAAQ,CAAC4Q,cAAe;QACtC3xB,CAAI,OAAI,CAACjJ,KAAK,CAACuN,MAAM,CAACqtB,eAAe,CAACvhB,gBAAgB,CAACnR;;MAEzD+7B,YAAY,IAAI,CAACK,uBAAuB,CAACnC,IAAI8B,SAAS;;IAGxD,IAAI/4B,SAAS,GAAK;MAChB,IAAI0tB,UAAU,OAAS;QACrBwL,YAAe;OACV,UAAIxL,UAAU,KAAO;QAC1BwL,YAAe;;;IAInB,MAAMlF,aAAa,IAAI,CAACC,cAAc;IACtC,KAAKz9B,IAAI,GAAGuI,IAAOqP,SAAM7X,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC9CK,IAAOuX,QAAK,CAAC5X,CAAE;MACfgT,QAAQ3S,KAAK2S,KAAK;MAElB,MAAM0uB,cAAcrB,WAAY/F,WAAU,CAAC,IAAI,CAACrpB,UAAU,CAACjR;MAC3D+/B,QAAQ,IAAI,CAACloB,eAAe,CAAC7X,KAAKqgC,YAAYwC,WAAW;MACzDvK,IAAO,OAAI,CAACoH,uBAAuB,CAAC1/B;MACpCy4B,aAAaH,KAAKG,UAAU;MAC5B+J,YAAY/8B,OAAQuN,UAASA,KAAMjT,OAAM,GAAG,CAAC;MAC7C,MAAM+iC,YAAYN,SAAY;MAC9B,MAAMtgC,QAAQw/B,YAAYx/B,KAAK;MAC/B,MAAM6gC,cAAcrB,YAAYsB,eAAe;MAC/C,MAAMC,cAAcvB,YAAYwB,eAAe;MAC/C,IAAIC,aAAgBZ;MAEpB,IAAI9oB,YAAc;QAChBlS,CAAIw4B;QAEJ,IAAIwC,cAAc,OAAS;UACzB,IAAIviC,MAAMuI,OAAO,CAAG;YAClB46B,aAAgB,IAAC,IAAI,CAACr9B,OAAO,CAACoB,OAAO,GAAG,UAAU,MAAM;WACnD,UAAIlH,MAAM,CAAG;YAClBmjC,aAAgB,IAAC,IAAI,CAACr9B,OAAO,CAACoB,OAAO,GAAG,SAAS,OAAO;WACnD;YACLi8B,aAAgB;;;QAIpB,IAAI7a,aAAa,KAAO;UACtB,IAAI8Z,eAAe,MAAUpkB,iBAAa,CAAG;YAC3CykB,UAAa,IAACD,SAAY/J,gBAAaA,UAAa;WAC/C,UAAI2J,eAAe,QAAU;YAClCK,UAAa,IAACjF,WAAWK,OAAO,CAAChiB,MAAM,GAAG,IAAIinB,YAAYrK,UAAaA;WAClE;YACLgK,aAAa,CAACjF,UAAWK,QAAO,CAAChiB,MAAM,GAAG4c,UAAa;;SAEpD;UAEL,IAAI2J,eAAe,MAAUpkB,iBAAa,CAAG;YAC3CykB,aAAahK,UAAa;WACrB,UAAI2J,eAAe,QAAU;YAClCK,aAAajF,WAAWK,OAAO,CAAChiB,MAAM,GAAG,IAAIinB,SAAYrK;WACpD;YACLgK,aAAajF,UAAWK,QAAO,CAAChiB,MAAM,GAAG2mB,SAAY/J;;;QAGzD,IAAI+F,MAAQ;UACViE,cAAc,CAAC;;QAEjB,IAAIzkB,QAAa,UAAK,CAAC0jB,YAAY0B,iBAAiB,EAAE;UACpD77B,KAAKkxB,UAACA,GAAa,CAAKv5B,QAAK2f,GAAG,CAACb;;OAE9B;QACLxW,CAAIu4B;QACJ0C,aAAa,CAAC,CAAID,YAAQ,IAAK/J,UAAa;;MAG9C,IAAI4K;MAEJ,IAAI3B,YAAY0B,iBAAiB,EAAE;QACjC,MAAME,eAAevU,SAAU2S,aAAY6B,eAAe;QAC1D,MAAM1nB,MAAS2hB,cAAW2B,OAAO,CAACn/B,CAAE;QACpC,MAAM8b,KAAQ0hB,cAAW0B,MAAM,CAACl/B,CAAE;QAElC,IAAIyH,MAAMg7B,UAAaa,gBAAa77B,GAAG;QACvC,IAAIG,OAAO,CAAI07B,gBAAa17B,IAAI;QAEhC,QAAQ86B;UACR,KAAK;YACHj7B,OAAOoU,MAAS;YAChB;UACF,KAAK;YACHpU,GAAOoU;YACP;QAAM;QAKR,QAAQ0mB;UACR,KAAK;YACH36B,QAAQkU,KAAQ;YAChB;UACF,KAAK;YACHlU,IAAQkU;YACR;UACF,KAAK;YACH,IAAI9b,MAAMuI,OAAO,CAAG;cAClBX,IAAQkU;aACH,UAAI9b,IAAI,CAAG;cAChB4H,QAAQkU,KAAQ;;YAElB;QAAM;QAKRunB,QAAW;UACTz7B;UACAH;UACAqU,KAAOA,UAAQwnB,aAAaxnB,KAAK;UACjCD,MAAQA,WAASynB,aAAaznB,MAAM;UAEpC3Z,OAAOw/B,YAAY8B;QACrB;;MAGF1jC,MAAMkB,IAAI,CAAC;QACTgS;QACAslB;QACAmK;QACA38B,OAAS;UACPkY;UACA9b;UACA6gC;UACAE;UACAV,SAAWY;UACXT;UACAe,WAAa,GAACl8B,GAAGC,EAAE;UACnB67B;QACF;MACF;IACF;IAEA,OAAOvjC;EACT;EAEA6iC,uBAA0B;IACxB,MAAM;MAACra;MAAU1Q;IAAAA,CAAM,GAAG,IAAI,CAAC9R,OAAO;IACtC,MAAMkY,QAAW,IAACyD,SAAU,KAAI,CAACgY,aAAa;IAE9C,IAAIzb,QAAU;MACZ,OAAOsK,aAAa,KAAQ,YAAS,OAAO;;IAG9C,IAAI4O,KAAQ;IAEZ,IAAItf,MAAMsf,KAAK,KAAK,OAAS;MAC3BA,KAAQ;IACV,OAAO,IAAItf,MAAMsf,KAAK,KAAK,KAAO;MAChCA,KAAQ;IACV,OAAO,IAAItf,MAAMsf,KAAK,KAAK,OAAS;MAClCA,KAAQ;;IAGV,OAAOA;EACT;EAEA0L,wBAAwBnC,EAAE,EAAE;IAC1B,MAAM;MAACnY,QAAQ;MAAE1Q,KAAO;QAACwqB;QAAY5D;QAAQhQ;MAAAA;IAAQ,CAAC,GAAG,IAAI,CAAC1oB,OAAO;IACrE,MAAM03B,aAAa,IAAI,CAACC,cAAc;IACtC,MAAM4E,iBAAiB5B,EAAKjS;IAC5B,MAAMmP,MAASH,cAAWG,MAAM,CAAC7hB,KAAK;IAEtC,IAAIymB;IACJ,IAAIh7B;IAEJ,IAAI+gB,aAAa,MAAQ;MACvB,IAAIkW,MAAQ;QACVj3B,CAAI,OAAI,CAACG,KAAK,GAAG8mB;QAEjB,IAAI4T,eAAe,MAAQ;UACzBG,SAAY;SACP,UAAIH,eAAe,QAAU;UAClCG,SAAY;UACZh7B,KAAMo2B,MAAS;SACV;UACL4E,SAAY;UACZh7B,CAAKo2B;;OAEF;QACLp2B,CAAI,OAAI,CAACG,KAAK,GAAG26B;QAEjB,IAAID,eAAe,MAAQ;UACzBG,SAAY;SACP,UAAIH,eAAe,QAAU;UAClCG,SAAY;UACZh7B,KAAMo2B,MAAS;SACV;UACL4E,SAAY;UACZh7B,CAAI,OAAI,CAACK,IAAI;;;KAGZ,UAAI0gB,aAAa,OAAS;MAC/B,IAAIkW,MAAQ;QACVj3B,CAAI,OAAI,CAACK,IAAI,GAAG4mB;QAEhB,IAAI4T,eAAe,MAAQ;UACzBG,SAAY;SACP,UAAIH,eAAe,QAAU;UAClCG,SAAY;UACZh7B,KAAMo2B,MAAS;SACV;UACL4E,SAAY;UACZh7B,CAAKo2B;;OAEF;QACLp2B,CAAI,OAAI,CAACK,IAAI,GAAGy6B;QAEhB,IAAID,eAAe,MAAQ;UACzBG,SAAY;SACP,UAAIH,eAAe,QAAU;UAClCG,SAAY;UACZh7B,KAAKo2B,MAAS;SACT;UACL4E,SAAY;UACZh7B,CAAI,OAAI,CAACG,KAAK;;;KAGb;MACL66B,SAAY;;IAGd,OAAO;MAACA;MAAWh7B;IAAC;EACtB;EAKAm8B,iBAAoB;IAClB,IAAI,IAAI,CAAC59B,OAAO,CAAC8R,KAAK,CAAC4mB,MAAM,EAAE;MAC7B;;IAGF,MAAMlgC,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMgqB,QAAW,OAAI,CAACxiB,OAAO,CAACwiB,QAAQ;IAEtC,IAAIA,aAAa,MAAUA,iBAAa,OAAS;MAC/C,OAAO;QAAC7gB,GAAK;QAAGG,IAAM,MAAI,CAACA,IAAI;QAAED,QAAQrJ,MAAMud,MAAM;QAAEnU,KAAO,MAAI,CAACA;MAAK;;IACxE,IAAI4gB,aAAa,KAASA,iBAAa,QAAU;MACjD,OAAO;QAAC7gB,GAAK,MAAI,CAACA,GAAG;QAAEG,IAAM;QAAGD,MAAQ,MAAI,CAACA,MAAM;QAAED,OAAOpJ,MAAMwd;MAAK;;EAE3E;EAKA6nB,cAAiB;IACf,MAAM;MAACr2B,GAAG;MAAExH,SAAS;QAAC6a;MAAAA,CAAgB;MAAE/Y,IAAI;MAAEH;MAAKqU;MAAOD;IAAM,CAAC,GAAG,IAAI;IACxE,IAAI8E,eAAiB;MACnBrT,IAAIs2B,IAAI;MACRt2B,IAAIoT,SAAS,GAAGC;MAChBrT,IAAIu2B,QAAQ,CAACj8B,IAAMH,OAAKqU,KAAOD;MAC/BvO,IAAIw2B,OAAO;;EAEf;EAEA3mB,qBAAqB3W,KAAK,EAAE;IAC1B,MAAMwU,IAAO,OAAI,CAAClV,OAAO,CAACkV,IAAI;IAC9B,IAAI,CAAC,IAAI,CAACuiB,UAAU,MAAM,CAACviB,KAAKmK,OAAO,EAAE;MACvC,OAAO;;IAET,MAAMvN,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMpP,QAAQoP,MAAMmsB,SAAS,CAACj8B,CAAKA,MAAEtB,KAAK,KAAKA;IAC/C,IAAIgC,SAAS,CAAG;MACd,MAAMvB,OAAO+T,IAAKsf,WAAU,CAAC,IAAI,CAACrpB,UAAU,CAACzI;MAC7C,OAAOvB,KAAK8Z,SAAS;;IAEvB,OAAO;EACT;EAKAijB,SAAS1wB,SAAS,EAAE;IAClB,MAAM0H,IAAO,OAAI,CAAClV,OAAO,CAACkV,IAAI;IAC9B,MAAM1N,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMxN,KAAQ,OAAI,CAAC65B,cAAc,KAAK,IAAI,CAACA,cAAc,GAAG,IAAI,CAAC6G,qBAAqB,CAACltB,SAAS;IAChG,IAAItT,CAAGuI;IAEP,MAAM07B,QAAW,IAACC,EAAIC,MAAI3jB,KAAU;MAClC,IAAI,CAACA,KAAM1E,MAAK,IAAI,CAAC0E,MAAMte,KAAK,EAAE;QAChC;;MAEFoL,IAAIs2B,IAAI;MACRt2B,GAAIyT,UAAS,GAAGP,MAAM1E,KAAK;MAC3BxO,GAAIsT,YAAW,GAAGJ,MAAMte,KAAK;MAC7BoL,IAAI82B,WAAW,CAAC5jB,KAAMqhB,WAAU,IAAI,EAAE;MACtCv0B,GAAI+2B,eAAc,GAAG7jB,MAAMuhB,gBAAgB;MAE3Cz0B,IAAIg3B,SAAS;MACbh3B,IAAIi3B,MAAM,CAACL,GAAG38B,CAAC,EAAE28B,GAAG18B,CAAC;MACrB8F,IAAIk3B,MAAM,CAACL,GAAG58B,CAAC,EAAE48B,GAAG38B,CAAC;MACrB8F,IAAIm3B,MAAM;MACVn3B,IAAIw2B,OAAO;IACb;IAEA,IAAI9oB,KAAKmK,OAAO,EAAE;MAChB,KAAKnlB,IAAI,GAAGuI,IAAOzI,SAAMC,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;QAC9C,MAAME,OAAOJ,KAAK,CAACE,CAAE;QAErB,IAAIgb,KAAK0pB,eAAe,EAAE;UACxBT,QACE;YAAC18B,GAAGrH,KAAKkhC,EAAE;YAAE55B,GAAGtH,KAAKmhC;WACrB;YAAC95B,GAAGrH,KAAKohC,EAAE;YAAE95B,GAAGtH,KAAKqhC;WACrBrhC;;QAIJ,IAAI8a,KAAKmd,SAAS,EAAE;UAClB8L,QACE;YAAC18B,GAAGrH,KAAK8gC,GAAG;YAAEx5B,GAAGtH,KAAK+gC;WACtB;YAAC15B,GAAGrH,KAAKghC,GAAG;YAAE15B,GAAGtH,KAAKihC;WACtB;YACEj/B,OAAOhC,KAAK+hC,SAAS;YACrBnmB,OAAO5b,KAAKm9B,SAAS;YACrBwE,YAAY3hC,KAAKgiC,cAAc;YAC/BH,kBAAkB7hC,KAAKiiC;UACzB;;MAGN;;EAEJ;EAKAwC,UAAa;IACX,MAAM;MAACrmC;MAAOgP;MAAKxH,OAAS;QAAC+e,MAAM;QAAE7J;MAAI;IAAC,CAAC,GAAG,IAAI;IAClD,MAAM0lB,aAAa7b,MAAOyV,WAAU,CAAC,IAAI,CAACrpB,UAAU;IACpD,MAAM0vB,YAAY9b,MAAOM,QAAO,GAAGub,UAAW5kB,MAAK,GAAG,CAAC;IACvD,IAAI,CAAC6kB,SAAW;MACd;;IAEF,MAAMiE,gBAAgB5pB,KAAKsf,UAAU,CAAC,IAAI,CAACrpB,UAAU,CAAC,IAAI8P,SAAS;IACnE,MAAM+f,cAAc,IAAI,CAAC1G,YAAY;IACrC,IAAIgH,IAAIE,IAAID,EAAIE;IAEhB,IAAI,IAAI,CAAC9nB,YAAY,EAAI;MACvB2nB,KAAKlB,YAAY5hC,KAAO,MAAI,CAACsJ,IAAI,EAAE+4B,aAAaA,SAAY;MAC5DW,KAAKpB,YAAY5hC,KAAO,MAAI,CAACoJ,KAAK,EAAEk9B,iBAAiBA,aAAgB;MACrEvD,KAAKE,EAAKT;KACL;MACLO,KAAKnB,YAAY5hC,KAAO,MAAI,CAACmJ,GAAG,EAAEk5B,aAAaA,SAAY;MAC3DY,KAAKrB,YAAY5hC,KAAO,MAAI,CAACqJ,MAAM,EAAEi9B,iBAAiBA,aAAgB;MACtExD,KAAKE,EAAKR;;IAEZxzB,IAAIs2B,IAAI;IACRt2B,GAAIyT,UAAS,GAAG2f,WAAW5kB,KAAK;IAChCxO,GAAIsT,YAAW,GAAG8f,WAAWx+B,KAAK;IAElCoL,IAAIg3B,SAAS;IACbh3B,GAAIi3B,OAAM,CAACnD,EAAIC;IACf/zB,GAAIk3B,OAAM,CAAClD,EAAIC;IACfj0B,IAAIm3B,MAAM;IAEVn3B,IAAIw2B,OAAO;EACb;EAKAe,WAAWvxB,SAAS,EAAE;IACpB,MAAM+sB,WAAc,OAAI,CAACv6B,OAAO,CAAC8R,KAAK;IAEtC,IAAI,CAACyoB,WAAYlb,QAAO,EAAE;MACxB;;IAGF,MAAM7X,MAAM,IAAI,CAACA,GAAG;IAEpB,MAAM+F,OAAO,IAAI,CAACqwB,iBAAiB;IACnC,IAAIrwB,IAAM;MACRyxB,SAASx3B,GAAK+F;;IAGhB,MAAMvT,KAAQ,OAAI,CAACg7B,aAAa,CAACxnB;IACjC,KAAK,MAAMpT,QAAQJ,KAAO;MACxB,MAAMilC,oBAAoB7kC,KAAK4F,OAAO;MACtC,MAAMy5B,WAAWr/B,KAAKo4B,IAAI;MAC1B,MAAMtlB,QAAQ9S,KAAK8S,KAAK;MACxB,MAAMxL,IAAItH,KAAKuiC,UAAU;MACzBuC,WAAW13B,GAAK0F,SAAO,CAAGxL,KAAG+3B,QAAUwF;IACzC;IAEA,IAAI1xB,IAAM;MACR4xB,UAAW33B;;EAEf;EAKA43B,SAAY;IACV,MAAM;MAAC53B;MAAKxH,SAAS;QAACwiB,QAAQ;QAAEyV,KAAK;QAAE72B;MAAO;IAAC,CAAC,GAAG,IAAI;IAEvD,IAAI,CAAC62B,KAAM5Y,QAAO,EAAE;MAClB;;IAGF,MAAMmT,OAAOC,MAAOwF,OAAMzF,IAAI;IAC9B,MAAM9J,UAAUO,SAAUgP,OAAMvP,OAAO;IACvC,MAAM0I,QAAQ6G,MAAM7G,KAAK;IACzB,IAAInc,SAASud,IAAKG,WAAU,GAAG;IAE/B,IAAInQ,QAAa,iBAAYA,QAAa,iBAAYvjB,SAASujB,QAAW;MACxEvN,UAAUyT,QAAQ7mB,MAAM;MACxB,IAAIlC,QAAQs4B,KAAMtd,KAAI,CAAG;QACvB1F,MAAUud,SAAKG,UAAU,IAAIsF,MAAMtd,IAAI,CAAC1gB,MAAM,GAAG;;KAE9C;MACLgb,UAAUyT,QAAQ/mB,GAAG;;IAGvB,MAAM;MAACsxB;MAAQC;MAAQ5W,QAAQ;MAAEpE;IAAQ,CAAC,GAAG8a,UAAU,IAAI,EAAE/d,QAAQuN,QAAU4O;IAE/E8N,WAAW13B,KAAKywB,KAAMtd,KAAI,EAAE,GAAG,GAAG6X,IAAM;MACtCp2B,OAAO67B,MAAM77B,KAAK;MAClBkgB;MACApE;MACAukB,SAAW3J,aAAW1B,OAAO5O,QAAUphB;MACvCw7B,YAAc;MACde,WAAa,GAAC1K,QAAQC;IACxB;EACF;EAEA/4B,KAAKqT,SAAS,EAAE;IACd,IAAI,CAAC,IAAI,CAACiqB,UAAU,EAAI;MACtB;;IAGF,IAAI,CAACoG,cAAc;IACnB,IAAI,CAACK,QAAQ,CAAC1wB;IACd,IAAI,CAACqxB,UAAU;IACf,IAAI,CAACO,SAAS;IACd,IAAI,CAACL,UAAU,CAACvxB;EAClB;EAMAob,OAAU;IACR,MAAMznB,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAMq/B,KAAKl+B,KAAK2Q,KAAK,IAAI3Q,KAAK2Q,KAAK,CAAC+W,CAAC,IAAI;IACzC,MAAMyW,KAAKn2B,cAAehI,MAAK+T,IAAI,IAAI/T,KAAK+T,IAAI,CAAC2T,CAAC,EAAE,CAAC;IACrD,MAAM0W,KAAKp2B,eAAehI,IAAK4d,OAAM,IAAI5d,IAAK4d,OAAM,CAAC8J,CAAC,EAAE;IAExD,IAAI,CAAC,IAAI,CAAC4O,UAAU,EAAM,QAAI,CAACt9B,IAAI,KAAKk5B,MAAMjS,SAAS,CAACjnB,IAAI,EAAE;MAE5D,OAAO,CAAC;QACN0uB,CAAGwW;QACHllC,MAAOqT,SAAc;UACnB,IAAI,CAACrT,IAAI,CAACqT;QACZ;MACF,EAAE;;IAGJ,OAAO,CAAC;MACNqb,CAAGyW;MACHnlC,MAAOqT,SAAc;QACnB,IAAI,CAACqwB,cAAc;QACnB,IAAI,CAACK,QAAQ,CAAC1wB;QACd,IAAI,CAAC4xB,SAAS;MAChB;IACF,GAAG;MACDvW,CAAG0W;MACHplC,MAAM,MAAM;QACV,IAAI,CAAC0kC,UAAU;MACjB;IACF,GAAG;MACDhW,CAAGwW;MACHllC,MAAOqT,SAAc;QACnB,IAAI,CAACuxB,UAAU,CAACvxB;MAClB;IACF,EAAE;EACJ;EAOAvI,wBAAwBtM,IAAI,EAAE;IAC5B,MAAMi8B,KAAQ,OAAI,CAACp8B,KAAK,CAACkqB,4BAA4B;IACrD,MAAM8c,MAAS,OAAI,CAAC97B,IAAI,GAAG;IAC3B,MAAMotB,SAAS,EAAE;IACjB,IAAI52B,CAAGuI;IAEP,KAAKvI,IAAI,GAAGuI,IAAOmyB,SAAM36B,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC9C,MAAMoJ,OAAOsxB,KAAK,CAAC16B,CAAE;MACrB,IAAIoJ,IAAI,CAACk8B,MAAO,MAAK,IAAI,CAACr7B,EAAE,KAAK,CAACxL,IAAQ2K,SAAK3K,IAAI,KAAKA,IAAG,CAAI;QAC7Dm4B,OAAO51B,IAAI,CAACoI;;IAEhB;IACA,OAAOwtB;EACT;EAOA8I,wBAAwBl3B,KAAK,EAAE;IAC7B,MAAMvB,IAAO,OAAI,CAACnB,OAAO,CAAC8R,KAAK,CAAC0iB,UAAU,CAAC,IAAI,CAACrpB,UAAU,CAACzI;IAC3D,OAAO+vB,OAAOtxB,KAAKqxB,IAAI;EACzB;EAKAiN,UAAa;IACX,MAAMC,WAAW,IAAI,CAAC9F,uBAAuB,CAAC,GAAGjH,UAAU;IAC3D,OAAO,CAAC,IAAI,CAAChf,YAAY,EAAK,OAAI,CAACqC,KAAK,GAAG,IAAI,CAACD,MAAM,IAAI2pB;EAC5D;AACF;ACvqDe,MAAMC;EACnB3nC,YAAYW,IAAI,EAAEinC,KAAK,EAAE1e,QAAQ,EAAE;IACjC,IAAI,CAACvoB,IAAI,GAAGA;IACZ,IAAI,CAACinC,KAAK,GAAGA;IACb,IAAI,CAAC1e,QAAQ,GAAGA;IAChB,IAAI,CAAClnB,KAAK,GAAGmF,MAAO0gC,OAAM,CAAC,IAAI;EACjC;EAEAC,UAAUnnC,IAAI,EAAE;IACd,OAAOwG,MAAOiiB,UAAS,CAAC2e,aAAa,CAACtmC,IAAI,CAAC,IAAI,CAACd,IAAI,CAACyoB,SAAS,EAAEzoB,KAAKyoB,SAAS;EAChF;EAMA4e,SAAS5lC,IAAI,EAAE;IACb,MAAM6lC,QAAQ9gC,MAAO+gC,eAAc,CAAC9lC;IACpC,IAAI+lC;IAEJ,IAAIC,kBAAkBH,KAAQ;MAE5BE,WAAc,OAAI,CAACH,QAAQ,CAACC;;IAG9B,MAAMjmC,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMmK,KAAK/J,KAAK+J,EAAE;IAClB,MAAMy7B,KAAQ,OAAI,CAACA,KAAK,GAAG,GAAMz7B;IAEjC,IAAI,CAACA,EAAI;MACP,MAAM,IAAI6c,KAAM,8BAA6B5mB,IAAM;;IAGrD,IAAI+J,MAAMnK,KAAO;MAEf,OAAO4lC;;IAGT5lC,KAAK,CAACmK,GAAG,GAAG/J;IACZimC,iBAAiBjmC,MAAMwlC,KAAOO;IAC9B,IAAI,IAAI,CAACjf,QAAQ,EAAE;MACjB7hB,SAAS6hB,QAAQ,CAAC9mB,KAAK+J,EAAE,EAAE/J,KAAK2a,SAAS;;IAG3C,OAAO6qB;EACT;EAMAjlC,IAAIwJ,EAAE,EAAE;IACN,OAAO,IAAI,CAACnK,KAAK,CAACmK,EAAG;EACvB;EAKAm8B,WAAWlmC,IAAI,EAAE;IACf,MAAMJ,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMmK,KAAK/J,KAAK+J,EAAE;IAClB,MAAMy7B,QAAQ,IAAI,CAACA,KAAK;IAExB,IAAIz7B,MAAMnK,KAAO;MACf,OAAOA,KAAK,CAACmK,EAAG;;IAGlB,IAAIy7B,KAASz7B,UAAM9E,QAAQ,CAACugC,MAAM,EAAE;MAClC,OAAOvgC,QAAQ,CAACugC,KAAM,EAACz7B,EAAG;MAC1B,IAAI,IAAI,CAAC+c,QAAQ,EAAE;QACjB,OAAOnM,SAAS,CAAC5Q,EAAG;;;EAG1B;AACF;AAEA,SAASk8B,iBAAiBjmC,IAAI,EAAEwlC,KAAK,EAAEO,WAAW,EAAE;EAElD,MAAMI,eAAeC,KAAMrhC,QAAO0gC,MAAM,CAAC,IAAI,CAAG,GAC9CM,cAAc9gC,QAAS1E,IAAG,CAACwlC,eAAe,EAAE,EAC5C9gC,SAAS1E,GAAG,CAACilC,QACbxlC,KAAKiF,QAAQ,CACd;EAEDA,QAASvE,IAAG,CAAC8kC,KAAOW;EAEpB,IAAInmC,KAAK20B,aAAa,EAAE;IACtB0R,aAAcb,QAAOxlC,KAAK20B,aAAa;;EAGzC,IAAI30B,KAAK4f,WAAW,EAAE;IACpB3a,SAASqhC,QAAQ,CAACd,KAAOxlC,OAAK4f,WAAW;;AAE7C;AAEA,SAASymB,aAAcb,MAAK,EAAEe,MAAM,EAAE;EACpCxhC,OAAOC,IAAI,CAACuhC,QAAQ3nC,OAAO,CAAC4nC,QAAY;IACtC,MAAMC,gBAAgBD,QAASE,MAAK,CAAC;IACrC,MAAMC,aAAaF,cAAcrmC,GAAG;IACpC,MAAMwmC,WAAc,IAACpB,MAAM,CAACxuB,MAAM,CAACyvB,aAAeI,MAAI,CAAC;IACvD,MAAMC,QAAQP,MAAM,CAACC,QAAS,EAACE,KAAK,CAAC;IACrC,MAAMK,aAAaD,MAAM1mC,GAAG;IAC5B,MAAM4mC,cAAcF,KAAMD,KAAI,CAAC;IAC/B5hC,SAASgiC,KAAK,CAACL,WAAaD,cAAYK,WAAaD;EACvD;AACF;AAEA,SAASf,kBAAkBH,KAAK,EAAE;EAChC,OAAO,QAAQA,SAAS,UAAcA;AACxC;AC1GO,MAAMqB;EACXtpC,WAAc;IACZ,IAAI,CAACupC,WAAW,GAAG,IAAI5B,aAAcv4B,oBAAmB,YAAY,IAAI;IACxE,IAAI,CAACkG,QAAQ,GAAG,IAAIqyB,cAAc7Q,OAAS;IAC3C,IAAI,CAACzU,OAAO,GAAG,IAAIslB,cAAcxgC,MAAQ;IACzC,IAAI,CAAC4G,MAAM,GAAG,IAAI45B,cAActM,KAAO;IAGvC,IAAI,CAACmO,gBAAgB,GAAG,CAAC,IAAI,CAACD,WAAW,EAAE,IAAI,CAACx7B,MAAM,EAAE,IAAI,CAACuH,QAAQ,CAAC;EACxE;EAKAnS,MAAa;IAAA,kCAANoV,IAAI;MAAJA,IAAI;IAAA;IACT,IAAI,CAACkxB,KAAK,CAAC,UAAYlxB;EACzB;EAEA3U,MAAO,GAAS;IAAA,mCAAN2U,IAAI;MAAJA,IAAI;IAAA;IACZ,IAAI,CAACkxB,KAAK,CAAC,YAAclxB;EAC3B;EAKAmxB,iBAAwB;IAAA,mCAANnxB,IAAI;MAAJA,IAAI;IAAA;IACpB,IAAI,CAACkxB,KAAK,CAAC,YAAYlxB,IAAM,MAAI,CAACgxB,WAAW;EAC/C;EAKA94B,cAAqB;IAAA,mCAAN8H,IAAI;MAAJA,IAAI;IAAA;IACjB,IAAI,CAACkxB,KAAK,CAAC,YAAYlxB,IAAM,MAAI,CAACjD,QAAQ;EAC5C;EAKAq0B,aAAoB;IAAA,mCAANpxB,IAAI;MAAJA,IAAI;IAAA;IAChB,IAAI,CAACkxB,KAAK,CAAC,YAAYlxB,IAAM,MAAI,CAAC8J,OAAO;EAC3C;EAKAunB,YAAmB;IAAA,mCAANrxB,IAAI;MAAJA,IAAI;IAAA;IACf,IAAI,CAACkxB,KAAK,CAAC,YAAYlxB,IAAM,MAAI,CAACxK,MAAM;EAC1C;EAMA87B,cAAc19B,EAAE,EAAE;IAChB,OAAO,IAAI,CAAC29B,IAAI,CAAC39B,IAAI,IAAI,CAACo9B,WAAW,EAAE;EACzC;EAMAzgB,WAAW3c,EAAE,EAAE;IACb,OAAO,IAAI,CAAC29B,IAAI,CAAC39B,IAAI,IAAI,CAACmJ,QAAQ,EAAE;EACtC;EAMAy0B,UAAU59B,EAAE,EAAE;IACZ,OAAO,IAAI,CAAC29B,IAAI,CAAC39B,IAAI,IAAI,CAACkW,OAAO,EAAE;EACrC;EAMA2nB,SAAS79B,EAAE,EAAE;IACX,OAAO,IAAI,CAAC29B,IAAI,CAAC39B,IAAI,IAAI,CAAC4B,MAAM,EAAE;EACpC;EAKAk8B,oBAA2B;IAAA,mCAAN1xB,IAAI;MAAJA,IAAI;IAAA;IACvB,IAAI,CAACkxB,KAAK,CAAC,cAAclxB,IAAM,MAAI,CAACgxB,WAAW;EACjD;EAKAW,iBAAwB;IAAA,mCAAN3xB,IAAI;MAAJA,IAAI;IAAA;IACpB,IAAI,CAACkxB,KAAK,CAAC,cAAclxB,IAAM,MAAI,CAACjD,QAAQ;EAC9C;EAKA60B,gBAAuB;IAAA,mCAAN5xB,IAAI;MAAJA,IAAI;IAAA;IACnB,IAAI,CAACkxB,KAAK,CAAC,cAAclxB,IAAM,MAAI,CAAC8J,OAAO;EAC7C;EAKA+nB,eAAsB;IAAA,oCAAN7xB,IAAI;MAAJA,IAAI;IAAA;IAClB,IAAI,CAACkxB,KAAK,CAAC,cAAclxB,IAAM,MAAI,CAACxK,MAAM;EAC5C;EAKA07B,MAAM9iC,MAAM,EAAE4R,IAAI,EAAE8xB,aAAa,EAAE;IACjC,CAAI9xB,QAAK,CAACvX,OAAO,CAACspC,GAAO;MACvB,MAAMC,GAAMF,oBAAiB,IAAI,CAACG,mBAAmB,CAACF;MACtD,IAAID,aAAiBE,QAAIzC,SAAS,CAACwC,GAASC,aAAQ,IAAI,CAACloB,OAAO,IAAIioB,GAAIn+B,GAAE,EAAG;QAC3E,IAAI,CAACs+B,KAAK,CAAC9jC,QAAQ4jC,GAAKD;OACnB;QAKLlZ,IAAKkZ,MAAKloC,IAAQ;UAOhB,MAAMsoC,OAAUL,oBAAiB,IAAI,CAACG,mBAAmB,CAACpoC;UAC1D,IAAI,CAACqoC,KAAK,CAAC9jC,QAAQ+jC,OAAStoC;QAC9B;;IAEJ;EACF;EAKAqoC,MAAM9jC,MAAM,EAAEkiB,QAAQ,EAAE8hB,SAAS,EAAE;IACjC,MAAMC,cAAcC,WAAYlkC;IAChClF,QAAKkpC,UAAS,CAAC,QAAWC,eAAY,EAAE,EAAE,EAAED;IAC5C9hB,QAAQ,CAACliB,OAAO,CAACgkC;IACjBlpC,QAAKkpC,UAAS,CAAC,OAAUC,eAAY,EAAE,EAAE,EAAED;EAC7C;EAKAH,oBAAoB7pC,IAAI,EAAE;IACxB,KAAK,IAAIuB,CAAI,MAAGA,CAAI,OAAI,CAACsnC,gBAAgB,CAACvnC,MAAM,EAAEC,CAAK;MACrD,MAAMqoC,GAAM,OAAI,CAACf,gBAAgB,CAACtnC,CAAE;MACpC,IAAIqoC,IAAIzC,SAAS,CAACnnC,IAAO;QACvB,OAAO4pC;;IAEX;IAEA,OAAO,IAAI,CAACloB,OAAO;EACrB;EAKAynB,KAAK39B,EAAE,EAAEk+B,aAAa,EAAE1pC,IAAI,EAAE;IAC5B,MAAMyB,OAAOioC,aAAc1nC,IAAG,CAACwJ;IAC/B,IAAI/J,SAAS9B,SAAW;MACtB,MAAM,IAAI0oB,KAAM,OAAM7c,EAAK,8BAA2BxL,OAAO,GAAK;;IAEpE,OAAOyB;EACT;AAEF;AAGA,eAAe,eAAgB,IAAIknC,QAAW;ACtK/B,MAAMwB;EACnB9qC,WAAc;IACZ,IAAI,CAAC+qC,KAAK,GAAG,EAAE;EACjB;EAYAC,OAAOxqC,KAAK,EAAEyqC,IAAI,EAAE1yB,IAAI,EAAEvK,MAAM,EAAE;IAChC,IAAIi9B,SAAS,YAAc;MACzB,IAAI,CAACF,KAAK,GAAG,IAAI,CAACG,kBAAkB,CAAC1qC,OAAO,IAAI;MAChD,IAAI,CAACD,OAAO,CAAC,IAAI,CAACwqC,KAAK,EAAEvqC,KAAO;;IAGlC,MAAMwhB,WAAchU,YAAS,IAAI,CAACm9B,YAAY,CAAC3qC,OAAOwN,MAAM,CAACA,MAAU,QAAI,CAACm9B,YAAY,CAAC3qC,KAAM;IAC/F,MAAMs4B,SAAS,IAAI,CAACv4B,OAAO,CAACyhB,aAAaxhB,OAAOyqC,IAAM1yB;IAEtD,IAAI0yB,SAAS,cAAgB;MAC3B,IAAI,CAAC1qC,OAAO,CAACyhB,aAAaxhB,KAAO;MACjC,IAAI,CAACD,OAAO,CAAC,IAAI,CAACwqC,KAAK,EAAEvqC,KAAO;;IAElC,OAAOs4B;EACT;EAKAv4B,QAAQyhB,WAAW,EAAExhB,KAAK,EAAEyqC,IAAI,EAAE1yB,IAAI,EAAE;IACtCA,OAAOA,QAAQ,EAAC;IAChB,KAAK,MAAM6yB,cAAcppB,WAAa;MACpC,MAAMqpB,SAASD,WAAWC,MAAM;MAChC,MAAM1kC,SAAS0kC,MAAM,CAACJ,IAAK;MAC3B,MAAMld,MAAS,IAACvtB,OAAO+X,MAAM6yB,WAAWpjC,OAAO,CAAC;MAChD,IAAIsjC,SAAa3kC,QAAQonB,MAAQsd,cAAY,KAAK,IAAI9yB,KAAKgzB,UAAU,EAAE;QACrE,OAAO,KAAK;;IAEhB;IAEA,OAAO,IAAI;EACb;EAEAC,UAAa;IAMX,IAAI,CAAClxB,cAAc,IAAI,CAACrB,MAAM,CAAG;MAC/B,IAAI,CAACwyB,SAAS,GAAG,IAAI,CAACxyB,MAAM;MAC5B,IAAI,CAACA,MAAM,GAAG3Y;;EAElB;EAMA6qC,aAAa3qC,KAAK,EAAE;IAClB,IAAI,IAAI,CAACyY,MAAM,EAAE;MACf,OAAO,IAAI,CAACA,MAAM;;IAGpB,MAAM+I,cAAc,IAAI,CAAC/I,MAAM,GAAG,IAAI,CAACiyB,kBAAkB,CAAC1qC;IAE1D,IAAI,CAACkrC,mBAAmB,CAAClrC;IAEzB,OAAOwhB;EACT;EAEAkpB,kBAAmB1qC,MAAK,EAAEuI,GAAG,EAAE;IAC7B,MAAMlC,SAASrG,KAASA,UAAMqG,MAAM;IACpC,MAAMmB,UAAUmJ,cAAetK,QAAOmB,OAAO,IAAInB,OAAOmB,OAAO,CAACqa,OAAO,EAAE,EAAC;IAC1E,MAAMA,UAAUspB,UAAW9kC;IAE3B,OAAOmB,YAAY,KAAK,IAAI,CAACe,MAAM,EAAE,GAAG6iC,iBAAkBprC,QAAO6hB,OAASra,WAASe,GAAI;EACzF;EAMA2iC,oBAAoBlrC,KAAK,EAAE;IACzB,MAAMqrC,mBAAsB,OAAI,CAACJ,SAAS,IAAI,EAAE;IAChD,MAAMzpB,cAAc,IAAI,CAAC/I,MAAM;IAC/B,MAAMuQ,OAAO,CAACjQ,CAAGrP,QAAMqP,EAAEvL,MAAM,CAACvE,KAAK,CAACS,EAAE4hC,IAAI,CAACpiC,CAAKD,MAAE4hC,MAAM,CAACl/B,EAAE,KAAKzC,EAAE2hC,MAAM,CAACl/B,EAAE;IAC7E,IAAI,CAAC5L,OAAO,CAACipB,IAAKqiB,sBAAqB7pB,cAAcxhB,KAAO;IAC5D,IAAI,CAACD,OAAO,CAACipB,IAAKxH,cAAa6pB,sBAAsBrrC,KAAO;EAC9D;AACF;AAKA,SAASmrC,UAAW9kC,OAAM,EAAE;EAC1B,MAAMklC,WAAW,EAAC;EAClB,MAAM1pB,UAAU,EAAE;EAClB,MAAMjb,OAAOD,MAAOC,KAAI,CAACyhB,QAASxG,QAAO,CAACrgB,KAAK;EAC/C,KAAK,IAAIE,CAAI,MAAGA,IAAIkF,IAAKnF,OAAM,EAAEC,CAAK;IACpCmgB,QAAQnf,IAAI,CAAC2lB,SAASkhB,SAAS,CAAC3iC,IAAI,CAAClF,CAAE;EACzC;EAEA,MAAM8pC,KAAQnlC,UAAOwb,OAAO,IAAI,EAAE;EAClC,KAAK,IAAIngB,CAAI,MAAGA,IAAI8pC,KAAM/pC,OAAM,EAAEC,CAAK;IACrC,MAAMmpC,SAASW,KAAK,CAAC9pC,CAAE;IAEvB,IAAImgB,OAAQ/D,QAAO,CAAC+sB,YAAY,CAAC,CAAG;MAClChpB,QAAQnf,IAAI,CAACmoC;MACbU,QAAQ,CAACV,OAAOl/B,EAAE,CAAC,GAAG,IAAI;;EAE9B;EAEA,OAAO;IAACkW;IAAS0pB;EAAQ;AAC3B;AAEA,SAASE,OAAQjkC,QAAO,EAAEe,GAAG,EAAE;EAC7B,IAAI,CAACA,OAAOf,OAAY,UAAK,EAAE;IAC7B,OAAO,IAAI;;EAEb,IAAIA,YAAY,IAAI,EAAE;IACpB,OAAO,EAAC;;EAEV,OAAOA;AACT;AAEA,SAAS4jC,iBAAkBprC,MAAK,SAAuBwH,OAAO,EAAEe,GAAG,EAAE;EAAA,IAAnC;IAACsZ,OAAO;IAAE0pB;EAAQ,CAAC;EACnD,MAAMjT,SAAS,EAAE;EACjB,MAAMjjB,UAAUrV,MAAM2S,UAAU;EAEhC,KAAK,MAAMk4B,UAAUhpB,OAAS;IAC5B,MAAMlW,KAAKk/B,OAAOl/B,EAAE;IACpB,MAAMhD,IAAO8iC,WAAQjkC,OAAO,CAACmE,GAAG,EAAEpD;IAClC,IAAII,SAAS,IAAI,EAAE;MACjB;;IAEF2vB,OAAO51B,IAAI,CAAC;MACVmoC;MACArjC,OAASkkC,aAAW1rC,KAAMqG,OAAM,EAAE;QAACwkC;QAAQW,KAAOD,UAAQ,CAAC5/B,EAAG;MAAA,GAAGhD,IAAM0M;IACzE;EACF;EAEA,OAAOijB;AACT;AAEA,SAASoT,UAAWrlC,OAAM,SAAmBsC,IAAI,EAAE0M,OAAO,EAAE;EAAA,IAAhC;IAACw1B,MAAM;IAAEW;EAAK,CAAC;EACzC,MAAM5kC,OAAOP,MAAOslC,gBAAe,CAACd;EACpC,MAAMr4B,MAASnM,UAAOoM,eAAe,CAAC9J,IAAM/B;EAC5C,IAAI4kC,SAASX,MAAOhkC,SAAQ,EAAE;IAE5B2L,MAAO9P,KAAI,CAACmoC,OAAOhkC,QAAQ;;EAE7B,OAAOR,MAAOqM,eAAc,CAACF,QAAQ6C,OAAS,GAAC,GAAG,EAAE;IAElDu2B,YAAY,KAAK;IACjBC,WAAW,KAAK;IAChBC,SAAS;EACX;AACF;AClLO,SAASC,aAAa5rC,IAAI,EAAEqH,OAAO,EAAE;EAC1C,MAAMwkC,kBAAkBnlC,QAAS0K,SAAQ,CAACpR,KAAK,IAAI,EAAC;EACpD,MAAM8rC,cAAiB,GAACzkC,SAAQ+J,QAAQ,IAAI,EAAC,EAAGpR,IAAK,KAAI,EAAC;EAC1D,OAAO8rC,eAAej7B,SAAS,IAAIxJ,QAAQwJ,SAAS,IAAIg7B,gBAAgBh7B,SAAS,IAAI;AACvF;AAEA,SAASk7B,yBAA0BvgC,GAAE,EAAEqF,SAAS,EAAE;EAChD,IAAI9F,IAAOS;EACX,IAAIA,OAAO,SAAW;IACpBT,IAAO8F;GACF,UAAIrF,OAAO,SAAW;IAC3BT,IAAO8F,iBAAc,GAAM,SAAM,GAAG;;EAEtC,OAAO9F;AACT;AAEA,SAASihC,yBAA0BjhC,KAAI,EAAE8F,SAAS,EAAE;EAClD,OAAO9F,SAAS8F,SAAY,eAAY,SAAS;AACnD;AAEA,SAASo7B,cAAczgC,EAAE,EAAE;EACzB,IAAIA,EAAO,YAAOA,EAAO,YAAOA,OAAO,GAAK;IAC1C,OAAOA;;AAEX;AAEA,SAAS0gC,iBAAiBriB,QAAQ,EAAE;EAClC,IAAIA,aAAa,KAASA,iBAAa,QAAU;IAC/C,OAAO;;EAET,IAAIA,aAAa,MAAUA,iBAAa,OAAS;IAC/C,OAAO;;AAEX;AAEO,SAASsiB,aAAc3gC,GAAE,EAAmB;EACjD,IAAIygC,cAAczgC,EAAK;IACrB,OAAOA;;EACR,oCAHkC4gC,YAAY;IAAZA,YAAY;EAAA;EAI/C,KAAK,MAAM5jC,QAAQ4jC,YAAc;IAC/B,MAAMrhC,OAAOvC,IAAKuC,KAAI,IACjBmhC,iBAAiB1jC,KAAKqhB,QAAQ,KAC9Bre,EAAGlK,OAAM,GAAG,CAAK2qC,kBAAczgC,EAAE,CAAC,EAAE,CAAC6gC,WAAW;IACrD,IAAIthC,IAAM;MACR,OAAOA;;EAEX;EACA,MAAM,IAAIsd,MAAO,6BAA4B7c,EAAG,qDAAoD,CAAE;AACxG;AAEA,SAAS8gC,mBAAmB9gC,EAAE,EAAET,IAAI,EAAE2C,OAAO,EAAE;EAC7C,IAAIA,OAAO,CAAC3C,IAAO,YAAS,KAAKS,EAAI;IACnC,OAAO;MAACT;IAAI;;AAEhB;AAEA,SAASwhC,wBAAyB/gC,GAAE,EAAEtF,MAAM,EAAE;EAC5C,IAAIA,OAAOwE,IAAI,IAAIxE,OAAOwE,IAAI,CAAC0G,QAAQ,EAAE;IACvC,MAAMo7B,UAAUtmC,MAAOwE,KAAI,CAAC0G,QAAQ,CAAC/D,MAAM,CAAEo/B,KAAMA,EAAEl8B,OAAO,KAAK/E,EAAMihC,MAAE/7B,OAAO,KAAKlF;IACrF,IAAIghC,QAAQlrC,MAAM,EAAE;MAClB,OAAOgrC,kBAAmB9gC,KAAI,GAAKghC,SAAO,CAAC,EAAE,CAAKF,uBAAmB9gC,EAAI,OAAKghC,OAAO,CAAC,CAAE;;;EAG5F,OAAO,EAAC;AACV;AAEA,SAASE,gBAAiBxmC,OAAM,EAAEmB,OAAO,EAAE;EACzC,MAAMslC,gBAAgBvwB,SAAS,CAAClW,MAAOlG,KAAI,CAAC,IAAI;IAACoN,QAAQ;EAAE;EAC3D,MAAMw/B,YAAevlC,WAAQ+F,MAAM,IAAI,EAAC;EACxC,MAAMy/B,cAAiBjB,gBAAa1lC,MAAOlG,KAAI,EAAEqH;EACjD,MAAM+F,MAAS5G,UAAO0gC,MAAM,CAAC,IAAI;EAGjC1gC,OAAOC,IAAI,CAACmmC,cAAcvsC,OAAO,CAACmL,EAAM;IACtC,MAAMshC,YAAYF,YAAY,CAACphC,EAAG;IAClC,IAAI,CAAClF,SAASwmC,SAAY;MACxB,OAAO78B,QAAQ88B,KAAK,CAAE,0CAAyCvhC,EAAG,EAAC;;IAErE,IAAIshC,UAAUE,MAAM,EAAE;MACpB,OAAO/8B,QAAQC,IAAI,CAAE,kDAAiD1E,EAAG,EAAC;;IAE5E,MAAMT,IAAOohC,iBAAc3gC,EAAIshC,aAAWP,wBAAyB/gC,KAAItF,MAASQ,YAAS0G,MAAM,CAAC0/B,SAAU9sC,KAAI,CAAC;IAC/G,MAAMitC,YAAYjB,0BAA0BjhC,IAAM8hC;IAClD,MAAMK,mBAAsBP,iBAAcv/B,MAAM,IAAI,EAAC;IACrDA,MAAM,CAAC5B,GAAG,GAAG2hC,QAAQ3mC,OAAO0gC,MAAM,CAAC,IAAI,CAAG,GAAC;MAACn8B;IAAI,GAAG+hC,WAAWI,mBAAmB,CAACniC,IAAK,GAAEmiC,mBAAmB,CAACD,SAAU,EAAC;EAC1H;EAGA/mC,OAAOwE,IAAI,CAAC0G,QAAQ,CAAC/Q,OAAO,CAACqN,OAAW;IACtC,MAAM1N,IAAO0N,WAAQ1N,IAAI,IAAIkG,OAAOlG,IAAI;IACxC,MAAM6Q,SAAYnD,WAAQmD,SAAS,IAAI+6B,aAAa5rC,IAAMqH;IAC1D,MAAMwkC,eAAkBzvB,YAAS,CAACpc,KAAK,IAAI,EAAC;IAC5C,MAAMktC,mBAAsBrB,mBAAgBz+B,MAAM,IAAI,EAAC;IACvD5G,OAAOC,IAAI,CAACymC,qBAAqB7sC,OAAO,CAAC+sC,SAAa;MACpD,MAAMriC,OAAOghC,0BAA0BqB,SAAWv8B;MAClD,MAAMrF,EAAKkC,UAAO,CAAC3C,OAAO,SAAS,IAAIA;MACvCqC,MAAM,CAAC5B,EAAG,IAAG4B,MAAM,CAAC5B,GAAG,IAAIhF,OAAO0gC,MAAM,CAAC,IAAI;MAC7CiG,OAAQ//B,OAAM,CAAC5B,GAAG,EAAE,CAAC;QAACT;MAAI,GAAG6hC,YAAY,CAACphC,EAAG,GAAE0hC,mBAAmB,CAACE,SAAU,EAAC;IAChF;EACF;EAGA5mC,OAAOC,IAAI,CAAC2G,QAAQ/M,OAAO,CAACyG,GAAO;IACjC,MAAMwB,QAAQ8E,MAAM,CAACtG,GAAI;IACzBqmC,QAAQ7kC,KAAO,GAAC5B,SAAS0G,MAAM,CAAC9E,KAAMtI,KAAI,CAAC,EAAE0G,SAAS4B,KAAK,CAAC;EAC9D;EAEA,OAAO8E;AACT;AAEA,SAASigC,YAAYnnC,MAAM,EAAE;EAC3B,MAAMmB,UAAUnB,OAAOmB,OAAO,KAAKnB,MAAOmB,QAAO,GAAG,EAAC;EAErDA,QAAQqa,OAAO,GAAGlR,eAAenJ,OAAQqa,QAAO,EAAE,EAAC;EACnDra,OAAQ+F,OAAM,GAAGs/B,iBAAiBxmC,MAAQmB;AAC5C;AAEA,SAASimC,SAAS5iC,IAAI,EAAE;EACtBA,OAAOA,QAAQ,EAAC;EAChBA,KAAK0G,QAAQ,GAAG1G,IAAK0G,SAAQ,IAAI,EAAE;EACnC1G,KAAKyI,MAAM,GAAGzI,IAAKyI,OAAM,IAAI,EAAE;EAC/B,OAAOzI;AACT;AAEA,SAAS6iC,WAAWrnC,MAAM,EAAE;EAC1BA,SAASA,UAAU,EAAC;EACpBA,OAAOwE,IAAI,GAAG4iC,QAASpnC,QAAOwE,IAAI;EAElC2iC,WAAYnnC;EAEZ,OAAOA;AACT;AAEA,MAAMsnC,WAAW,IAAIhuC;AACrB,MAAMiuC,aAAa,IAAIC;AAEvB,SAASC,UAAWr4B,SAAQ,EAAEs4B,QAAQ,EAAE;EACtC,IAAInnC,OAAO+mC,QAASxrC,IAAG,CAACsT;EACxB,IAAI,CAAC7O,IAAM;IACTA,IAAOmnC;IACPJ,QAASrrC,IAAG,CAACmT,QAAU7O;IACvBgnC,WAAWjrC,GAAG,CAACiE;;EAEjB,OAAOA;AACT;AAEA,MAAMonC,UAAa,IAAC1rC,GAAKua,OAAK5V,GAAQ;EACpC,MAAM0B,OAAOgL,iBAAiBkJ,GAAK5V;EACnC,IAAI0B,SAAS7I,SAAW;IACtBwC,IAAIK,GAAG,CAACgG;;AAEZ;AAEe,MAAMslC;EACnBzuC,YAAY6G,MAAM,EAAE;IAClB,IAAI,CAAC6nC,OAAO,GAAGR,UAAWrnC;IAC1B,IAAI,CAAC8nC,WAAW,GAAG,IAAIxuC;IACvB,IAAI,CAACyuC,cAAc,GAAG,IAAIzuC;EAC5B;EAEA,IAAI0uC,QAAW;IACb,OAAO,IAAI,CAACH,OAAO,CAACG,QAAQ;EAC9B;EAEA,IAAIluC,IAAO;IACT,OAAO,IAAI,CAAC+tC,OAAO,CAAC/tC,IAAI;EAC1B;EAEA,IAAIA,KAAKA,IAAI,EAAE;IACb,IAAI,CAAC+tC,OAAO,CAAC/tC,IAAI,GAAGA;EACtB;EAEA,IAAI0K,IAAO;IACT,OAAO,IAAI,CAACqjC,OAAO,CAACrjC,IAAI;EAC1B;EAEA,IAAIA,KAAKA,IAAI,EAAE;IACb,IAAI,CAACqjC,OAAO,CAACrjC,IAAI,GAAG4iC,QAAS5iC;EAC/B;EAEA,IAAIrD,OAAU;IACZ,OAAO,IAAI,CAAC0mC,OAAO,CAAC1mC,OAAO;EAC7B;EAEA,IAAIA,QAAQA,OAAO,EAAE;IACnB,IAAI,CAAC0mC,OAAO,CAAC1mC,OAAO,GAAGA;EACzB;EAEA,IAAIqa,OAAU;IACZ,OAAO,IAAI,CAACqsB,OAAO,CAACrsB,OAAO;EAC7B;EAEAnc,MAAS;IACP,MAAMW,SAAS,IAAI,CAAC6nC,OAAO;IAC3B,IAAI,CAACI,UAAU;IACfd,WAAYnnC;EACd;EAEAioC,UAAa;IACX,IAAI,CAACH,WAAW,CAACI,KAAK;IACtB,IAAI,CAACH,cAAc,CAACG,KAAK;EAC3B;EAQAh8B,iBAAiBi8B,WAAW,EAAE;IAC5B,OAAOV,WAAWU,aAChB,MAAM,CAAC,CACJ,YAAWA,WAAY,EAAC,EACzB,GACD,CAAC;EACN;EASAr4B,yBAA0Bq4B,YAAW,EAAEt4B,UAAU,EAAE;IACjD,OAAO43B,WAAY,GAAEU,WAAY,eAAct4B,UAAW,EAAC,EACzD,MAAM,CACJ,CACG,YAAWs4B,WAAY,gBAAet4B,UAAW,EAAC,EAClD,eAAcA,UAAW,EAAC,CAC5B,EAED,CACG,YAAWs4B,WAAY,EAAC,EACzB,GACD,CACF;EACL;EAUA54B,uBAAwB44B,YAAW,EAAEj5B,WAAW,EAAE;IAChD,OAAOu4B,WAAY,GAAEU,WAAY,IAAGj5B,WAAY,EAAC,EAC/C,MAAM,CAAC,CACJ,YAAWi5B,WAAY,aAAYj5B,WAAY,EAAC,EAChD,YAAWi5B,WAAY,EAAC,EACxB,YAAWj5B,WAAY,EAAC,EACzB,GACD,CAAC;EACN;EAOAo2B,gBAAgBd,MAAM,EAAE;IACtB,MAAMl/B,KAAKk/B,OAAOl/B,EAAE;IACpB,MAAMxL,OAAO,IAAI,CAACA,IAAI;IACtB,OAAO2tC,WAAY,GAAE3tC,IAAK,WAAUwL,EAAG,EAAC,EACtC,MAAM,CAAC,CACJ,WAAUA,EAAG,EAAC,MACZk/B,MAAO4D,uBAAsB,IAAI,EAAE,EACvC,CAAC;EACN;EAKAC,aAAcC,UAAS,EAAEC,UAAU,EAAE;IACnC,MAAMT,cAAc,IAAI,CAACA,WAAW;IACpC,IAAI34B,QAAQ24B,WAAYhsC,IAAG,CAACwsC;IAC5B,IAAI,CAACn5B,SAASo5B,UAAY;MACxBp5B,QAAQ,IAAI7V;MACZwuC,WAAY7rC,IAAG,CAACqsC,SAAWn5B;;IAE7B,OAAOA;EACT;EAQA/C,gBAAgBk8B,SAAS,EAAEE,QAAQ,EAAED,UAAU,EAAE;IAC/C,MAAM;MAACpnC,OAAO;MAAErH;IAAI,CAAC,GAAG,IAAI;IAC5B,MAAMqV,KAAQ,OAAI,CAACk5B,aAAa,CAACC,SAAWC;IAC5C,MAAMtgC,SAASkH,KAAMrT,IAAG,CAAC0sC;IACzB,IAAIvgC,MAAQ;MACV,OAAOA;;IAGT,MAAMkE,SAAS,IAAIq7B;IAEnBgB,QAASruC,QAAO,CAACoG,IAAQ;MACvB,IAAI+nC,SAAW;QACbn8B,OAAO7P,GAAG,CAACgsC;QACX/nC,KAAKpG,OAAO,CAACyG,GAAO+mC,eAAWx7B,QAAQm8B,SAAW1nC;;MAEpDL,KAAKpG,OAAO,CAACyG,GAAO+mC,eAAWx7B,QAAQhL,OAASP;MAChDL,IAAKpG,QAAO,CAACyG,GAAO+mC,eAAWx7B,MAAQ+J,WAAS,CAACpc,KAAK,IAAI,EAAI8G;MAC9DL,KAAKpG,OAAO,CAACyG,GAAO+mC,eAAWx7B,QAAQ3L,QAAUI;MACjDL,KAAKpG,OAAO,CAACyG,GAAO+mC,eAAWx7B,QAAQgP,WAAava;IACtD;IAEA,MAAMqlB,QAAQjhB,KAAM5H,KAAI,CAAC+O;IACzB,IAAI8Z,MAAM7qB,MAAM,KAAK,CAAG;MACtB6qB,MAAM5pB,IAAI,CAACiE,MAAO0gC,OAAM,CAAC,IAAI;;IAE/B,IAAIuG,WAAWhrC,GAAG,CAACisC,QAAW;MAC5Br5B,KAAMlT,IAAG,CAACusC,QAAUviB;;IAEtB,OAAOA;EACT;EAMAwiB,iBAAoB;IAClB,MAAM;MAACtnC,OAAO;MAAErH;IAAI,CAAC,GAAG,IAAI;IAE5B,OAAO,CACLqH,SACA+U,SAAS,CAACpc,IAAK,KAAI,EAAC,EACpB0G,SAAS0K,QAAQ,CAACpR,IAAK,KAAI,EAAC,EAC5B;MAACA;IAAI,GACL0G,UACA2a,YACD;EACH;EASAzL,oBAAoBvD,MAAM,EAAEsD,KAAK,EAAET,OAAO,EAAmB;IAAA,IAAjBQ,QAAW,wEAAC,GAAG;IACzD,MAAMyiB,MAAS;MAAC1wB,SAAS;IAAI;IAC7B,MAAM;MAACmnC,QAAQ;MAAEC;IAAW,CAAC,GAAGC,YAAY,IAAI,CAACb,cAAc,EAAE57B,MAAQqD;IACzE,IAAIrO,OAAUunC;IACd,IAAIG,YAAYH,UAAUj5B,KAAQ;MAChCwiB,MAAO1wB,QAAO,GAAG,KAAK;MACtByN,OAAU85B,cAAW95B,OAAWA,gBAAYA,OAAO;MAEnD,MAAM+5B,cAAc,IAAI,CAAC18B,cAAc,CAACF,QAAQ6C,OAAS25B;MACzDxnC,OAAU6nC,kBAAeN,UAAU15B,OAAS+5B;;IAG9C,KAAK,MAAM7qC,QAAQuR,KAAO;MACxBwiB,MAAM,CAAC/zB,KAAK,GAAGiD,OAAO,CAACjD,IAAK;IAC9B;IACA,OAAO+zB;EACT;EAQA5lB,cAAeF,OAAM,EAAE6C,OAAO,EAAuC;IAAA,IAArCQ,QAAW,wEAAC,GAAG;IAAA,IAAEy5B,kBAAkB;IACjE,MAAM;MAACP;IAAAA,CAAS,GAAGE,YAAY,IAAI,CAACb,cAAc,EAAE57B,MAAQqD;IAC5D,OAAOpP,SAAS4O,OACZg6B,mBAAeN,UAAU15B,OAASvV,aAAWwvC,sBAC7CP,QAAQ;EACd;AACF;AAEA,SAASE,YAAYM,aAAa,EAAE/8B,MAAM,EAAEqD,QAAQ,EAAE;EACpD,IAAIL,QAAQ+5B,aAAcptC,IAAG,CAACqQ;EAC9B,IAAI,CAACgD,KAAO;IACVA,QAAQ,IAAI7V;IACZ4vC,aAAcjtC,IAAG,CAACkQ,MAAQgD;;EAE5B,MAAMC,WAAWI,SAAS4yB,IAAI;EAC9B,IAAIn6B,SAASkH,KAAMrT,IAAG,CAACsT;EACvB,IAAI,CAACnH,MAAQ;IACX,MAAMygC,WAAWS,gBAAgBh9B,MAAQqD;IACzCvH,MAAS;MACPygC;MACAC,WAAan5B,WAASrI,MAAM,CAACiiC,KAAK,CAACA,CAAEjD,YAAW,EAAGrf,SAAQ,CAAC;IAC9D;IACA3X,KAAMlT,IAAG,CAACmT,QAAUnH;;EAEtB,OAAOA;AACT;AAEA,MAAMohC,cAAcxnC,SAASzB,QAASyB,WACjCvB,OAAOK,mBAAmB,CAACkB,KAAOojC,MAAI,CAAErkC,OAAQkoC,UAAWjnC,MAAK,CAACjB,GAAI;AAE1E,SAASioC,WAAYzZ,MAAK,EAAE3f,KAAK,EAAE;EACjC,MAAM;IAAC65B,YAAY;IAAEC;EAAW,CAAC,GAAGjF,YAAalV;EAEjD,KAAK,MAAMlxB,QAAQuR,KAAO;IACxB,MAAM81B,aAAa+D,YAAaprC;IAChC,MAAMsnC,YAAY+D,WAAYrrC;IAC9B,MAAM2D,QAAQ,CAAC2jC,aAAaD,UAAS,KAAMnW,KAAK,CAAClxB,IAAK;IACtD,IAAKqnC,UAAeuD,eAAWjnC,WAAUwnC,YAAYxnC,KAAK,MACpD2jC,SAAa1kC,YAAQe,KAAS;MAClC,OAAO,IAAI;;EAEf;EACA,OAAO,KAAK;AACd;;AC7YA,MAAM2nC,eAAkB,IAAC,OAAO,UAAU,QAAQ,SAAS,YAAY;AACvE,SAASC,oBAAqB9lB,SAAQ,EAAE9e,IAAI,EAAE;EAC5C,OAAO8e,aAAa,KAASA,iBAAa,QAAa6lB,oBAAgB/xB,OAAO,CAACkM,cAAc,CAAC,KAAK9e,IAAS;AAC9G;AAEA,SAAS6kC,aAAcC,GAAE,EAAEC,EAAE,EAAE;EAC7B,OAAO,UAASl3B,CAAC,EAAErP,CAAC,EAAE;IACpB,OAAOqP,CAAC,CAACi3B,EAAG,MAAKtmC,CAAC,CAACsmC,GAAG,GAClBj3B,CAAC,CAACk3B,GAAG,GAAGvmC,CAAC,CAACumC,GAAG,GACbl3B,CAAC,CAACi3B,EAAG,IAAGtmC,CAAC,CAACsmC,EAAG;EACnB;AACF;AAEA,SAASE,qBAAqB76B,OAAO,EAAE;EACrC,MAAMrV,QAAQqV,QAAQrV,KAAK;EAC3B,MAAM0G,gBAAmB1G,SAAMwH,OAAO,CAACV,SAAS;EAEhD9G,MAAMu+B,aAAa,CAAC;EACpBuM,QAAapkC,qBAAoBA,gBAAiBypC,WAAU,EAAE,CAAC96B,QAAQ,EAAErV;AAC3E;AAEA,SAASowC,oBAAoB/6B,OAAO,EAAE;EACpC,MAAMrV,QAAQqV,QAAQrV,KAAK;EAC3B,MAAM0G,gBAAmB1G,SAAMwH,OAAO,CAACV,SAAS;EAChDgkC,QAAapkC,qBAAoBA,gBAAiB2pC,WAAU,EAAE,CAACh7B,QAAQ,EAAErV;AAC3E;AAMA,SAASswC,SAAU1uC,KAAI,EAAE;EACvB,IAAIw0B,qBAAqB,OAAOx0B,SAAS,QAAU;IACjDA,IAAOsyB,YAASqc,cAAc,CAAC3uC;EACjC,OAAO,IAAIA,QAAQA,IAAKH,OAAM,EAAE;IAE9BG,IAAOA,OAAI,CAAC,CAAE;;EAGhB,IAAIA,QAAQA,IAAKqvB,OAAM,EAAE;IAEvBrvB,OAAOA,KAAKqvB,MAAM;;EAEpB,OAAOrvB;AACT;AAEA,MAAM4uC,YAAY,EAAC;AACnB,MAAMC,WAAYxpC,GAAQ;EACxB,MAAMgqB,SAASqf,SAAUrpC;EACzB,OAAON,MAAOW,OAAM,CAACkpC,WAAWhjC,MAAM,CAAEkjC,KAAMA,CAAEzf,OAAM,KAAKA,QAAQjvB,GAAG;AACxE;AAEA,SAAS2uC,gBAAgB9zB,GAAG,EAAE/b,KAAK,EAAE2W,IAAI,EAAE;EACzC,MAAM7Q,OAAOD,MAAOC,KAAI,CAACiW;EACzB,KAAK,MAAM5V,OAAOL,IAAM;IACtB,MAAMgqC,SAAS,CAAC3pC;IAChB,IAAI2pC,UAAU9vC,KAAO;MACnB,MAAMoH,QAAQ2U,GAAG,CAAC5V,GAAI;MACtB,OAAO4V,GAAG,CAAC5V,GAAI;MACf,IAAIwQ,OAAO,CAAKm5B,aAAS9vC,KAAO;QAC9B+b,GAAG,CAAC+zB,MAASn5B,QAAK,GAAGvP;;;EAG3B;AACF;AASA,SAAS2oC,mBAAmBjuB,CAAC,EAAEkuB,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE;EAC9D,IAAI,CAACD,eAAenuB,CAAEziB,KAAI,KAAK,UAAY;IACzC,OAAO,IAAI;;EAEb,IAAI6wC,OAAS;IACX,OAAOF;;EAET,OAAOluB;AACT;AAEA,SAASquB,eAAexoC,KAAK,EAAEuM,SAAS,EAAEk8B,KAAK,EAAE;EAC/C,OAAOzoC,MAAMjB,OAAO,CAACqN,IAAI,GAAGpM,KAAK,CAACyoC,KAAM,IAAGl8B,SAAS,CAACk8B,KAAM;AAC7D;AAEA,SAASC,cAAermC,KAAI,EAAEkK,SAAS,EAAE;EACvC,MAAM;IAACjM;IAAQC;EAAAA,CAAO,GAAG8B;EACzB,IAAI/B,UAAUC,MAAQ;IACpB,OAAO;MACLM,IAAM2nC,iBAAeloC,QAAQiM,SAAW;MACxC5L,KAAO6nC,iBAAeloC,QAAQiM,SAAW;MACzC7L,GAAK8nC,iBAAejoC,QAAQgM,SAAW;MACvC3L,MAAQ4nC,iBAAejoC,QAAQgM,SAAW;IAC5C;;EAEF,OAAOA;AACT;AAEA,MAAMo8B;EAEJ,OAAOvqC,WAAWA,QAAS;EAC3B,OAAO2pC,YAAYA,SAAU;EAC7B,OAAOj0B,YAAYA,SAAU;EAC7B,OAAO8L,WAAWA,QAAS;EAC3B,OAAOgpB,UAAUA,OAAQ;EACzB,OAAOZ,WAAWA,QAAS;EAE3B,OAAOjJ,WAAmB;IACxBnf,SAAS1lB,GAAG,CAAInB;IAChB8vC;EACF;EAEA,OAAOxJ,aAAqB;IAC1Bzf,SAASjlB,MAAM,CAAI5B;IACnB8vC;EACF;EAGA9xC,WAAYoC,KAAI,EAAE2vC,UAAU,EAAE;IAC5B,MAAMlrC,SAAS,IAAI,CAACA,MAAM,GAAG,IAAI4nC,MAAOsD;IACxC,MAAMC,gBAAgBlB,SAAU1uC;IAChC,MAAM6vC,gBAAgBhB,QAASe;IAC/B,IAAIC,aAAe;MACjB,MAAM,IAAIjpB,MACR,4CAA+CipB,iBAAc9lC,EAAE,GAAG,IACtE,uDAAoD8lC,aAAcxgB,OAAM,CAACtlB,EAAE,GAAG,mBAC1E;;IAGJ,MAAMnE,UAAUnB,OAAOqM,cAAc,CAACrM,OAAOyoC,iBAAiB,IAAI,IAAI,CAACn8B,UAAU;IAEjF,IAAI,CAAC07B,QAAQ,GAAG,KAAKhoC,MAAOgoC,SAAQ,IAAIlY,gBAAgBqb,aAAa;IACrE,IAAI,CAACnD,QAAQ,CAAC5c,YAAY,CAACprB;IAE3B,MAAMgP,UAAU,IAAI,CAACg5B,QAAQ,CAACrd,cAAc,CAACwgB,aAAehqC,UAAQoa,WAAW;IAC/E,MAAMqP,SAAS5b,OAAWA,YAAQ4b,MAAM;IACxC,MAAM1T,SAAS0T,MAAUA,WAAO1T,MAAM;IACtC,MAAMC,QAAQyT,MAAUA,WAAOzT,KAAK;IAEpC,IAAI,CAAC7R,EAAE,GAAG+lC;IACV,IAAI,CAAC1iC,GAAG,GAAGqG;IACX,IAAI,CAAC4b,MAAM,GAAGA;IACd,IAAI,CAACzT,KAAK,GAAGA;IACb,IAAI,CAACD,MAAM,GAAGA;IACd,IAAI,CAACo0B,QAAQ,GAAGnqC;IAIhB,IAAI,CAACoqC,YAAY,GAAG,IAAI,CAAChwB,WAAW;IACpC,IAAI,CAACwO,OAAO,GAAG,EAAE;IACjB,IAAI,CAACyhB,SAAS,GAAG,EAAE;IACnB,IAAI,CAAC/kC,OAAO,GAAGhN;IACf,IAAI,CAAC+sB,KAAK,GAAG,EAAE;IACf,IAAI,CAAC+H,uBAAuB,GAAG90B;IAC/B,IAAI,CAACkV,SAAS,GAAGlV;IACjB,IAAI,CAAC+B,OAAO,GAAG,EAAE;IACjB,IAAI,CAACiwC,UAAU,GAAGhyC;IAClB,IAAI,CAACiyC,UAAU,GAAG,EAAC;IAEnB,IAAI,CAACC,oBAAoB,GAAGlyC;IAC5B,IAAI,CAACmyC,eAAe,GAAG,EAAE;IACzB,IAAI,CAAC1kC,MAAM,GAAG,EAAC;IACf,IAAI,CAAC2kC,QAAQ,GAAG,IAAI5H;IACpB,IAAI,CAACxU,QAAQ,GAAG,EAAC;IACjB,IAAI,CAACqc,cAAc,GAAG,EAAC;IACvB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAC57B,mBAAmB,GAAG1W;IAC3B,IAAI,CAAC8P,QAAQ,GAAG9P;IAChB,IAAI,CAACuyC,SAAS,GAAGC,SAAS/nC,QAAQ,IAAI,CAAC7E,MAAM,CAAC6E,IAAO/C,WAAQ+qC,WAAW,IAAI;IAC5E,IAAI,CAACv6B,YAAY,GAAG,EAAE;IAGtBw4B,SAAS,CAAC,IAAI,CAAC7kC,EAAE,CAAC,GAAG,IAAI;IAEzB,IAAI,CAAC0J,OAAW,KAAC4b,MAAQ;MAKvB7gB,QAAQ88B,KAAK,CAAC;MACd;;IAGF7kC,SAAS9F,MAAM,CAAC,IAAI,EAAE,UAAY2tC;IAClC7nC,SAAS9F,MAAM,CAAC,IAAI,EAAE,UAAY6tC;IAElC,IAAI,CAACoC,WAAW;IAChB,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjB,IAAI,CAAC1sC,MAAM;;EAEf;EAEA,IAAIkc,WAAc;IAChB,MAAM;MAACpa,OAAS;QAACoa,WAAW;QAAE6wB;MAAAA,CAAoB;MAAEj1B;MAAOD,MAAM;MAAEq0B;IAAY,CAAC,GAAG,IAAI;IACvF,IAAI,CAAC93B,cAAc8H,WAAc;MAE/B,OAAOA;;IAGT,IAAI6wB,uBAAuBb,YAAc;MAEvC,OAAOA;;IAIT,OAAOr0B,SAASC,KAAQD,YAAS,IAAI;EACvC;EAEA,IAAI1S,IAAO;IACT,OAAO,IAAI,CAACxE,MAAM,CAACwE,IAAI;EACzB;EAEA,IAAIA,KAAKA,IAAI,EAAE;IACb,IAAI,CAACxE,MAAM,CAACwE,IAAI,GAAGA;EACrB;EAEA,IAAIrD,OAAU;IACZ,OAAO,IAAI,CAACmqC,QAAQ;EACtB;EAEA,IAAInqC,QAAQA,OAAO,EAAE;IACnB,IAAI,CAACnB,MAAM,CAACmB,OAAO,GAAGA;EACxB;EAEA,IAAI6gB,QAAW;IACb,OAAOA;EACT;EAKAmqB,WAAc;IAEZ,IAAI,CAACjU,aAAa,CAAC;IAEnB,IAAI,IAAI,CAAC/2B,OAAO,CAACkrC,UAAU,EAAE;MAC3B,IAAI,CAAC/d,MAAM;KACN;MACLge,YAAY,IAAI,EAAE,IAAI,CAACnrC,OAAO,CAACktB,gBAAgB;;IAGjD,IAAI,CAACke,UAAU;IAGf,IAAI,CAACrU,aAAa,CAAC;IAEnB,OAAO,IAAI;EACb;EAEAgQ,KAAQ;IACNsE,YAAY,IAAI,CAAC5hB,MAAM,EAAE,IAAI,CAACjiB,GAAG;IACjC,OAAO,IAAI;EACb;EAEA9L,IAAO;IACLmF,QAASnF,KAAI,CAAC,IAAI;IAClB,OAAO,IAAI;EACb;EAOAyxB,MAAOnX,MAAK,EAAED,MAAM,EAAE;IACpB,IAAI,CAAClV,SAAS9G,OAAO,CAAC,IAAI,CAAG;MAC3B,IAAI,CAACuxC,OAAO,CAACt1B,KAAOD;KACf;MACL,IAAI,CAACw1B,iBAAiB,GAAG;QAACv1B;QAAOD;MAAM;;EAE3C;EAEAu1B,OAAQt1B,MAAK,EAAED,MAAM,EAAE;IACrB,MAAM/V,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMypB,SAAS,IAAI,CAACA,MAAM;IAC1B,MAAMrP,cAAcpa,OAAQirC,oBAAmB,IAAI,IAAI,CAAC7wB,WAAW;IACnE,MAAMoxB,UAAU,IAAI,CAAC3E,QAAQ,CAAC9c,cAAc,CAACN,MAAQzT,SAAOD,MAAQqE;IACpE,MAAMqxB,WAAWzrC,QAAQktB,gBAAgB,IAAI,IAAI,CAAC2Z,QAAQ,CAAC/c,mBAAmB;IAC9E,MAAM/mB,OAAO,IAAI,CAACiT,KAAK,GAAG,WAAW,QAAQ;IAE7C,IAAI,CAACA,KAAK,GAAGw1B,QAAQx1B,KAAK;IAC1B,IAAI,CAACD,MAAM,GAAGy1B,QAAQz1B,MAAM;IAC5B,IAAI,CAACq0B,YAAY,GAAG,IAAI,CAAChwB,WAAW;IACpC,IAAI,CAAC+wB,WAAY,KAAI,EAAEM,UAAU,IAAI,CAAG;MACtC;;IAGF,IAAI,CAAC1U,aAAa,CAAC,QAAU;MAACp2B,IAAM6qC;IAAO;IAE3ClI,QAAatjC,SAAQ0rC,QAAQ,EAAE,CAAC,IAAI,EAAEF,QAAQ,EAAE,IAAI;IAEpD,IAAI,IAAI,CAACZ,QAAQ,EAAE;MACjB,IAAI,IAAI,CAACC,SAAS,CAAC9nC,IAAO;QAExB,IAAI,CAAC4oC,MAAM;;;EAGjB;EAEAC,mBAAsB;IACpB,MAAM5rC,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM6rC,aAAgB7rC,WAAQ+F,MAAM,IAAI,EAAC;IAEzCqjB,IAAKyiB,gBAAe,CAACC,aAAatM,MAAW;MAC3CsM,YAAY3nC,EAAE,GAAGq7B;IACnB;EACF;EAKAuM,mBAAsB;IACpB,MAAM/rC,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMgsC,YAAYhsC,QAAQ+F,MAAM;IAChC,MAAMA,SAAS,IAAI,CAACA,MAAM;IAC1B,MAAMkmC,UAAU9sC,OAAOC,IAAI,CAAC2G,QAAQ1K,MAAM,CAAC,CAACga,KAAKlR,EAAO;MACtDkR,GAAG,CAAClR,EAAG,IAAG,KAAK;MACf,OAAOkR;IACT,GAAG,EAAC;IACJ,IAAIrb,QAAQ,EAAE;IAEd,IAAIgyC,SAAW;MACbhyC,KAAQA,SAAMoX,MAAM,CAClBjS,MAAOC,KAAI,CAAC4sC,SAAWvxB,KAAG,CAAEtW,EAAO;QACjC,MAAM4gC,eAAeiH,SAAS,CAAC7nC,EAAG;QAClC,MAAMT,OAAOohC,cAAc3gC,EAAI4gC;QAC/B,MAAMmH,WAAWxoC,IAAS;QAC1B,MAAMiQ,eAAejQ,IAAS;QAC9B,OAAO;UACL1D,OAAS+kC;UACToH,WAAWD,QAAW,iBAAcv4B,YAAe,cAAW,MAAM;UACpEy4B,OAAOF,QAAW,oBAAiBv4B,YAAe,gBAAa;QACjE;MACF;;IAIJyV,IAAKpvB,QAAQI,IAAS;MACpB,MAAM2qC,eAAe3qC,KAAK4F,OAAO;MACjC,MAAMmE,KAAK4gC,aAAa5gC,EAAE;MAC1B,MAAMT,OAAOohC,cAAc3gC,EAAI4gC;MAC/B,MAAMsH,YAAYljC,cAAe47B,cAAapsC,IAAI,EAAEyB,KAAKgyC,KAAK;MAE9D,IAAIrH,YAAaviB,SAAQ,KAAKlqB,aAAagwC,oBAAqBvD,cAAaviB,QAAQ,EAAE9e,IAAU4kC,2BAAqBluC,IAAK+xC,UAAS,CAAG;QACrIpH,YAAaviB,SAAQ,GAAGpoB,KAAK+xC,SAAS;;MAGxCF,OAAO,CAAC9nC,EAAG,IAAG,IAAI;MAClB,IAAIlD,QAAQ,IAAI;MAChB,IAAIkD,MAAM4B,UAAUA,MAAM,CAAC5B,GAAG,CAACxL,IAAI,KAAK0zC,SAAW;QACjDprC,KAAQ8E,SAAM,CAAC5B,EAAG;OACb;QACL,MAAMmoC,aAAazrB,QAASmhB,SAAQ,CAACqK;QACrCprC,QAAQ,IAAIqrC,UAAW;UACrBnoC;UACAxL,IAAM0zC;UACN7kC,GAAK,MAAI,CAACA,GAAG;UACbhP,OAAO;QACT;QACAuN,MAAM,CAAC9E,MAAMkD,EAAE,CAAC,GAAGlD;;MAGrBA,KAAMogB,KAAI,CAAC0jB,YAAc/kC;IAC3B;IAEAopB,IAAK6iB,UAAS,CAACM,YAAYpoC,EAAO;MAChC,IAAI,CAACooC,UAAY;QACf,OAAOxmC,MAAM,CAAC5B,EAAG;;IAErB;IAEAilB,IAAKrjB,SAAS9E,KAAU;MACtBwkB,QAAQzmB,SAAS,CAAC,IAAI,EAAEiC,OAAOA,MAAMjB,OAAO;MAC5CylB,OAAQkD,OAAM,CAAC,IAAI,EAAE1nB;IACvB;EACF;EAKAurC,eAAkB;IAChB,MAAMjqC,WAAW,IAAI,CAAC8nC,SAAS;IAC/B,MAAMv6B,UAAU,IAAI,CAACzM,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM;IACzC,MAAM4V,UAAUtN,SAAStI,MAAM;IAE/BsI,QAAS+O,KAAI,CAAC,CAACC,GAAGrP,MAAMqP,CAAE7O,MAAK,GAAGR,EAAEQ,KAAK;IACzC,IAAImN,UAAUC,OAAS;MACrB,KAAK,IAAI5V,CAAI4V,YAAS5V,CAAI2V,YAAS,EAAE3V,CAAG;QACtC,IAAI,CAACuyC,mBAAmB,CAACvyC;MAC3B;MACAqI,QAAS8N,OAAM,CAACP,SAASD,OAAUC;;IAErC,IAAI,CAAC26B,eAAe,GAAGloC,QAASmqC,MAAK,CAAC,CAAGp7B,MAAI,CAACi3B,cAAc,OAAS;EACvE;EAKAoE,2BAA8B;IAC5B,MAAM;MAACtC,SAAW9nC;MAAUc,MAAM;QAAC0G;MAAAA;IAAS,CAAC,GAAG,IAAI;IACpD,IAAIxH,QAAStI,OAAM,GAAG8P,SAAS9P,MAAM,EAAE;MACrC,OAAO,IAAI,CAACqL,OAAO;;IAErB/C,SAASvJ,OAAO,CAAC,CAACsK,MAAMZ,KAAU;MAChC,IAAIqH,SAAS/D,MAAM,CAACvE,KAAKA,CAAM6B,UAAK2a,QAAQ,EAAEhkB,MAAM,KAAK,CAAG;QAC1D,IAAI,CAACwyC,mBAAmB,CAAC/pC;;IAE7B;EACF;EAEAkqC,wBAA2B;IACzB,MAAMC,iBAAiB,EAAE;IACzB,MAAM9iC,QAAW,OAAI,CAAC1G,IAAI,CAAC0G,QAAQ;IACnC,IAAI7P,CAAGuI;IAEP,IAAI,CAACkqC,2BAA2B;IAEhC,KAAKzyC,IAAI,GAAGuI,IAAOsH,YAAS9P,MAAM,EAAEC,IAAIuI,MAAMvI,CAAK;MACjD,MAAMmM,UAAU0D,QAAQ,CAAC7P,CAAE;MAC3B,IAAIoJ,IAAO,OAAI,CAAC0G,cAAc,CAAC9P;MAC/B,MAAMvB,OAAO0N,QAAQ1N,IAAI,IAAI,IAAI,CAACkG,MAAM,CAAClG,IAAI;MAE7C,IAAI2K,KAAK3K,IAAI,IAAI2K,IAAK3K,KAAI,KAAKA,IAAM;QACnC,IAAI,CAAC8zC,mBAAmB,CAACvyC;QACzBoJ,IAAO,OAAI,CAAC0G,cAAc,CAAC9P;;MAE7BoJ,KAAK3K,IAAI,GAAGA;MACZ2K,IAAKkG,UAAS,GAAGnD,OAAQmD,UAAS,IAAI+6B,YAAa5rC,OAAM,IAAI,CAACqH,OAAO;MACrEsD,KAAKwpC,KAAK,GAAGzmC,OAAQymC,MAAK,IAAI;MAC9BxpC,KAAKZ,KAAK,GAAGxI;MACboJ,KAAK4J,KAAK,GAAG,EAAK7G,WAAQ6G,KAAK;MAC/B5J,KAAKypC,OAAO,GAAG,IAAI,CAACjxB,gBAAgB,CAAC5hB;MAErC,IAAIoJ,KAAK6B,UAAU,EAAE;QACnB7B,IAAK6B,WAAU,CAAC2D,WAAW,CAAC5O;QAC5BoJ,IAAK6B,WAAU,CAACqD,UAAU;OACrB;QACL,MAAMwkC,kBAAkBnsB,QAASghB,cAAa,CAAClpC;QAC/C,MAAM;UAAC0O;UAAoBC;QAAAA,CAAgB,GAAGjI,SAAS0K,QAAQ,CAACpR,IAAK;QACrEwG,MAAOyB,OAAM,CAACosC,eAAiB;UAC7B1lC,eAAiBuZ,WAASC,UAAU,CAACxZ;UACrCD,kBAAoBA,wBAAsBwZ,QAASC,WAAU,CAACzZ;QAChE;QACA/D,KAAK6B,UAAU,GAAG,IAAI6nC,gBAAgB,IAAI,EAAE9yC;QAC5C2yC,cAAe3xC,KAAI,CAACoI,KAAK6B,UAAU;;IAEvC;IAEA,IAAI,CAACqnC,eAAe;IACpB,OAAOK;EACT;EAMAI,cAAiB;IACf7jB,IAAK,KAAI,CAAC/lB,IAAI,CAAC0G,QAAQ,EAAE,CAAC1D,SAASrD,YAAiB;MAClD,IAAI,CAACgH,cAAc,CAAChH,YAAcmC,YAAU,CAACgF,KAAK;IACpD,GAAG,IAAI;EACT;EAKAA,KAAQ;IACN,IAAI,CAAC8iC,cAAc;IACnB,IAAI,CAAClW,aAAa,CAAC;EACrB;EAEA74B,OAAO6E,IAAI,EAAE;IACX,MAAMlE,SAAS,IAAI,CAACA,MAAM;IAE1BA,OAAOX,MAAM;IACb,MAAM8B,OAAU,OAAI,CAACmqC,QAAQ,GAAGtrC,OAAOqM,cAAc,CAACrM,MAAOyoC,kBAAiB,EAAI,MAAI,CAACn8B,UAAU;IACjG,MAAM+hC,gBAAgB,IAAI,CAACl+B,mBAAmB,GAAG,CAAChP,QAAQV,SAAS;IAEnE,IAAI,CAAC6tC,aAAa;IAClB,IAAI,CAACC,mBAAmB;IACxB,IAAI,CAACC,oBAAoB;IAIzB,IAAI,CAAC3C,QAAQ,CAAClH,UAAU;IAExB,IAAI,IAAI,CAACzM,aAAa,CAAC,cAAgB;MAACh0B;MAAMwgC,YAAY;IAAI,OAAO,KAAK,EAAE;MAC1E;;IAIF,MAAMsJ,iBAAiB,IAAI,CAACD,wBAAwB;IAEpD,IAAI,CAAC7V,aAAa,CAAC;IAGnB,IAAI/N,UAAa;IACjB,KAAK,IAAI9uB,IAAI,CAAGuI,SAAO,IAAI,CAACY,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,EAAEC,IAAIuI,MAAMvI,CAAK;MAC/D,MAAM;QAACiL;MAAU,CAAC,GAAG,IAAI,CAAC6E,cAAc,CAAC9P;MACzC,MAAMiQ,QAAQ,CAAC+iC,iBAAiBL,eAAev2B,OAAO,CAACnR,gBAAgB,CAAC;MAGxEA,WAAWsF,qBAAqB,CAACN;MACjC6e,aAAa5vB,KAAKoC,GAAG,CAAC,CAAC2J,WAAW6H,cAAc,EAAIgc;IACtD;IACAA,UAAa,OAAI,CAACskB,WAAW,GAAGttC,QAAQkmB,MAAM,CAACqnB,WAAW,GAAGvkB,aAAa,CAAC;IAC3E,IAAI,CAACwkB,aAAa,CAACxkB;IAGnB,IAAI,CAACkkB,aAAe;MAGlB9jB,IAAKyjB,iBAAiB1nC,UAAe;QACnCA,WAAWgF,KAAK;MAClB;;IAGF,IAAI,CAACsjC,eAAe,CAAC1qC;IAGrB,IAAI,CAACg0B,aAAa,CAAC,aAAe;MAACh0B;IAAI;IAEvC,IAAI,CAAC6lB,OAAO,CAACtX,IAAI,CAACi3B,cAAc,GAAK;IAGrC,MAAM;MAACluC,OAAO;MAAEiwC;IAAU,CAAC,GAAG,IAAI;IAClC,IAAIA,UAAY;MACd,IAAI,CAACoD,aAAa,CAACpD,YAAY,IAAI;KAC9B,UAAIjwC,OAAQJ,OAAM,EAAE;MACzB,IAAI,CAAC0zC,kBAAkB,CAACtzC,SAASA,SAAS,IAAI;;IAGhD,IAAI,CAACsxC,MAAM;EACb;EAKAwB,aAAgB;IACd/jB,KAAK,IAAI,CAACrjB,MAAM,EAAG9E,KAAU;MAC3BwkB,OAAQqD,UAAS,CAAC,IAAI,EAAE7nB;IAC1B;IAEA,IAAI,CAAC2qC,mBAAmB;IACxB,IAAI,CAACG,mBAAmB;EAC1B;EAKAqB,mBAAsB;IACpB,MAAMptC,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM4tC,iBAAiB,IAAIvH,GAAIlnC,QAAOC,IAAI,CAAC,IAAI,CAACmrC,UAAU;IAC1D,MAAMsD,SAAY,OAAIxH,GAAIrmC,SAAQ8tC,MAAM;IAExC,IAAI,CAACC,UAAUH,cAAgBC,gBAAc,CAAC,CAAC,IAAI,CAACrD,oBAAoB,KAAKxqC,OAAQkrC,WAAU,EAAE;MAE/F,IAAI,CAAC8C,YAAY;MACjB,IAAI,CAAC5C,UAAU;;EAEnB;EAKAiC,oBAAuB;IACrB,MAAM;MAAC1C;IAAAA,CAAe,GAAG,IAAI;IAC7B,MAAMsD,OAAU,OAAI,CAACC,sBAAsB,MAAM,EAAE;IACnD,KAAK,MAAM;MAACvvC,MAAM;MAAErF;MAAOgS;IAAAA,CAAM,IAAI2iC,OAAS;MAC5C,MAAMh+B,IAAOtR,cAAW,iBAAoB,IAAC2M,QAAQA,KAAK;MAC1D69B,gBAAgBwB,gBAAgBrxC,KAAO2W;IACzC;EACF;EAKAi+B,sBAAyB;IACvB,MAAM19B,eAAe,IAAI,CAACA,YAAY;IACtC,IAAI,CAACA,gBAAgB,CAACA,aAAavW,MAAM,EAAE;MACzC;;IAGF,IAAI,CAACuW,YAAY,GAAG,EAAE;IACtB,MAAM29B,eAAe,IAAI,CAAC9qC,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM;IAC9C,MAAMm0C,UAAWpU,OAAQ,IAAIqM,IAC3B71B,YACGxK,OAAM,CAACkjC,CAAKA,KAAC,CAAC,EAAE,KAAKlP,KACrBvf,GAAG,CAAC,CAACyuB,GAAGhvC,CAAMA,SAAI,GAAMgvC,KAAE74B,MAAM,CAAC,CAAG4wB,MAAI,CAAC;IAG9C,MAAMoN,YAAYD,OAAQ;IAC1B,KAAK,IAAIl0C,IAAI,CAAGA,MAAIi0C,cAAcj0C,CAAK;MACrC,IAAI,CAAC6zC,UAAUM,SAAWD,UAAQl0C,CAAK;QACrC;;IAEJ;IACA,OAAO2J,MAAM5H,IAAI,CAACoyC,SACf5zB,KAAG,CAACyuB,KAAKA,CAAEpI,MAAK,CAAC,GACjBrmB,MAAG,CAAClJ,MAAM;MAAC5S,MAAQ4S,GAAC,CAAC,CAAE;MAAEjY,KAAO,GAACiY,CAAC,CAAC,CAAE;MAAEjG,KAAO,GAACiG,CAAC,CAAC,CAAE;KAAA;EACxD;EAOAi8B,cAAcxkB,UAAU,EAAE;IACxB,IAAI,IAAI,CAAC+N,aAAa,CAAC,cAAgB;MAACwM,YAAY;IAAI,OAAO,KAAK,EAAE;MACpE;;IAGF9d,OAAQvnB,OAAM,CAAC,IAAI,EAAE,IAAI,CAAC8X,KAAK,EAAE,IAAI,CAACD,MAAM,EAAEiT;IAE9C,MAAMzb,OAAO,IAAI,CAACC,SAAS;IAC3B,MAAM8gC,SAAS/gC,IAAKyI,MAAK,IAAI,CAAKzI,SAAKwI,MAAM,IAAI;IAEjD,IAAI,CAAC6S,OAAO,GAAG,EAAE;IACjBQ,KAAK,IAAI,CAAC/D,KAAK,EAAGJ,GAAQ;MACxB,IAAIqpB,MAAUrpB,QAAIzC,QAAQ,KAAK,WAAa;QAE1C;;MAKF,IAAIyC,IAAIjmB,SAAS,EAAE;QACjBimB,IAAIjmB,SAAS;;MAEf,IAAI,CAAC4pB,OAAO,CAAC1tB,IAAI,IAAI+pB,IAAI2D,OAAO;IAClC,GAAG,IAAI;IAEP,IAAI,CAACA,OAAO,CAAC5vB,OAAO,CAAC,CAACoB,MAAMsI,KAAU;MACpCtI,KAAKm0C,IAAI,GAAG7rC;IACd;IAEA,IAAI,CAACq0B,aAAa,CAAC;EACrB;EAOA0W,gBAAgB1qC,IAAI,EAAE;IACpB,IAAI,IAAI,CAACg0B,aAAa,CAAC,sBAAwB;MAACh0B;MAAMwgC,YAAY;IAAI,OAAO,KAAK,EAAE;MAClF;;IAGF,KAAK,IAAIrpC,IAAI,CAAGuI,SAAO,IAAI,CAACY,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,EAAEC,CAAIuI,SAAM,EAAEvI,CAAG;MAC/D,IAAI,CAAC8P,cAAc,CAAC9P,CAAGiL,YAAU,CAACnG,SAAS;IAC7C;IAEA,KAAK,IAAI9E,IAAI,CAAGuI,SAAO,IAAI,CAACY,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,EAAEC,CAAIuI,SAAM,EAAEvI,CAAG;MAC/D,IAAI,CAACs0C,cAAc,CAACt0C,CAAGytC,aAAW5kC,QAAQA,IAAK;QAACC,YAAc9I;MAAC,KAAK6I,IAAI;IAC1E;IAEA,IAAI,CAACg0B,aAAa,CAAC,qBAAuB;MAACh0B;IAAI;EACjD;EAOAyrC,cAAe9rC,MAAK,EAAEK,IAAI,EAAE;IAC1B,MAAMO,IAAO,OAAI,CAAC0G,cAAc,CAACtH;IACjC,MAAM6N,IAAO;MAACjN;MAAMZ;MAAOK;MAAMwgC,YAAY;IAAI;IAEjD,IAAI,IAAI,CAACxM,aAAa,CAAC,qBAAuBxmB,YAAU,KAAK,EAAE;MAC7D;;IAGFjN,IAAK6B,WAAU,CAACxL,OAAO,CAACoJ;IAExBwN,IAAKgzB,WAAU,GAAG,KAAK;IACvB,IAAI,CAACxM,aAAa,CAAC,oBAAsBxmB;EAC3C;EAEAo7B,MAAS;IACP,IAAI,IAAI,CAAC5U,aAAa,CAAC,cAAgB;MAACwM,YAAY;IAAI,OAAO,KAAK,EAAE;MACpE;;IAGF,IAAI1iC,QAASzF,IAAG,CAAC,IAAI,CAAG;MACtB,IAAI,IAAI,CAACwvC,QAAQ,IAAI,CAAC/pC,QAAS9G,QAAO,CAAC,IAAI,CAAG;QAC5C8G,QAASvH,MAAK,CAAC,IAAI;;KAEhB;MACL,IAAI,CAACa,IAAI;MACTuuC,oBAAqB;QAAClwC,OAAO;MAAI;;EAErC;EAEA2B,IAAO;IACL,IAAID;IACJ,IAAI,IAAI,CAACqxC,iBAAiB,EAAE;MAC1B,MAAM;QAACv1B;QAAOD;MAAAA,CAAO,GAAG,IAAI,CAACw1B,iBAAiB;MAC9C,IAAI,CAACD,OAAO,CAACt1B,KAAOD;MACpB,IAAI,CAACw1B,iBAAiB,GAAG,IAAI;;IAE/B,IAAI,CAACxE,KAAK;IAEV,IAAI,IAAI,CAAC/wB,KAAK,IAAI,KAAK,IAAI,CAACD,MAAM,IAAI,CAAG;MACvC;;IAGF,IAAI,IAAI,CAACghB,aAAa,CAAC,YAAc;MAACwM,YAAY;IAAI,OAAO,KAAK,EAAE;MAClE;;IAMF,MAAMkL,SAAS,IAAI,CAAC7lB,OAAO;IAC3B,KAAK1uB,CAAI,MAAGA,CAAIu0C,UAAOx0C,MAAM,IAAIw0C,MAAM,CAACv0C,EAAE,CAAC2uB,CAAC,IAAI,GAAG,EAAE3uB,CAAG;MACtDu0C,MAAM,CAACv0C,CAAE,EAACC,IAAI,CAAC,IAAI,CAACqT,SAAS;IAC/B;IAEA,IAAI,CAACkhC,aAAa;IAGlB,OAAOx0C,CAAIu0C,UAAOx0C,MAAM,EAAE,EAAEC,CAAG;MAC7Bu0C,MAAM,CAACv0C,CAAE,EAACC,IAAI,CAAC,IAAI,CAACqT,SAAS;IAC/B;IAEA,IAAI,CAACupB,aAAa,CAAC;EACrB;EAKAv0B,uBAAuBF,aAAa,EAAE;IACpC,MAAMC,WAAW,IAAI,CAACkoC,eAAe;IACrC,MAAM3Z,SAAS,EAAE;IACjB,IAAI52B,CAAGuI;IAEP,KAAKvI,IAAI,GAAGuI,IAAOF,YAAStI,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MACjD,MAAMoJ,OAAOf,QAAQ,CAACrI,CAAE;MACxB,IAAI,CAACoI,iBAAiBgB,IAAKypC,QAAO,EAAE;QAClCjc,OAAO51B,IAAI,CAACoI;;IAEhB;IAEA,OAAOwtB;EACT;EAMApO,4BAA+B;IAC7B,OAAO,IAAI,CAAClgB,sBAAsB,CAAC,IAAI;EACzC;EAOAksC,aAAgB;IACd,IAAI,IAAI,CAAC3X,aAAa,CAAC,oBAAsB;MAACwM,YAAY;IAAI,OAAO,KAAK,EAAE;MAC1E;;IAGF,MAAMhhC,WAAW,IAAI,CAACmgB,4BAA4B;IAClD,KAAK,IAAIxoB,IAAIqI,QAAStI,OAAM,GAAG,CAAGC,OAAK,CAAG,IAAEA,CAAG;MAC7C,IAAI,CAACy0C,YAAY,CAACpsC,QAAQ,CAACrI,CAAE;IAC/B;IAEA,IAAI,CAAC68B,aAAa,CAAC;EACrB;EAOA4X,aAAarrC,IAAI,EAAE;IACjB,MAAMkE,MAAM,IAAI,CAACA,GAAG;IACpB,MAAM6F,OAAO/J,KAAK8J,KAAK;IACvB,MAAMwhC,UAAU,CAACvhC,KAAKjL,QAAQ;IAC9B,MAAMmL,IAAOo8B,kBAAermC,IAAM,MAAI,CAACkK,SAAS;IAChD,MAAM+C,IAAO;MACXjN;MACAZ,OAAOY,KAAKZ,KAAK;MACjB6gC,YAAY;IACd;IAEA,IAAI,IAAI,CAACxM,aAAa,CAAC,mBAAqBxmB,YAAU,KAAK,EAAE;MAC3D;;IAGF,IAAIq+B,OAAS;MACX5P,SAASx3B,GAAK;QACZ1F,IAAMuL,OAAKvL,IAAI,KAAK,KAAK,GAAG,IAAIyL,IAAKzL,KAAI,GAAGuL,KAAKvL,IAAI;QACrDF,OAAOyL,IAAKzL,MAAK,KAAK,KAAK,GAAG,IAAI,CAACoU,KAAK,GAAGzI,KAAK3L,KAAK,GAAGyL,KAAKzL,KAAK;QAClED,GAAK0L,OAAK1L,GAAG,KAAK,KAAK,GAAG,IAAI4L,IAAK5L,IAAG,GAAG0L,KAAK1L,GAAG;QACjDE,QAAQwL,IAAKxL,OAAM,KAAK,KAAK,GAAG,IAAI,CAACkU,MAAM,GAAGxI,KAAK1L,MAAM,GAAGwL,KAAKxL;MACnE;;IAGFyB,IAAK6B,WAAU,CAAChL,IAAI;IAEpB,IAAIy0C,OAAS;MACXzP,UAAW33B;;IAGb+I,IAAKgzB,WAAU,GAAG,KAAK;IACvB,IAAI,CAACxM,aAAa,CAAC,kBAAoBxmB;EACzC;EAOAiT,cAAc3L,KAAK,EAAE;IACnB,OAAO6L,eAAe7L,OAAO,IAAI,CAACrK,SAAS,EAAE,IAAI,CAAC8/B,WAAW;EAC/D;EAEAuB,0BAA0BzzB,CAAC,EAAErY,IAAI,EAAE/C,OAAO,EAAEsjB,gBAAgB,EAAE;IAC5D,MAAM3kB,MAASmwC,eAAYrqB,KAAK,CAAC1hB,IAAK;IACtC,IAAI,OAAOpE,WAAW,UAAY;MAChC,OAAOA,MAAO,KAAI,EAAEyc,GAAGpb,OAASsjB;;IAGlC,OAAO,EAAE;EACX;EAEAtZ,eAAehH,YAAY,EAAE;IAC3B,MAAMqD,UAAU,IAAI,CAAChD,IAAI,CAAC0G,QAAQ,CAAC/G,YAAa;IAChD,MAAMT,WAAW,IAAI,CAAC8nC,SAAS;IAC/B,IAAI/mC,OAAOf,QAASyD,OAAM,CAACvE,CAAKA,SAAKA,CAAEwc,SAAQ,KAAK5X,SAAS7L,GAAG;IAEhE,IAAI,CAAC8I,IAAM;MACTA,IAAO;QACL3K,MAAM,IAAI;QACV0K,MAAM,EAAE;QACRgD,SAAS,IAAI;QACblB,YAAY,IAAI;QAChB+B,QAAQ,IAAI;QACZgC,SAAS,IAAI;QACbG,SAAS,IAAI;QACbyjC,KAAOzmC,aAAWA,OAAQymC,MAAK,IAAI;QACnCpqC,KAAOM;QACPib,QAAU5X;QACVM,SAAS,EAAE;QACX6E,SAAS;MACX;MACAjJ,SAASrH,IAAI,CAACoI;;IAGhB,OAAOA;EACT;EAEA6H,UAAa;IACX,OAAO,IAAI,CAAC/C,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAGhC,aAAc,KAAI,EAAE;MAAC5N,OAAO,IAAI;MAAEG,IAAM;KAAQ;EAC3F;EAEAknB,sBAAyB;IACvB,OAAO,IAAI,CAAC6C,4BAA4B,GAAGzoB,MAAM;EACnD;EAEA6hB,iBAAiB9Y,YAAY,EAAE;IAC7B,MAAMqD,UAAU,IAAI,CAAChD,IAAI,CAAC0G,QAAQ,CAAC/G,YAAa;IAChD,IAAI,CAACqD,OAAS;MACZ,OAAO,KAAK;;IAGd,MAAM/C,IAAO,OAAI,CAAC0G,cAAc,CAAChH;IAIjC,OAAO,OAAOM,IAAK4D,OAAM,KAAK,YAAY,CAAC5D,KAAK4D,MAAM,GAAG,CAACb,QAAQa,MAAM;EAC1E;EAEA6nC,oBAAqB/rC,aAAY,EAAE+pC,OAAO,EAAE;IAC1C,MAAMzpC,IAAO,OAAI,CAAC0G,cAAc,CAAChH;IACjCM,IAAK4D,OAAM,GAAG,CAAC6lC;EACjB;EAEAzxB,qBAAqB5Y,KAAK,EAAE;IAC1B,IAAI,CAACioC,cAAc,CAACjoC,KAAM,IAAG,CAAC,IAAI,CAACioC,cAAc,CAACjoC,KAAM;EAC1D;EAEAqU,kBAAkBrU,KAAK,EAAE;IACvB,OAAO,CAAC,IAAI,CAACioC,cAAc,CAACjoC,KAAM;EACpC;EAKAssC,kBAAkBhsC,YAAY,EAAEwD,SAAS,EAAEumC,OAAO,EAAE;IAClD,MAAMhqC,OAAOgqC,OAAU,YAAS,MAAM;IACtC,MAAMzpC,IAAO,OAAI,CAAC0G,cAAc,CAAChH;IACjC,MAAMvK,QAAQ6K,IAAK6B,WAAU,CAACsJ,kBAAkB,CAACnW,SAAWyK;IAE5D,IAAIoL,QAAQ3H,SAAY;MACtBlD,KAAKD,IAAI,CAACmD,UAAU,CAACU,MAAM,GAAG,CAAC6lC;MAC/B,IAAI,CAAC7uC,MAAM;KACN;MACL,IAAI,CAAC6wC,oBAAoB,CAAC/rC,YAAc+pC;MAExCt0C,KAAMyF,OAAM,CAACoF,IAAM;QAACypC;MAAO;MAC3B,IAAI,CAAC7uC,MAAM,CAAEsJ,OAAQA,IAAIxE,YAAY,KAAKA,YAAeD,UAAOzK,SAAS;;EAE7E;EAEA22C,IAAKjsC,aAAY,EAAEwD,SAAS,EAAE;IAC5B,IAAI,CAACwoC,iBAAiB,CAAChsC,cAAcwD,WAAW,KAAK;EACvD;EAEA0oC,IAAKlsC,aAAY,EAAEwD,SAAS,EAAE;IAC5B,IAAI,CAACwoC,iBAAiB,CAAChsC,cAAcwD,WAAW,IAAI;EACtD;EAKAimC,oBAAoBzpC,YAAY,EAAE;IAChC,MAAMM,IAAO,OAAI,CAAC+mC,SAAS,CAACrnC,YAAa;IACzC,IAAIM,QAAQA,IAAK6B,WAAU,EAAE;MAC3B7B,IAAK6B,WAAU,CAACiF,QAAQ;;IAE1B,OAAO,IAAI,CAACigC,SAAS,CAACrnC,YAAa;EACrC;EAEAmsC,KAAQ;IACN,IAAIj1C,CAAGuI;IACP,IAAI,CAAC/G,IAAI;IACTmF,QAASjF,OAAM,CAAC,IAAI;IAEpB,KAAK1B,CAAI,MAAGuI,IAAO,OAAI,CAACY,IAAI,CAAC0G,QAAQ,CAAC9P,MAAM,EAAEC,CAAIuI,SAAM,EAAEvI,CAAG;MAC3D,IAAI,CAACuyC,mBAAmB,CAACvyC;IAC3B;EACF;EAEAk1C,OAAU;IACR,IAAI,CAACrY,aAAa,CAAC;IACnB,MAAM;MAACtN,MAAM;MAAEjiB;IAAG,CAAC,GAAG,IAAI;IAE1B,IAAI,CAAC2nC,KAAK;IACV,IAAI,CAACtwC,MAAM,CAACioC,UAAU;IAEtB,IAAIrd,MAAQ;MACV,IAAI,CAACukB,YAAY;MACjB3C,YAAY5hB,MAAQjiB;MACpB,IAAI,CAACq/B,QAAQ,CAACnd,cAAc,CAACliB;MAC7B,IAAI,CAACiiB,MAAM,GAAG,IAAI;MAClB,IAAI,CAACjiB,GAAG,GAAG,IAAI;;IAGjB,OAAOwhC,SAAS,CAAC,IAAI,CAAC7kC,EAAE,CAAC;IAEzB,IAAI,CAAC4yB,aAAa,CAAC;EACrB;EAEAsY,aAAc,GAAS;IACrB,OAAO,IAAI,CAAC5lB,MAAM,CAAC6lB,SAAS,CAAI/+B;EAClC;EAKA66B,UAAa;IACX,IAAI,CAACmE,cAAc;IACnB,IAAI,IAAI,CAACvvC,OAAO,CAACkrC,UAAU,EAAE;MAC3B,IAAI,CAACsE,oBAAoB;KACpB;MACL,IAAI,CAAC5E,QAAQ,GAAG,IAAI;;EAExB;EAKA2E,cAAiB;IACf,MAAM12C,YAAY,IAAI,CAAC0xC,UAAU;IACjC,MAAM1D,WAAW,IAAI,CAACA,QAAQ;IAE9B,MAAM4I,OAAO,CAAC92C,MAAMixB,QAAa;MAC/Bid,SAASld,gBAAgB,CAAC,IAAI,EAAEhxB,IAAMixB;MACtC/wB,SAAS,CAACF,KAAK,GAAGixB;IACpB;IAEA,MAAMA,QAAW,IAACxO,CAAG3Z,KAAGC,CAAM;MAC5B0Z,EAAE7C,OAAO,GAAG9W;MACZ2Z,EAAE5C,OAAO,GAAG9W;MACZ,IAAI,CAACgsC,aAAa,CAACtyB;IACrB;IAEAgO,IAAK,KAAI,CAACppB,OAAO,CAAC8tC,MAAM,EAAGn1C,IAAS82C,SAAK92C,IAAMixB;EACjD;EAKA4lB,oBAAuB;IACrB,IAAI,CAAC,IAAI,CAAChF,oBAAoB,EAAE;MAC9B,IAAI,CAACA,oBAAoB,GAAG,EAAC;;IAE/B,MAAM3xC,YAAY,IAAI,CAAC2xC,oBAAoB;IAC3C,MAAM3D,WAAW,IAAI,CAACA,QAAQ;IAE9B,MAAM4I,OAAO,CAAC92C,MAAMixB,QAAa;MAC/Bid,SAASld,gBAAgB,CAAC,IAAI,EAAEhxB,IAAMixB;MACtC/wB,SAAS,CAACF,KAAK,GAAGixB;IACpB;IACA,MAAM8lB,UAAU,CAAC/2C,MAAMixB,QAAa;MAClC,IAAI/wB,SAAS,CAACF,KAAK,EAAE;QACnBkuC,SAAShd,mBAAmB,CAAC,IAAI,EAAElxB,IAAMixB;QACzC,OAAO/wB,SAAS,CAACF,IAAK;;IAE1B;IAEA,MAAMixB,WAAW,CAAC5T,OAAOD,MAAW;MAClC,IAAI,IAAI,CAAC0T,MAAM,EAAE;QACf,IAAI,CAAC0D,MAAM,CAACnX,KAAOD;;IAEvB;IAEA,IAAI45B;IACJ,MAAM/E,WAAW,MAAM;MACrB8E,QAAQ,QAAU9E;MAElB,IAAI,CAACA,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACzd,MAAM;MAEXsiB,KAAK,QAAU7lB;MACf6lB,KAAK,QAAUE;IACjB;IAEAA,WAAW,MAAM;MACf,IAAI,CAAC/E,QAAQ,GAAG,KAAK;MAErB8E,QAAQ,QAAU9lB;MAGlB,IAAI,CAACulB,KAAK;MACV,IAAI,CAAC7D,OAAO,CAAC,CAAG;MAEhBmE,KAAK,QAAU7E;IACjB;IAEA,IAAI/D,SAAS7c,UAAU,CAAC,IAAI,CAACP,MAAM,CAAG;MACpCmhB;KACK;MACL+E;;EAEJ;EAKA3B,YAAe;IACb5kB,KAAK,IAAI,CAACmhB,UAAU,EAAE,CAAC3gB,UAAUjxB,IAAS;MACxC,IAAI,CAACkuC,QAAQ,CAAChd,mBAAmB,CAAC,IAAI,EAAElxB,IAAMixB;IAChD;IACA,IAAI,CAAC2gB,UAAU,GAAG,EAAC;IAEnBnhB,KAAK,IAAI,CAACohB,oBAAoB,EAAE,CAAC5gB,UAAUjxB,IAAS;MAClD,IAAI,CAACkuC,QAAQ,CAAChd,mBAAmB,CAAC,IAAI,EAAElxB,IAAMixB;IAChD;IACA,IAAI,CAAC4gB,oBAAoB,GAAGlyC;EAC9B;EAEAs3C,iBAAiB51C,KAAK,EAAE+I,IAAI,EAAE6sB,OAAO,EAAE;IACrC,MAAMigB,SAASjgB,OAAU,WAAQ,QAAQ;IACzC,IAAItsB,MAAMlJ,MAAMF,CAAGuI;IAEnB,IAAIM,SAAS,SAAW;MACtBO,IAAO,OAAI,CAAC0G,cAAc,CAAChQ,KAAK,CAAC,EAAE,CAACgJ,YAAY;MAChDM,KAAK6B,UAAU,CAAC,GAAM0qC,YAAS,mBAAoB;;IAGrD,KAAK31C,IAAI,GAAGuI,IAAOzI,SAAMC,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC9CE,IAAOJ,QAAK,CAACE,CAAE;MACf,MAAMiL,aAAa/K,QAAQ,IAAI,CAAC4P,cAAc,CAAC5P,KAAK4I,YAAY,EAAEmC,UAAU;MAC5E,IAAIA,UAAY;QACdA,UAAU,CAAC0qC,MAAS,gBAAa,CAACz1C,KAAKmM,OAAO,EAAEnM,IAAK4I,aAAY,EAAE5I,KAAKsI,KAAK;;IAEjF;EACF;EAMAotC,iBAAoB;IAClB,OAAO,IAAI,CAACz1C,OAAO,IAAI,EAAE;EAC3B;EAMA01C,kBAAkBC,cAAc,EAAE;IAChC,MAAMC,UAAa,OAAI,CAAC51C,OAAO,IAAI,EAAE;IACrC,MAAM4D,SAAS+xC,cAAev1B,IAAG,CAAC,SAA2B;MAAA,IAA1B;QAACzX,YAAY;QAAEN;MAAK,CAAC;MACtD,MAAMY,IAAO,OAAI,CAAC0G,cAAc,CAAChH;MACjC,IAAI,CAACM,IAAM;QACT,MAAM,IAAI0d,KAAM,gCAA+Bhe,YAAc;;MAG/D,OAAO;QACLA;QACAuD,OAASjD,OAAKD,IAAI,CAACX,KAAM;QACzBA;MACF;IACF;IACA,MAAM4lB,UAAU,CAAC4nB,eAAejyC,MAAQgyC;IAExC,IAAI3nB,OAAS;MACX,IAAI,CAACjuB,OAAO,GAAG4D;MAEf,IAAI,CAACqsC,UAAU,GAAG,IAAI;MACtB,IAAI,CAACqD,kBAAkB,CAAC1vC,MAAQgyC;;EAEpC;EAWAlZ,cAAckM,IAAI,EAAE1yB,IAAI,EAAEvK,MAAM,EAAE;IAChC,OAAO,IAAI,CAAC0kC,QAAQ,CAAC1H,MAAM,CAAC,IAAI,EAAEC,MAAM1yB,IAAMvK;EAChD;EAOA2C,gBAAgBwnC,QAAQ,EAAE;IACxB,OAAO,IAAI,CAACzF,QAAQ,CAACz5B,MAAM,CAACjL,MAAM,CAACiiC,KAAKA,EAAE5E,MAAM,CAACl/B,EAAE,KAAKgsC,UAAUl2C,MAAM,KAAK;EAC/E;EAKA0zC,mBAAmB1vC,MAAM,EAAEgyC,UAAU,EAAEG,MAAM,EAAE;IAC7C,MAAMC,YAAe,OAAI,CAACrwC,OAAO,CAACswC,KAAK;IACvC,MAAM9uB,OAAO,CAACjQ,GAAGrP,CAAMqP,OAAEvL,MAAM,CAACvE,CAAK,KAACS,CAAE4hC,KAAI,CAACpiC,KAAKD,CAAEuB,aAAY,KAAKtB,EAAEsB,YAAY,IAAIvB,CAAEiB,MAAK,KAAKhB,EAAEgB,KAAK;IAC1G,MAAM6tC,cAAc/uB,KAAKyuB,UAAYhyC;IACrC,MAAMuyC,SAAYJ,YAASnyC,MAASujB,QAAKvjB,QAAQgyC,UAAW;IAE5D,IAAIM,YAAYt2C,MAAM,EAAE;MACtB,IAAI,CAAC21C,gBAAgB,CAACW,aAAaF,YAAattC,KAAI,EAAE,KAAK;;IAG7D,IAAIytC,SAAUv2C,OAAM,IAAIo2C,aAAattC,IAAI,EAAE;MACzC,IAAI,CAAC6sC,gBAAgB,CAACY,WAAWH,YAAattC,KAAI,EAAE,IAAI;;EAE5D;EAKA2qC,aAActyB,EAAC,EAAEg1B,MAAM,EAAE;IACvB,MAAM7/B,IAAO;MACXvV,KAAOogB;MACPg1B;MACA7M,YAAY,IAAI;MAChBgG,WAAa,MAAI,CAAC/lB,aAAa,CAACpI;IAClC;IACA,MAAMq1B,cAAepN,MAAW,IAACA,OAAOrjC,QAAO,CAAC8tC,MAAM,IAAI,IAAI,CAAC9tC,OAAO,CAAC8tC,MAAM,EAAEnoB,QAAQ,CAACvK,EAAE0Q,MAAM,CAACnzB,IAAI;IAErG,IAAI,IAAI,CAACo+B,aAAa,CAAC,eAAexmB,IAAMkgC,mBAAiB,KAAK,EAAE;MAClE;;IAGF,MAAMnoB,UAAU,IAAI,CAACooB,YAAY,CAACt1B,CAAGg1B,UAAQ7/B,KAAKg5B,WAAW;IAE7Dh5B,IAAKgzB,WAAU,GAAG,KAAK;IACvB,IAAI,CAACxM,aAAa,CAAC,cAAcxmB,IAAMkgC;IAEvC,IAAInoB,WAAW/X,IAAK+X,QAAO,EAAE;MAC3B,IAAI,CAACqjB,MAAM;;IAGb,OAAO,IAAI;EACb;EAUA+E,aAAat1B,CAAC,EAAEg1B,MAAM,EAAE7G,WAAW,EAAE;IACnC,MAAM;MAAClvC,SAAS41C,UAAa,KAAE;MAAEjwC;IAAAA,CAAQ,GAAG,IAAI;IAehD,MAAMsjB,gBAAmB8sB;IACzB,MAAMnyC,SAAS,IAAI,CAAC0yC,kBAAkB,CAACv1B,GAAG60B,YAAY1G,WAAajmB;IACnE,MAAMkmB,UAAUoH,aAAcx1B;IAC9B,MAAMkuB,YAAYD,kBAAmBjuB,IAAG,IAAI,CAACkvB,UAAU,EAAEf,WAAaC;IAEtE,IAAID,WAAa;MAGf,IAAI,CAACe,UAAU,GAAG,IAAI;MAGtBhH,QAAatjC,SAAQ6wC,OAAO,EAAE,CAACz1B,GAAGnd,QAAQ,IAAI,CAAC,EAAE,IAAI;MAErD,IAAIurC,OAAS;QACXlG,QAAatjC,SAAQmb,OAAO,EAAE,CAACC,GAAGnd,QAAQ,IAAI,CAAC,EAAE,IAAI;;;IAIzD,MAAMqqB,UAAU,CAAC4nB,eAAejyC,MAAQgyC;IACxC,IAAI3nB,WAAW8nB,MAAQ;MACrB,IAAI,CAAC/1C,OAAO,GAAG4D;MACf,IAAI,CAAC0vC,kBAAkB,CAAC1vC,QAAQgyC,UAAYG;;IAG9C,IAAI,CAAC9F,UAAU,GAAGhB;IAElB,OAAOhhB;EACT;EAUAqoB,mBAAmBv1B,CAAC,EAAE60B,UAAU,EAAE1G,WAAW,EAAEjmB,gBAAgB,EAAE;IAC/D,IAAIlI,EAAEziB,IAAI,KAAK,UAAY;MACzB,OAAO,EAAE;;IAGX,IAAI,CAAC4wC,WAAa;MAEhB,OAAO0G;;IAGT,MAAMI,YAAe,OAAI,CAACrwC,OAAO,CAACswC,KAAK;IACvC,OAAO,IAAI,CAACzB,yBAAyB,CAACzzB,GAAGi1B,YAAattC,KAAI,EAAEstC,YAAc/sB;EAC5E;AACF;AAGA,SAASwmB,iBAAoB;EAC3B,OAAO1gB,KAAKwgB,MAAMZ,SAAS,EAAGxwC,KAAUA,UAAMkyC,QAAQ,CAAClH,UAAU;AACnE;AClwCA,SAASsN,QAAQtpC,GAA6B,EAAEjB,OAAmB,EAAEoS,QAAgB,EAAE;EACrF,MAAM;IAACD;IAAYq4B;IAAatvC;IAAGC;IAAG8Z;IAAaD;EAAAA,CAAY,GAAGhV;EAClE,IAAIyqC,cAAcD,WAAcv1B;;;EAIhChU,IAAIg3B,SAAS;EACbh3B,IAAI4V,GAAG,CAAC3b,GAAGC,GAAG8Z,WAAa9C,eAAas4B,aAAar4B,QAAWq4B;EAChE,IAAIz1B,cAAcw1B,WAAa;IAC7BC,cAAcD,WAAcx1B;IAC5B/T,GAAI4V,IAAG,CAAC3b,CAAGC,KAAG6Z,aAAa5C,QAAWq4B,gBAAat4B,UAAas4B,gBAAa,IAAI;GAC5E;IACLxpC,IAAI4V,GAAG,CAAC3b,GAAGC,GAAGqvC,WAAap4B,aAAWa,SAASd,UAAac;;EAE9DhS,IAAIypC,SAAS;EACbzpC,IAAI6F,IAAI;AACV;AAEA,SAAS6jC,gBAAgBxwC,KAAK,EAAE;EAC9B,OAAOywC,kBAAkBzwC,KAAO,GAAC,cAAc,YAAY,cAAc,WAAW;AACtF;AAEA;;;AAGA,SAAS0wC,oBAAkBh0B,GAAe,EAAE7B,WAAmB,EAAEC,WAAmB,EAAE61B,UAAkB,EAAE;EACxG,MAAMC,CAAIJ,mBAAgB9zB,GAAIpd,QAAO,CAACuxC,YAAY;EAClD,MAAMC,aAAgB,GAACh2B,eAAcD,WAAU,IAAK;EACpD,MAAMk2B,aAAar4C,IAAKC,IAAG,CAACm4C,eAAeH,aAAa91B,WAAc;;;;;;;;EAStE,MAAMm2B,oBAAqBt7B,GAAQ;IACjC,MAAMu7B,gBAAgB,CAACn2B,WAAcpiB,QAAKC,GAAG,CAACm4C,eAAep7B,GAAG,KAAKi7B,UAAa;IAClF,OAAOrZ,YAAY5hB,GAAK,KAAGhd,IAAKC,IAAG,CAACm4C,aAAeG;EACrD;EAEA,OAAO;IACLC,UAAYF,oBAAkBJ,EAAEM,UAAU;IAC1CC,QAAUH,oBAAkBJ,EAAEO,QAAQ;IACtCC,YAAY9Z,WAAYsZ,GAAEQ,UAAU,EAAE,CAAGL;IACzCM,UAAU/Z,WAAYsZ,GAAES,QAAQ,EAAE,CAAGN;EACvC;AACF;AAEA;;;AAGA,SAASO,WAAW/vC,CAAS,EAAEgwC,KAAa,EAAExwC,CAAS,EAAEC,CAAS,EAAE;EAClE,OAAO;IACLD,GAAGA,CAAIQ,OAAI7I,IAAKyf,IAAG,CAACo5B;IACpBvwC,GAAGA,CAAIO,OAAI7I,IAAK2f,IAAG,CAACk5B;EACtB;AACF;AAGA;;;;;;;;;;;;;AAaC;AACD,SAASC,QACP1qC,GAA6B,EAC7BjB,OAAmB,EACnB0O,MAAc,EACd8E,OAAe,EACf1Y,GAAW,EACXie,QAAiB,EACjB;EACA,MAAM;IAAC7d;IAAGC;IAAGgX,YAAYpf,KAAK;IAAEy3C,WAAW;IAAEx1B,WAAa42B;EAAAA,CAAO,GAAG5rC;EAEpE,MAAMiV,cAAcpiB,KAAKoC,GAAG,CAAC+K,QAAQiV,WAAW,GAAGzB,OAAU9E,YAAS87B,WAAa;EACnF,MAAMx1B,cAAc42B,MAAS,OAAIA,SAASp4B,OAAU9E,YAAS87B,cAAc,CAAC;EAE5E,IAAIqB,aAAgB;EACpB,MAAMC,QAAQhxC,GAAM/H;EAEpB,IAAIygB,OAAS;;;;IAIX,MAAMu4B,oBAAuBH,YAAS,CAAIA,YAASp4B,UAAU,CAAC;IAC9D,MAAMw4B,oBAAuB/2B,iBAAc,CAAIA,iBAAczB,UAAU,CAAC;IACxE,MAAMy4B,kBAAqB,GAACF,wBAAuBC,oBAAmB,IAAK;IAC3E,MAAME,gBAAgBD,kBAAuB,SAAIH,KAACA,GAAQG,sBAAuBA,qBAAqBz4B,OAAM,IAAKs4B,KAAK;IACtHD,gBAAgB,CAACC,KAAQI,gBAAY,IAAK;;EAG5C,MAAMC,OAAOt5C,KAAKoC,GAAG,CAAC,OAAO62C,KAAQ72B,iBAAcvG,SAASyE,EAAM8B;EAClE,MAAMm3B,WAAc,GAACN,SAAQK,IAAG,IAAK;EACrC,MAAMh6B,aAAapf,QAAQq5C,WAAcP;EACzC,MAAMz5B,WAAWtX,MAAMsxC,WAAcP;EACrC,MAAM;IAACR;IAAYC;IAAUC,UAAU;IAAEC;EAAQ,CAAC,GAAGX,oBAAkB7qC,OAASgV,eAAaC,aAAa7C,QAAWD;EAErH,MAAMk6B,2BAA2Bp3B,WAAco2B;EAC/C,MAAMiB,yBAAyBr3B,WAAcq2B;EAC7C,MAAMiB,0BAA0Bp6B,aAAak5B,UAAagB;EAC1D,MAAMG,wBAAwBp6B,WAAWk5B,QAAWgB;EAEpD,MAAMG,2BAA2Bz3B,WAAcu2B;EAC/C,MAAMmB,yBAAyB13B,WAAcw2B;EAC7C,MAAMmB,0BAA0Bx6B,aAAao5B,UAAakB;EAC1D,MAAMG,wBAAwBx6B,WAAWo5B,QAAWkB;EAEpDzrC,IAAIg3B,SAAS;EAEb,IAAIlf,QAAU;;IAEZ,MAAM8zB,qBAAwB,GAACN,2BAA0BC,qBAAoB,IAAK;IAClFvrC,IAAI4V,GAAG,CAAC3b,CAAGC,KAAG8Z,aAAas3B,uBAAyBM;IACpD5rC,IAAI4V,GAAG,CAAC3b,CAAGC,KAAG8Z,aAAa43B,qBAAuBL;;IAGlD,IAAIlB,WAAW,CAAG;MAChB,MAAMwB,OAAUrB,cAAWa,sBAAwBE,yBAAuBtxC,CAAGC;MAC7E8F,GAAI4V,IAAG,CAACi2B,QAAQ5xC,CAAC,EAAE4xC,QAAQ3xC,CAAC,EAAEmwC,QAAUkB,yBAAuBp6B,QAAWa;;;IAI5E,MAAM85B,EAAKtB,cAAWiB,sBAAwBt6B,YAAUlX,CAAGC;IAC3D8F,IAAIk3B,MAAM,CAAC4U,GAAG7xC,CAAC,EAAE6xC,GAAG5xC,CAAC;;IAGrB,IAAIqwC,WAAW,CAAG;MAChB,MAAMsB,OAAUrB,cAAWiB,sBAAwBE,yBAAuB1xC,CAAGC;MAC7E8F,IAAI4V,GAAG,CAACi2B,OAAQ5xC,EAAC,EAAE4xC,QAAQ3xC,CAAC,EAAEqwC,QAAUp5B,aAAWa,OAAS25B,0BAAwB/5C,KAAKsgB,EAAE;;;IAI7F,MAAM65B,qBAAwB,GAAC,CAAC56B,QAAYo5B,cAAWx2B,WAAiB7C,cAAco5B,gBAAav2B,WAAW,CAAC,IAAK;IACpH/T,GAAI4V,IAAG,CAAC3b,CAAGC,KAAG6Z,aAAa5C,QAAYo5B,cAAWx2B,WAAcg4B,yBAAuB,IAAI;IAC3F/rC,GAAI4V,IAAG,CAAC3b,CAAGC,KAAG6Z,aAAag4B,qBAAuB76B,eAAco5B,UAAav2B,gBAAc,IAAI;;IAG/F,IAAIu2B,aAAa,CAAG;MAClB,MAAMuB,OAAUrB,cAAWgB,wBAA0BE,2BAAyBzxC,CAAGC;MACjF8F,IAAI4V,GAAG,CAACi2B,OAAQ5xC,EAAC,EAAE4xC,QAAQ3xC,CAAC,EAAEowC,UAAYoB,4BAA0B95C,IAAKsgB,GAAE,EAAEhB,UAAac;;;IAI5F,MAAMg6B,EAAKxB,cAAWY,wBAA0Bl6B,cAAYjX,CAAGC;IAC/D8F,IAAIk3B,MAAM,CAAC8U,GAAG/xC,CAAC,EAAE+xC,GAAG9xC,CAAC;;IAGrB,IAAIkwC,aAAa,CAAG;MAClB,MAAMyB,OAAUrB,cAAWY,wBAA0BE,2BAAyBrxC,CAAGC;MACjF8F,GAAI4V,IAAG,CAACi2B,QAAQ5xC,CAAC,EAAE4xC,QAAQ3xC,CAAC,EAAEkwC,UAAYl5B,eAAac,OAASs5B;;GAE7D;IACLtrC,GAAIi3B,OAAM,CAACh9B,CAAGC;IAEd,MAAM+xC,WAAcr6C,QAAKyf,GAAG,CAACi6B,2BAA2Bt3B,WAAc/Z;IACtE,MAAMiyC,WAAct6C,QAAK2f,GAAG,CAAC+5B,2BAA2Bt3B,WAAc9Z;IACtE8F,GAAIk3B,OAAM,CAAC+U,WAAaC;IAExB,MAAMC,SAAYv6C,QAAKyf,GAAG,CAACk6B,yBAAyBv3B,WAAc/Z;IAClE,MAAMmyC,SAAYx6C,QAAK2f,GAAG,CAACg6B,yBAAyBv3B,WAAc9Z;IAClE8F,GAAIk3B,OAAM,CAACiV,SAAWC;;EAGxBpsC,IAAIypC,SAAS;AACf;AAEA,SAAS4C,QACPrsC,GAA6B,EAC7BjB,OAAmB,EACnB0O,MAAc,EACd8E,OAAe,EACfuF,QAAiB,EACjB;EACA,MAAM;IAACw0B,WAAW;IAAEp7B;IAAYP;EAAAA,CAAc,GAAG5R;EACjD,IAAIoS,WAAWpS,QAAQoS,QAAQ;EAC/B,IAAIm7B,WAAa;IACf5B,QAAQ1qC,GAAKjB,WAAS0O,MAAQ8E,WAASpB,QAAU2G;IACjD,KAAK,IAAIplB,CAAI,MAAGA,CAAI45C,gBAAa,EAAE55C,CAAG;MACpCsN,IAAIkB,IAAI;IACV;IACA,IAAI,CAAC2N,MAAM8B,aAAgB;MACzBQ,WAAWD,UAAcP,iBAAgBM,UAAOA,GAAE;;;EAGtDy5B,QAAQ1qC,GAAKjB,WAAS0O,MAAQ8E,WAASpB,QAAU2G;EACjD9X,IAAIkB,IAAI;EACR,OAAOiQ;AACT;AAEA,SAASkmB,WACPr3B,GAA6B,EAC7BjB,OAAmB,EACnB0O,MAAc,EACd8E,OAAe,EACfuF,QAAiB,EACjB;EACA,MAAM;IAACw0B;IAAap7B;IAAYP,aAAa;IAAEnY;EAAO,CAAC,GAAGuG;EAC1D,MAAM;IAAC2U;IAAa64B;IAAiBhY,UAAU;IAAEE;EAAgB,CAAC,GAAGj8B;EACrE,MAAMg0C,QAAQh0C,OAAQwd,YAAW,KAAK;EAEtC,IAAI,CAACtC,WAAa;IAChB;;EAGF1T,GAAI82B,YAAW,CAACvC,cAAc,EAAE;EAChCv0B,IAAI+2B,cAAc,GAAGtC;EAErB,IAAI+X,KAAO;IACTxsC,GAAIyT,UAAS,GAAGC,WAAc;IAC9B1T,GAAIysC,SAAQ,GAAGF,eAAmB;GAC7B;IACLvsC,IAAIyT,SAAS,GAAGC;IAChB1T,GAAIysC,SAAQ,GAAGF,eAAmB;;EAGpC,IAAIp7B,WAAWpS,QAAQoS,QAAQ;EAC/B,IAAIm7B,WAAa;IACf5B,QAAQ1qC,GAAKjB,WAAS0O,MAAQ8E,WAASpB,QAAU2G;IACjD,KAAK,IAAIplB,CAAI,MAAGA,CAAI45C,gBAAa,EAAE55C,CAAG;MACpCsN,IAAIm3B,MAAM;IACZ;IACA,IAAI,CAACtoB,MAAM8B,aAAgB;MACzBQ,WAAWD,UAAcP,iBAAgBM,UAAOA,GAAE;;;EAItD,IAAIu7B,KAAO;IACTlD,QAAQtpC,KAAKjB,OAASoS;;EAGxB,IAAI,CAACm7B,WAAa;IAChB5B,QAAQ1qC,GAAKjB,WAAS0O,MAAQ8E,WAASpB,QAAU2G;IACjD9X,IAAIm3B,MAAM;;AAEd;AAUe,MAAMuV,UAAmBplB;EAEtC,OAAO3qB,KAAK,KAAM;EAElB,OAAO9E,QAAW;IAChBme,WAAa;IACbzC,WAAa;IACbghB,YAAY,EAAE;IACdE,gBAAkB;IAClB8X,eAAiBz7C;IACjBi5C,YAAc;IACdr2B,WAAa;IACbjG,MAAQ;IACR8E,OAAS;IACTZ,KAAO7gB;IACPgnB,UAAU;GACV;EAEF,OAAOyP,aAAgB;IACrBlU,eAAiB;GACjB;EAEF,OAAOb,WAAc;IACnBC,aAAa,IAAI;IACjBC,UAAY,EAACzD,QAASA,IAAS;GAC/B;EAEF0B,aAAsB;EACtBQ,QAAiB;EACjBm7B,WAAoB;EACpBv4B,WAAoB;EACpBC,WAAoB;EACpBu1B,WAAoB;EACpBr4B,UAAmB;EAEnB1gB,YAAY6E,GAAG,EAAE;IACf,KAAK;IAEL,IAAI,CAACmD,OAAO,GAAG1H;IACf,IAAI,CAAC6f,aAAa,GAAG7f;IACrB,IAAI,CAACogB,UAAU,GAAGpgB;IAClB,IAAI,CAACqgB,QAAQ,GAAGrgB;IAChB,IAAI,CAACijB,WAAW,GAAGjjB;IACnB,IAAI,CAACkjB,WAAW,GAAGljB;IACnB,IAAI,CAACy4C,WAAW,GAAG;IACnB,IAAI,CAAC+C,WAAW,GAAG;IAEnB,IAAIj3C,GAAK;MACPsC,MAAOyB,OAAM,CAAC,IAAI,EAAE/D;;EAExB;EAEA8mB,QAAQwwB,MAAc,EAAEC,MAAc,EAAE9wB,gBAAyB,EAAE;IACjE,MAAMzL,KAAQ,OAAI,CAACgM,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAEP;IACxC,MAAM;MAACnK,KAAK;MAAEiL;IAAAA,CAAS,GAAGN,kBAAkBjM,KAAO;MAACpW,CAAG0yC;MAAQzyC,CAAG0yC;IAAM;IACxE,MAAM;MAAC17B;MAAYC;MAAU4C,WAAW;MAAEC,WAAW;MAAErD;IAAAA,CAAc,GAAG,IAAI,CAAC0L,QAAQ,CAAC,CACpF,cACA,YACA,eACA,eACA,gBACD,EAAEP;IACH,MAAM+wB,OAAU,GAAC,KAAI,CAACr0C,OAAO,CAAC+Z,OAAO,GAAG,IAAI,CAAC/Z,OAAO,CAACkb,WAAW,IAAI;IACpE,MAAM6B,iBAAiB5T,cAAegP,gBAAeQ,QAAWD;IAChE,MAAM47B,aAAgBv3B,qBAAkBtE,GAAOW,kBAAcD,OAAOT,UAAYC;IAChF,MAAM47B,YAAeC,cAAWpwB,QAAU7I,gBAAc84B,SAAS74B,WAAc64B;IAE/E,OAAQC,aAAiBC;EAC3B;EAEArwB,eAAeZ,gBAAyB,EAAE;IACxC,MAAM;MAAC7hB,CAAC;MAAEC,CAAC;MAAEgX;MAAYC;MAAU4C;MAAaC;IAAW,CAAC,GAAG,IAAI,CAACqI,QAAQ,CAAC,CAC3E,KACA,KACA,cACA,YACA,eACA,cACD,EAAEP;IACH,MAAM;MAACrO;MAAQ8E;IAAAA,CAAQ,GAAG,IAAI,CAAC/Z,OAAO;IACtC,MAAMy0C,SAAY,GAAC/7B,cAAaC,QAAO,IAAK;IAC5C,MAAM+7B,aAAa,CAACn5B,cAAcC,WAAczB,aAAU9E,MAAK,IAAK;IACpE,OAAO;MACLxT,GAAGA,CAAIrI,QAAKyf,GAAG,CAAC47B,SAAaC;MAC7BhzC,GAAGA,CAAItI,QAAK2f,GAAG,CAAC07B,SAAaC;IAC/B;EACF;EAEA1lB,gBAAgB1L,gBAAyB,EAAE;IACzC,OAAO,IAAI,CAACY,cAAc,CAACZ;EAC7B;EAEAnpB,KAAKqN,GAA6B,EAAE;IAClC,MAAM;MAACxH,OAAO;MAAEmY;IAAa,CAAC,GAAG,IAAI;IACrC,MAAMlD,SAAS,CAACjV,QAAQiV,MAAM,IAAI,KAAK;IACvC,MAAM8E,UAAU,CAAC/Z,QAAQ+Z,OAAO,IAAI,KAAK;IACzC,MAAMuF,WAAWtf,QAAQsf,QAAQ;IACjC,IAAI,CAACyxB,WAAW,GAAI/wC,QAAQwd,WAAW,KAAK,OAAW,UAAO,CAAC;IAC/D,IAAI,CAACs2B,WAAW,GAAG37B,aAAgBM,SAAMrf,KAAKoE,KAAK,CAAC2a,aAAgBM,UAAO,CAAC;IAE5E,IAAIN,kBAAkB,CAAK,QAAI,CAACoD,WAAW,GAAG,KAAK,IAAI,CAACC,WAAW,GAAG,CAAG;MACvE;;IAGFhU,IAAIs2B,IAAI;IAER,MAAM2W,YAAY,CAAC,IAAI,CAAC/7B,UAAU,GAAG,IAAI,CAACC,QAAO,IAAK;IACtDnR,GAAImtC,UAAS,CAACv7C,KAAKyf,GAAG,CAAC47B,aAAax/B,MAAQ7b,OAAK2f,GAAG,CAAC07B,SAAax/B;IAClE,MAAM2/B,MAAM,IAAIx7C,IAAK2f,IAAG,CAAC3f,IAAKC,IAAG,CAACqgB,IAAIvB,aAAiB;IACvD,MAAM08B,eAAe5/B,MAAS2/B;IAE9BptC,GAAIoT,UAAS,GAAG5a,QAAQ6a,eAAe;IACvCrT,GAAIsT,YAAW,GAAG9a,QAAQ+a,WAAW;IAErC84B,QAAQrsC,GAAK,MAAI,EAAEqtC,cAAc96B,OAASuF;IAC1Cuf,WAAWr3B,GAAK,MAAI,EAAEqtC,cAAc96B,OAASuF;IAE7C9X,IAAIw2B,OAAO;EACb;AACF;AClXA,SAAS8W,SAASttC,GAAG,EAAExH,OAAO,EAAmB;EAAA,IAAjB0a,4EAAQ1a,OAAO;EAC7CwH,IAAIutC,OAAO,GAAG5rC,eAAeuR,MAAMs6B,cAAc,EAAEh1C,QAAQg1C,cAAc;EACzExtC,IAAI82B,WAAW,CAACn1B,eAAeuR,MAAMqhB,UAAU,EAAE/7B,QAAQ+7B,UAAU;EACnEv0B,IAAI+2B,cAAc,GAAGp1B,eAAeuR,MAAMuhB,gBAAgB,EAAEj8B,QAAQi8B,gBAAgB;EACpFz0B,IAAIysC,QAAQ,GAAG9qC,eAAeuR,MAAMq5B,eAAe,EAAE/zC,QAAQ+zC,eAAe;EAC5EvsC,IAAIyT,SAAS,GAAG9R,eAAeuR,MAAMQ,WAAW,EAAElb,QAAQkb,WAAW;EACrE1T,IAAIsT,WAAW,GAAG3R,eAAeuR,MAAMK,WAAW,EAAE/a,QAAQ+a,WAAW;AACzE;AAEA,SAAS2jB,OAAOl3B,GAAG,EAAEytC,QAAQ,EAAEn4C,MAAM,EAAE;EACrC0K,IAAIk3B,MAAM,CAAC5hC,OAAO2E,CAAC,EAAE3E,OAAO4E,CAAC;AAC/B;AAKA,SAASwzC,aAAcl1C,QAAO,EAAE;EAC9B,IAAIA,QAAQm1C,OAAO,EAAE;IACnB,OAAOC;;EAGT,IAAIp1C,QAAQq1C,OAAO,IAAIr1C,OAAQs1C,uBAAsB,KAAK,UAAY;IACpE,OAAOC;;EAGT,OAAO7W;AACT;AAEA,SAAS8W,SAAS59B,MAAM,EAAE2G,OAAO,EAAe;EAAA,IAAbwH,MAAS,yEAAE;EAC5C,MAAMza,QAAQsM,OAAO3d,MAAM;EAC3B,MAAM;IAACX,OAAOm8C,WAAc,IAAC;IAAEp0C,GAAKq0C,cAAYpqC,KAAQ;EAAC,CAAC,GAAGya;EAC7D,MAAM;IAACzsB,KAAOq8C;IAAct0C,GAAKu0C;EAAAA,CAAW,GAAGr3B;EAC/C,MAAMjlB,KAAQF,QAAKoC,GAAG,CAACi6C,WAAaE;EACpC,MAAMt0C,GAAMjI,QAAKC,GAAG,CAACq8C,SAAWE;EAChC,MAAMC,UAAUJ,WAAcE,mBAAgBD,YAAYC,YAAgBF,kBAAcG,cAAcF,SAAYE;EAElH,OAAO;IACLtqC;IACAhS;IACAqE,MAAM4gB,QAAQ5gB,IAAI;IAClB8E,IAAMpB,QAAM/H,SAAS,CAACu8C,UAAUvqC,QAAQjK,GAAM/H,WAAQ+H,MAAM/H;EAC9D;AACF;AAiBA,SAASw8C,YAAYtuC,GAAG,EAAEwW,IAAI,EAAEO,OAAO,EAAEwH,MAAM,EAAE;EAC/C,MAAM;IAACnO;IAAQ5X;EAAAA,CAAQ,GAAGge;EAC1B,MAAM;IAAC1S;IAAOhS;IAAOqE;IAAM8E;EAAAA,CAAK,GAAG+yC,QAAS59B,SAAQ2G,OAASwH;EAC7D,MAAMgwB,aAAab,aAAcl1C;EAEjC,IAAI;IAACiQ,OAAO,IAAI;IAAE7O;EAAO,CAAC,GAAG2kB,UAAU,EAAC;EACxC,IAAI7rB,GAAG2d,KAAOpM;EAEd,KAAKvR,CAAI,MAAGA,CAAKuI,UAAM,EAAEvI,CAAG;IAC1B2d,QAAQD,MAAM,CAAC,CAACte,KAAS8H,WAAUqB,UAAOvI,CAAIA,IAAC,KAAKoR,KAAM;IAE1D,IAAIuM,MAAMG,IAAI,EAAE;MAEd;IACF,OAAO,IAAI/H,IAAM;MACfzI,IAAIi3B,MAAM,CAAC5mB,MAAMpW,CAAC,EAAEoW,MAAMnW,CAAC;MAC3BuO,OAAO,KAAK;KACP;MACL8lC,WAAWvuC,GAAKiE,QAAMoM,KAAOzW,WAASpB,QAAQm1C,OAAO;;IAGvD1pC,IAAOoM;EACT;EAEA,IAAIla,IAAM;IACRka,QAAQD,MAAM,CAAC,CAACte,KAAS8H,WAAUqB,UAAO,EAAC,IAAK6I,KAAM;IACtDyqC,WAAWvuC,GAAKiE,QAAMoM,KAAOzW,WAASpB,QAAQm1C,OAAO;;EAGvD,OAAO,CAAC,CAACx3C;AACX;AAiBA,SAASq4C,gBAAgBxuC,GAAG,EAAEwW,IAAI,EAAEO,OAAO,EAAEwH,MAAM,EAAE;EACnD,MAAMnO,SAASoG,KAAKpG,MAAM;EAC1B,MAAM;IAACtM,KAAK;IAAEhS,KAAK;IAAEmJ;EAAAA,CAAK,GAAG+yC,QAAS59B,SAAQ2G,OAASwH;EACvD,MAAM;IAAC9V,OAAO,IAAI;IAAE7O;EAAO,CAAC,GAAG2kB,UAAU,EAAC;EAC1C,IAAIkwB,IAAO;EACX,IAAIC,MAAS;EACb,IAAIh8C,CAAG2d,SAAOs+B,KAAOx8B,QAAMJ,IAAM68B;EAEjC,MAAMC,UAAa,GAAC3zC,KAAU,IAACpJ,UAAS8H,UAAUqB,IAAOC,WAAQA,KAAI,CAAC,IAAK4I;EAC3E,MAAMgrC,QAAQ,MAAM;IAClB,IAAI38B,SAASJ,IAAM;MAEjB/R,GAAIk3B,OAAM,CAACuX,IAAM18B;MACjB/R,GAAIk3B,OAAM,CAACuX,IAAMt8B;MAGjBnS,GAAIk3B,OAAM,CAACuX,IAAMG;;EAErB;EAEA,IAAInmC,IAAM;IACR4H,KAAQD,SAAM,CAACy+B,WAAW,CAAG;IAC7B7uC,IAAIi3B,MAAM,CAAC5mB,MAAMpW,CAAC,EAAEoW,MAAMnW,CAAC;;EAG7B,KAAKxH,CAAI,MAAGA,CAAKuI,UAAM,EAAEvI,CAAG;IAC1B2d,KAAQD,SAAM,CAACy+B,WAAWn8C,CAAG;IAE7B,IAAI2d,MAAMG,IAAI,EAAE;MAEd;;IAGF,MAAMvW,IAAIoW,MAAMpW,CAAC;IACjB,MAAMC,IAAImW,MAAMnW,CAAC;IACjB,MAAM60C,SAAS90C,CAAI;IAEnB,IAAI80C,WAAWJ,KAAO;MAEpB,IAAIz0C,IAAIiY,IAAM;QACZA,IAAOjY;OACF,UAAIA,IAAI6X,IAAM;QACnBA,IAAO7X;;MAGTu0C,OAAO,CAACC,SAASD,IAAOx0C,QAAK,EAAEy0C;KAC1B;MACLI;MAGA9uC,GAAIk3B,OAAM,CAACj9B,CAAGC;MAEdy0C,KAAQI;MACRL,MAAS;MACTv8B,OAAOJ,IAAO7X;;IAGhB00C,KAAQ10C;EACV;EACA40C;AACF;AAOA,SAASE,iBAAkBx4B,KAAI,EAAE;EAC/B,MAAM7c,OAAO6c,KAAKhe,OAAO;EACzB,MAAM+7B,aAAa56B,IAAK46B,WAAU,IAAI56B,IAAK46B,WAAU,CAAC9hC,MAAM;EAC5D,MAAMw8C,cAAc,CAACz4B,IAAKM,WAAU,IAAI,CAACN,KAAKtgB,KAAK,IAAI,CAACyD,KAAKk0C,OAAO,IAAIl0C,KAAKm0C,sBAAsB,KAAK,cAAc,CAACn0C,KAAKg0C,OAAO,IAAI,CAACpZ;EACxI,OAAO0a,cAAcT,kBAAkBF,WAAW;AACpD;AAKA,SAASY,uBAAwB12C,QAAO,EAAE;EACxC,IAAIA,QAAQm1C,OAAO,EAAE;IACnB,OAAOwB;;EAGT,IAAI32C,QAAQq1C,OAAO,IAAIr1C,OAAQs1C,uBAAsB,KAAK,UAAY;IACpE,OAAOsB;;EAGT,OAAOC;AACT;AAEA,SAASC,oBAAoBtvC,GAAG,EAAEwW,IAAI,EAAE1kB,KAAK,EAAEgS,KAAK,EAAE;EACpD,IAAIyrC,OAAO/4B,KAAKg5B,KAAK;EACrB,IAAI,CAACD,IAAM;IACTA,IAAO/4B,QAAKg5B,KAAK,GAAG,IAAIC;IACxB,IAAIj5B,IAAK+4B,KAAI,CAACA,MAAMz9C,OAAOgS,KAAQ;MACjCyrC,KAAK9F,SAAS;;;EAGlB6D,QAASttC,MAAKwW,KAAKhe,OAAO;EAC1BwH,IAAIm3B,MAAM,CAACoY;AACb;AAEA,SAASG,iBAAiB1vC,GAAG,EAAEwW,IAAI,EAAE1kB,KAAK,EAAEgS,KAAK,EAAE;EACjD,MAAM;IAAC6rC;IAAUn3C;EAAAA,CAAQ,GAAGge;EAC5B,MAAMo5B,gBAAgBZ,iBAAkBx4B;EAExC,KAAK,MAAMO,WAAW44B,QAAU;IAC9BrC,QAASttC,MAAKxH,OAASue,UAAQ7D,KAAK;IACpClT,IAAIg3B,SAAS;IACb,IAAI4Y,cAAc5vC,GAAKwW,QAAMO,OAAS;MAACjlB;MAAO+H,KAAK/H,QAAQgS,KAAQ;KAAK;MACtE9D,IAAIypC,SAAS;;IAEfzpC,IAAIm3B,MAAM;EACZ;AACF;AAEA,MAAM0Y,YAAY,OAAOJ,MAAW;AAEpC,SAAS98C,KAAKqN,GAAG,EAAEwW,IAAI,EAAE1kB,KAAK,EAAEgS,KAAK,EAAE;EACrC,IAAI+rC,aAAa,CAACr5B,KAAKhe,OAAO,CAACue,OAAO,EAAE;IACtCu4B,mBAAoBtvC,MAAKwW,MAAM1kB,KAAOgS;GACjC;IACL4rC,gBAAiB1vC,MAAKwW,MAAM1kB,KAAOgS;;AAEvC;AAEe,MAAMgsC,WAAoBxoB;EAEvC,OAAO3qB,KAAK,MAAO;EAKnB,OAAO9E,QAAW;IAChB21C,cAAgB;IAChBjZ,YAAY,EAAE;IACdE,gBAAkB;IAClB8X,eAAiB;IACjB74B,WAAa;IACbq8B,iBAAiB,IAAI;IACrBjC,sBAAwB;IACxB5sC,MAAM,KAAK;IACXqV,UAAU,KAAK;IACfo3B,SAAS,KAAK;IACdE,OAAS;GACT;EAKF,OAAOtmB,aAAgB;IACrBlU,eAAiB;IACjBE,WAAa;GACb;EAGF,OAAOf,WAAc;IACnBC,aAAa,IAAI;IACjBC,YAAazD,QAASA,IAAS,qBAAgBA,IAAS;GACxD;EAGFze,YAAY6E,GAAG,EAAE;IACf,KAAK;IAEL,IAAI,CAAC2hB,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACxe,OAAO,GAAG1H;IACf,IAAI,CAACwG,MAAM,GAAGxG;IACd,IAAI,CAACoF,KAAK,GAAGpF;IACb,IAAI,CAACkoB,SAAS,GAAGloB;IACjB,IAAI,CAAC0+C,KAAK,GAAG1+C;IACb,IAAI,CAACk/C,OAAO,GAAGl/C;IACf,IAAI,CAACm/C,SAAS,GAAGn/C;IACjB,IAAI,CAACgmB,UAAU,GAAG,KAAK;IACvB,IAAI,CAACo5B,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACr5B,aAAa,GAAG/lB;IAErB,IAAIuE,GAAK;MACPsC,MAAOyB,OAAM,CAAC,IAAI,EAAE/D;;EAExB;EAEAqiB,mBAAoB1R,UAAS,EAAEhE,SAAS,EAAE;IACxC,MAAMxJ,UAAU,IAAI,CAACA,OAAO;IAC5B,IAAI,CAACA,QAAQq1C,OAAO,IAAIr1C,QAAQs1C,sBAAsB,KAAK,UAAS,KAAM,CAACt1C,QAAQm1C,OAAO,IAAI,CAAC,IAAI,CAACuC,cAAc,EAAE;MAClH,MAAM/5C,OAAOqC,OAAQ+d,SAAQ,GAAG,IAAI,CAACrgB,KAAK,GAAG,IAAI,CAAC8iB,SAAS;MAC3Dm3B,2BAA2B,IAAI,CAACH,OAAO,EAAEx3C,SAASwN,WAAW7P,IAAM6L;MACnE,IAAI,CAACkuC,cAAc,GAAG,IAAI;;EAE9B;EAEA,IAAI9/B,OAAOA,MAAM,EAAE;IACjB,IAAI,CAAC4/B,OAAO,GAAG5/B;IACf,OAAO,IAAI,CAAC6/B,SAAS;IACrB,OAAO,IAAI,CAACT,KAAK;IACjB,IAAI,CAACU,cAAc,GAAG,KAAK;EAC7B;EAEA,IAAI9/B,MAAS;IACX,OAAO,IAAI,CAAC4/B,OAAO;EACrB;EAEA,IAAIL,QAAW;IACb,OAAO,IAAI,CAACM,SAAS,KAAK,IAAI,CAACA,SAAS,GAAGG,iBAAiB,IAAI,EAAE,IAAI,CAAC53C,OAAO,CAACue,OAAO;EACxF;EAMAwR,KAAQ;IACN,MAAMonB,WAAW,IAAI,CAACA,QAAQ;IAC9B,MAAMv/B,SAAS,IAAI,CAACA,MAAM;IAC1B,OAAOu/B,SAASl9C,MAAM,IAAI2d,MAAM,CAACu/B,QAAQ,CAAC,EAAE,CAAC79C,KAAK,CAAC;EACrD;EAMA4c,IAAO;IACL,MAAMihC,WAAW,IAAI,CAACA,QAAQ;IAC9B,MAAMv/B,SAAS,IAAI,CAACA,MAAM;IAC1B,MAAMtM,QAAQ6rC,SAASl9C,MAAM;IAC7B,OAAOqR,SAASsM,MAAM,CAACu/B,QAAQ,CAAC7rC,KAAQ,KAAE,CAACjK,GAAG,CAAC;EACjD;EASAw2C,WAAYhgC,MAAK,EAAE+oB,QAAQ,EAAE;IAC3B,MAAM5gC,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMU,QAAQmX,KAAK,CAAC+oB,QAAS;IAC7B,MAAMhpB,SAAS,IAAI,CAACA,MAAM;IAC1B,MAAMu/B,WAAWW,cAAe,KAAI,EAAE;MAAClX;MAAUtnC,KAAOoH;MAAOW,GAAKX;IAAK;IAEzE,IAAI,CAACy2C,QAASl9C,OAAM,EAAE;MACpB;;IAGF,MAAM62B,SAAS,EAAE;IACjB,MAAMinB,eAAerB,uBAAwB12C;IAC7C,IAAI9F,CAAGuI;IACP,KAAKvI,IAAI,GAAGuI,IAAO00C,YAASl9C,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MACjD,MAAM;QAACZ;QAAO+H;MAAAA,CAAI,GAAG81C,QAAQ,CAACj9C,CAAE;MAChC,MAAMkkC,KAAKxmB,MAAM,CAACte,KAAM;MACxB,MAAM+kC,KAAKzmB,MAAM,CAACvW,GAAI;MACtB,IAAI+8B,OAAOC,EAAI;QACbvN,OAAO51B,IAAI,CAACkjC;QACZ;;MAEF,MAAMp8B,IAAI5I,KAAKwY,GAAG,CAAC,CAAClR,QAAQ09B,EAAE,CAACwC,SAAS,KAAKvC,EAAE,CAACuC,SAAS,GAAGxC,EAAE,CAACwC,SAAS,CAAD;MACvE,MAAMoX,eAAeD,YAAa3Z,KAAIC,EAAIr8B,KAAGhC,QAAQm1C,OAAO;MAC5D6C,YAAY,CAACpX,SAAS,GAAG/oB,KAAK,CAAC+oB,QAAS;MACxC9P,OAAO51B,IAAI,CAAC88C;IACd;IACA,OAAOlnB,OAAO72B,MAAM,KAAK,IAAI62B,MAAM,CAAC,EAAE,GAAGA,MAAM;EACjD;EAgBAglB,YAAYtuC,GAAG,EAAE+W,OAAO,EAAEwH,MAAM,EAAE;IAChC,MAAMqxB,gBAAgBZ,kBAAkB,IAAI;IAC5C,OAAOY,aAAc5vC,MAAK,IAAI,EAAE+W,OAASwH;EAC3C;EASAgxB,KAAKvvC,GAAG,EAAElO,KAAK,EAAEgS,KAAK,EAAE;IACtB,MAAM6rC,WAAW,IAAI,CAACA,QAAQ;IAC9B,MAAMC,gBAAgBZ,kBAAkB,IAAI;IAC5C,IAAI74C,OAAO,IAAI,CAACD,KAAK;IAErBpE,QAAQA,KAAS;IACjBgS,QAAQA,SAAU,IAAI,CAACsM,MAAM,CAAC3d,MAAM,GAAGX;IAEvC,KAAK,MAAMilB,WAAW44B,QAAU;MAC9Bx5C,QAAQy5C,aAAc5vC,MAAK,IAAI,EAAE+W,OAAS;QAACjlB;QAAO+H,KAAK/H,QAAQgS,KAAQ;MAAC;IAC1E;IACA,OAAO,CAAC,CAAC3N;EACX;EASAxD,KAAKqN,GAAG,EAAEgG,SAAS,EAAElU,KAAK,EAAEgS,KAAK,EAAE;IACjC,MAAMtL,OAAU,OAAI,CAACA,OAAO,IAAI,EAAC;IACjC,MAAM4X,MAAS,OAAI,CAACA,MAAM,IAAI,EAAE;IAEhC,IAAIA,MAAO3d,OAAM,IAAI+F,QAAQkb,WAAW,EAAE;MACxC1T,IAAIs2B,IAAI;MAER3jC,IAAKqN,MAAK,IAAI,EAAElO,KAAOgS;MAEvB9D,IAAIw2B,OAAO;;IAGb,IAAI,IAAI,CAACxf,QAAQ,EAAE;MAEjB,IAAI,CAACk5B,cAAc,GAAG,KAAK;MAC3B,IAAI,CAACV,KAAK,GAAG1+C;;EAEjB;AACF;AClbA,SAASqrB,UAAQxB,EAAgB,EAAE4C,GAAW,EAAErhB,IAAe,EAAE4f,gBAA0B,EAAE;EAC3F,MAAMtjB,UAAUmiB,GAAGniB,OAAO;EAC1B,MAAM;IAAC,CAAC0D,IAAK,GAAEhD;EAAAA,CAAM,GAAGyhB,EAAG0B,SAAQ,CAAC,CAACngB,KAAK,EAAE4f;EAE5C,OAAQlqB,KAAKwY,GAAG,CAACmT,MAAMrkB,SAASV,OAAQ2X,OAAM,GAAG3X,QAAQi4C,SAAS;AACpE;AAIe,MAAMC,YAAqBppB;EAExC,OAAO3qB,KAAK,OAAQ;EAEpBiB,MAA4B;EAC5B4S,IAAe;EACftc,IAAe;EAEf;;AAEC;EACD,OAAO2D,QAAW;IAChB6b,WAAa;IACb+8B,SAAW;IACXx6B,gBAAkB;IAClB06B,WAAa;IACb39B,UAAY;IACZ7C,MAAQ;IACRO,QAAU;GACV;EAEF;;AAEC;EACD,OAAO6W,aAAgB;IACrBlU,eAAiB;IACjBE,WAAa;GACb;EAEF/iB,YAAY6E,GAAG,EAAE;IACf,KAAK;IAEL,IAAI,CAACmD,OAAO,GAAG1H;IACf,IAAI,CAAC8M,MAAM,GAAG9M;IACd,IAAI,CAAC0f,IAAI,GAAG1f;IACZ,IAAI,CAACoD,IAAI,GAAGpD;IAEZ,IAAIuE,GAAK;MACPsC,MAAOyB,OAAM,CAAC,IAAI,EAAE/D;;EAExB;EAEA8mB,QAAQy0B,MAAc,EAAEC,MAAc,EAAE/0B,gBAA0B,EAAE;IAClE,MAAMtjB,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM;MAACyB;MAAGC;IAAAA,CAAE,GAAG,IAAI,CAACmiB,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAEP;IACzC,OAASlqB,KAAKgqB,GAAG,CAACg1B,SAAS32C,CAAG,OAAKrI,KAAKgqB,GAAG,CAACi1B,SAAS32C,CAAG,OAAMtI,KAAKgqB,GAAG,CAACpjB,QAAQi4C,SAAS,GAAGj4C,OAAQ2X,OAAM,EAAE;EAC7G;EAEA2gC,QAASF,OAAc,EAAE90B,gBAA0B,EAAE;IACnD,OAAOK,SAAQ,KAAI,EAAEy0B,QAAQ,GAAK90B;EACpC;EAEAi1B,QAASF,OAAc,EAAE/0B,gBAA0B,EAAE;IACnD,OAAOK,SAAQ,KAAI,EAAE00B,QAAQ,GAAK/0B;EACpC;EAEAY,eAAeZ,gBAA0B,EAAE;IACzC,MAAM;MAAC7hB;MAAGC;IAAAA,CAAE,GAAG,IAAI,CAACmiB,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAEP;IACzC,OAAO;MAAC7hB;MAAGC;IAAC;EACd;EAEAf,KAAKX,OAAmD,EAAE;IACxDA,UAAUA,OAAW,QAAI,CAACA,OAAO,IAAI,EAAC;IACtC,IAAI2X,SAAS3X,OAAQ2X,OAAM,IAAI;IAC/BA,SAASve,KAAKoC,GAAG,CAACmc,QAAQA,MAAU3X,YAAQm4C,WAAW,IAAI;IAC3D,MAAMj9B,WAAcvD,aAAU3X,OAAQkb,YAAW,IAAI;IACrD,OAAO,CAACvD,MAASuD,cAAU,IAAK;EAClC;EAEA/gB,IAAKqN,IAA6B,EAAE+F,IAAe,EAAE;IACnD,MAAMvN,UAAU,IAAI,CAACA,OAAO;IAE5B,IAAI,IAAI,CAACgY,IAAI,IAAIhY,OAAQ2X,OAAM,GAAG,GAAO,KAAC+L,cAAe,KAAI,EAAEnW,IAAM,MAAI,CAAC5M,IAAI,CAACX,WAAW,CAAI;MAC5F;;IAGFwH,GAAIsT,YAAW,GAAG9a,QAAQ+a,WAAW;IACrCvT,GAAIyT,UAAS,GAAGjb,QAAQkb,WAAW;IACnC1T,GAAIoT,UAAS,GAAG5a,QAAQ6a,eAAe;IACvC29B,SAAUhxC,MAAKxH,SAAS,IAAI,CAACyB,CAAC,EAAE,IAAI,CAACC,CAAC;EACxC;EAEA0gB,QAAW;IACT,MAAMpiB,OAAU,OAAI,CAACA,OAAO,IAAI,EAAC;;IAEjC,OAAOA,OAAQ2X,OAAM,GAAG3X,QAAQi4C,SAAS;EAC3C;AACF;AC5FA,SAASQ,aAAaC,GAAG,EAAEp1B,gBAAgB,EAAE;EAC3C,MAAM;IAAC7hB,CAAC;IAAEC,CAAC;IAAEoS;IAAMkC;IAAOD;EAAAA,CAAO,GAA4B2iC,IAAI70B,QAAQ,CAAC,CAAC,KAAK,KAAK,QAAQ,SAAS,SAAS,EAAEP;EAEjH,IAAIxhB,MAAMF,KAAOD,OAAKE,MAAQ82C;EAE9B,IAAID,IAAI7kC,UAAU,EAAE;IAClB8kC,OAAO5iC,MAAS;IAChBjU,IAAO1I,QAAKC,GAAG,CAACoI,CAAGqS;IACnBlS,KAAQxI,QAAKoC,GAAG,CAACiG,CAAGqS;IACpBnS,MAAMD,CAAIi3C;IACV92C,SAASH,CAAIi3C;GACR;IACLA,OAAO3iC,KAAQ;IACflU,OAAOL,CAAIk3C;IACX/2C,QAAQH,CAAIk3C;IACZh3C,GAAMvI,QAAKC,GAAG,CAACqI,CAAGoS;IAClBjS,MAASzI,QAAKoC,GAAG,CAACkG,CAAGoS;;EAGvB,OAAO;IAAChS;IAAMH;IAAKC;IAAOC;EAAM;AAClC;AAEA,SAAS+2C,YAAY5gC,IAAI,EAAEtX,KAAK,EAAErH,GAAG,EAAEmC,GAAG,EAAE;EAC1C,OAAOwc,IAAO,OAAIggB,WAAYt3B,QAAOrH,KAAKmC,GAAI;AAChD;AAEA,SAASq9C,iBAAiBH,GAAG,EAAEI,IAAI,EAAEC,IAAI,EAAE;EACzC,MAAMr4C,KAAQg4C,OAAI14C,OAAO,CAACkb,WAAW;EACrC,MAAMlD,OAAO0gC,IAAIzkC,aAAa;EAC9B,MAAMq9B,IAAI0H,MAAOt4C;EAEjB,OAAO;IACLsB,GAAG42C,YAAY5gC,IAAKrW,IAAG,EAAE2vC,CAAE3vC,IAAG,EAAE,CAAGo3C;IACnC92C,GAAG22C,YAAY5gC,IAAKpW,MAAK,EAAE0vC,CAAE1vC,MAAK,EAAE,CAAGk3C;IACvC52C,GAAG02C,YAAY5gC,IAAKnW,OAAM,EAAEyvC,CAAEzvC,OAAM,EAAE,CAAGk3C;IACzC52C,GAAGy2C,YAAY5gC,IAAKlW,KAAI,EAAEwvC,CAAExvC,KAAI,EAAE,CAAGg3C;EACvC;AACF;AAEA,SAAS1H,kBAAkBsH,GAAG,EAAEI,IAAI,EAAEC,IAAI,EAAE;EAC1C,MAAM;IAAC7kC;EAAkB,CAAC,GAAGwkC,IAAI70B,QAAQ,CAAC,CAAC,qBAAqB;EAChE,MAAMnjB,KAAQg4C,OAAI14C,OAAO,CAACuxC,YAAY;EACtC,MAAMD,IAAI2H,aAAcv4C;EACxB,MAAMw4C,IAAO9/C,QAAKC,GAAG,CAACy/C,IAAMC;EAC5B,MAAM/gC,OAAO0gC,IAAIzkC,aAAa;EAI9B,MAAMklC,eAAejlC,sBAAsBjV,QAASyB;EAEpD,OAAO;IACL04C,SAASR,WAAY,EAACO,YAAgBnhC,SAAKrW,GAAG,IAAIqW,IAAKlW,KAAI,EAAEwvC,EAAE8H,OAAO,EAAE,CAAGF;IAC3EG,UAAUT,WAAY,EAACO,YAAgBnhC,SAAKrW,GAAG,IAAIqW,IAAKpW,MAAK,EAAE0vC,EAAE+H,QAAQ,EAAE,CAAGH;IAC9EI,YAAYV,WAAY,EAACO,YAAgBnhC,SAAKnW,MAAM,IAAImW,IAAKlW,KAAI,EAAEwvC,EAAEgI,UAAU,EAAE,CAAGJ;IACpFK,aAAaX,WAAY,EAACO,YAAgBnhC,SAAKnW,MAAM,IAAImW,IAAKpW,MAAK,EAAE0vC,EAAEiI,WAAW,EAAE,CAAGL;EACzF;AACF;AAEA,SAASM,cAAcd,GAAG,EAAE;EAC1B,MAAMe,SAAShB,YAAaC;EAC5B,MAAM1iC,KAAQyjC,UAAO73C,KAAK,GAAG63C,OAAO33C,IAAI;EACxC,MAAMiU,MAAS0jC,UAAO53C,MAAM,GAAG43C,OAAO93C,GAAG;EACzC,MAAMod,MAAS85B,oBAAiBH,GAAK1iC,UAAQ,GAAGD,MAAS;EACzD,MAAM4B,MAASy5B,qBAAkBsH,GAAK1iC,UAAQ,GAAGD,MAAS;EAE1D,OAAO;IACL2jC,KAAO;MACLj4C,GAAGg4C,OAAO33C,IAAI;MACdJ,GAAG+3C,OAAO93C,GAAG;MACb4lB,CAAGvR;MACHyR,CAAG1R;MACH4B;IACF;IACAq8B,KAAO;MACLvyC,GAAGg4C,MAAO33C,KAAI,GAAGid,OAAO5c,CAAC;MACzBT,GAAG+3C,MAAO93C,IAAG,GAAGod,OAAO/c,CAAC;MACxBulB,GAAGvR,KAAQ+I,UAAO5c,CAAC,GAAG4c,OAAO9c,CAAC;MAC9BwlB,GAAG1R,MAASgJ,UAAO/c,CAAC,GAAG+c,OAAO7c,CAAC;MAC/ByV,MAAQ;QACNyhC,SAAShgD,IAAKoC,IAAG,CAAC,GAAGmc,OAAOyhC,OAAO,GAAGhgD,IAAKoC,IAAG,CAACujB,OAAO/c,CAAC,EAAE+c,OAAO5c,CAAC;QACjEk3C,UAAUjgD,IAAKoC,IAAG,CAAC,GAAGmc,OAAO0hC,QAAQ,GAAGjgD,IAAKoC,IAAG,CAACujB,OAAO/c,CAAC,EAAE+c,OAAO9c,CAAC;QACnEq3C,YAAYlgD,IAAKoC,IAAG,CAAC,GAAGmc,OAAO2hC,UAAU,GAAGlgD,IAAKoC,IAAG,CAACujB,OAAO7c,CAAC,EAAE6c,OAAO5c,CAAC;QACvEo3C,aAAangD,IAAKoC,IAAG,CAAC,GAAGmc,OAAO4hC,WAAW,GAAGngD,IAAKoC,IAAG,CAACujB,OAAO7c,CAAC,EAAE6c,OAAO9c,CAAC;MAC3E;IACF;EACF;AACF;AAEA,SAAS0hB,QAAQ+0B,GAAG,EAAEj3C,CAAC,EAAEC,CAAC,EAAE4hB,gBAAgB,EAAE;EAC5C,MAAMq2B,QAAQl4C,MAAM,IAAI;EACxB,MAAMm4C,QAAQl4C,MAAM,IAAI;EACxB,MAAMm4C,WAAWF,KAASC;EAC1B,MAAMH,MAASf,UAAO,CAACmB,YAAYpB,aAAaC,GAAKp1B;EAErD,OAAOm2B,WACHE,KAASnF,eAAW/yC,GAAGg4C,MAAO33C,KAAI,EAAE23C,MAAO73C,MAAK,EAChDg4C,cAASpF,UAAW9yC,IAAG+3C,OAAO93C,GAAG,EAAE83C,MAAO53C,OAAM;AACtD;AAEA,SAASi4C,UAAUniC,MAAM,EAAE;EACzB,OAAOA,OAAOyhC,OAAO,IAAIzhC,MAAO0hC,SAAQ,IAAI1hC,MAAO2hC,WAAU,IAAI3hC,OAAO4hC,WAAW;AACrF;AAOA,SAASQ,kBAAkBvyC,GAAG,EAAEwyC,IAAI,EAAE;EACpCxyC,IAAIwyC,IAAI,CAACA,IAAKv4C,EAAC,EAAEu4C,KAAKt4C,CAAC,EAAEs4C,IAAKzyB,EAAC,EAAEyyB,KAAKvyB,CAAC;AACzC;AAEA,SAASwyB,YAAYD,IAAI,EAAEE,MAAM,EAAgB;EAAA,IAAdC,OAAU,yEAAE;EAC7C,MAAM14C,IAAIu4C,KAAKv4C,CAAC,KAAK04C,QAAQ14C,CAAC,GAAG,CAACy4C,SAAS,CAAC;EAC5C,MAAMx4C,IAAIs4C,KAAKt4C,CAAC,KAAKy4C,QAAQz4C,CAAC,GAAG,CAACw4C,SAAS,CAAC;EAC5C,MAAM3yB,IAAI,CAACyyB,KAAKv4C,CAAC,GAAGu4C,KAAKzyB,CAAC,KAAK4yB,OAAQ14C,EAAC,GAAG04C,OAAQ5yB,EAAC,GAAG2yB,MAAS,IAAC,IAAIz4C;EACrE,MAAMgmB,IAAI,CAACuyB,KAAKt4C,CAAC,GAAGs4C,KAAKvyB,CAAC,KAAK0yB,OAAQz4C,EAAC,GAAGy4C,OAAQ1yB,EAAC,GAAGyyB,MAAS,IAAC,IAAIx4C;EACrE,OAAO;IACLD,CAAGu4C,OAAKv4C,CAAC,GAAGA;IACZC,CAAGs4C,OAAKt4C,CAAC,GAAGA;IACZ6lB,CAAGyyB,OAAKzyB,CAAC,GAAGA;IACZE,CAAGuyB,OAAKvyB,CAAC,GAAGA;IACZ9P,QAAQqiC,KAAKriC;EACf;AACF;AAEe,MAAMyiC,UAAmBtrB;EAEtC,OAAO3qB,KAAK,KAAM;EAKlB,OAAO9E,QAAW;IAChB4U,aAAe;IACfiH,WAAa;IACbq2B,YAAc;IACd58B,aAAe;IACf6F,UAAYliB;GACZ;EAKF,OAAOy2B,aAAgB;IACrBlU,eAAiB;IACjBE,WAAa;GACb;EAEF/iB,YAAY6E,GAAG,EAAE;IACf,KAAK;IAEL,IAAI,CAACmD,OAAO,GAAG1H;IACf,IAAI,CAACub,UAAU,GAAGvb;IAClB,IAAI,CAACwb,IAAI,GAAGxb;IACZ,IAAI,CAAC0d,KAAK,GAAG1d;IACb,IAAI,CAACyd,MAAM,GAAGzd;IACd,IAAI,CAACqc,aAAa,GAAGrc;IAErB,IAAIuE,GAAK;MACPsC,MAAOyB,OAAM,CAAC,IAAI,EAAE/D;;EAExB;EAEA1C,KAAKqN,GAAG,EAAE;IACR,MAAM;MAACmN;MAAe3U,SAAS;QAAC+a;QAAaF;MAAAA;IAAgB,CAAC,GAAG,IAAI;IACrE,MAAM;MAACm5B,KAAK;MAAE0F;IAAAA,CAAM,GAAGF,cAAc,IAAI;IACzC,MAAMa,cAAcP,SAAUJ,OAAM/hC,MAAM,IAAI2iC,qBAAqBP,iBAAiB;IAEpFvyC,IAAIs2B,IAAI;IAER,IAAI4b,MAAMnyB,CAAC,KAAKysB,KAAMzsB,EAAC,IAAImyB,MAAMjyB,CAAC,KAAKusB,KAAMvsB,EAAC,EAAE;MAC9CjgB,IAAIg3B,SAAS;MACb6b,WAAY7yC,MAAKyyC,WAAYP,QAAO/kC,aAAeq/B;MACnDxsC,IAAI6F,IAAI;MACRgtC,YAAY7yC,GAAKyyC,cAAYjG,KAAO,GAACr/B,aAAe+kC;MACpDlyC,IAAIoT,SAAS,GAAGG;MAChBvT,IAAIkB,IAAI,CAAC;;IAGXlB,IAAIg3B,SAAS;IACb6b,WAAY7yC,MAAKyyC,YAAYjG,KAAOr/B;IACpCnN,IAAIoT,SAAS,GAAGC;IAChBrT,IAAIkB,IAAI;IAERlB,IAAIw2B,OAAO;EACb;EAEAra,QAAQy0B,MAAM,EAAEC,MAAM,EAAE/0B,gBAAgB,EAAE;IACxC,OAAOK,OAAQ,KAAI,EAAEy0B,QAAQC,MAAQ/0B;EACvC;EAEAg1B,QAASF,OAAM,EAAE90B,gBAAgB,EAAE;IACjC,OAAOK,OAAQ,KAAI,EAAEy0B,QAAQ,IAAI,EAAE90B;EACrC;EAEAi1B,QAASF,OAAM,EAAE/0B,gBAAgB,EAAE;IACjC,OAAOK,OAAQ,KAAI,EAAE,IAAI,EAAE00B,MAAQ/0B;EACrC;EAEAY,eAAeZ,gBAAgB,EAAE;IAC/B,MAAM;MAAC7hB;MAAGC;MAAGoS,IAAI;MAAED;IAAU,CAAC,GAA4B,IAAI,CAACgQ,QAAQ,CAAC,CAAC,KAAK,KAAK,QAAQ,aAAa,EAAEP;IAC1G,OAAO;MACL7hB,GAAGoS,aAAa,CAACpS,IAAIqS,IAAG,IAAK,IAAIrS,CAAC;MAClCC,GAAGmS,aAAanS,CAAI,GAACA,EAAIoS,OAAG,IAAK;IACnC;EACF;EAEAsO,SAAS1e,IAAI,EAAE;IACb,OAAOA,SAAS,GAAM,OAAI,CAACsS,KAAK,GAAG,IAAI,IAAI,CAACD,MAAM,GAAG,CAAC;EACxD;AACF;;;;;;;;ACpNA,MAAMwkC,aAAgB,IACpB,qBACA,qBACA,qBACA,qBACA,qBACA,sBACA;AAAA,CACD;AAED;AACA,MAAMC,iBAAoB,kBAAgBD,cAAc9/B,GAAG,CAACre,KAASA,UAAMq+C,OAAO,CAAC,QAAQ,OAASA,SAAO,CAAC,GAAK;AAEjH,SAASC,eAAexgD,CAAS,EAAE;EACjC,OAAOqgD,aAAa,CAACrgD,CAAIqgD,iBAActgD,MAAM,CAAC;AAChD;AAEA,SAAS0gD,mBAAmBzgD,CAAS,EAAE;EACrC,OAAOsgD,iBAAiB,CAACtgD,CAAIsgD,qBAAkBvgD,MAAM,CAAC;AACxD;AAEA,SAAS2gD,sBAAuBv0C,QAAqB,EAAEnM,CAAS,EAAE;EAChEmM,OAAQ0U,YAAW,GAAG2/B,cAAexgD;EACrCmM,OAAQwU,gBAAe,GAAG8/B,kBAAmBzgD;EAE7C,OAAO,EAAEA;AACX;AAEA,SAAS2gD,uBAAwBx0C,QAAqB,EAAEnM,CAAS,EAAE;EACjEmM,OAAQwU,gBAAe,GAAGxU,OAAQhD,KAAI,CAACoX,GAAG,CAAC,MAAMigC,cAAexgD;EAEhE,OAAOA;AACT;AAEA,SAAS4gD,wBAAyBz0C,QAAqB,EAAEnM,CAAS,EAAE;EAClEmM,OAAQwU,gBAAe,GAAGxU,OAAQhD,KAAI,CAACoX,GAAG,CAAC,MAAMkgC,kBAAmBzgD;EAEpE,OAAOA;AACT;AAEA,SAAS6gD,aAAaviD,KAAY,EAAE;EAClC,IAAI0B,CAAI;EAER,OAAO,CAACmM,SAAuBrD,YAAyB;IACtD,MAAMmC,UAAa3M,SAAMwR,cAAc,CAAChH,cAAcmC,UAAU;IAEhE,IAAIA,sBAAsByU,kBAAoB;MAC5C1f,IAAI2gD,wBAAwBx0C,OAASnM;KAChC,UAAIiL,sBAAsBga,mBAAqB;MACpDjlB,IAAI4gD,yBAAyBz0C,OAASnM;IACxC,OAAO,IAAIiL,UAAY;MACrBjL,IAAI0gD,uBAAuBv0C,OAASnM;;EAExC;AACF;AAEA,SAAS8gD,0BACPhhC,WAAkE,EAClE;EACA,IAAIihC;EAEJ,KAAKA,KAAKjhC,WAAa;IACrB,IAAIA,WAAW,CAACihC,EAAE,CAAClgC,WAAW,IAAIf,WAAW,CAACihC,EAAE,CAACpgC,eAAe,EAAE;MAChE,OAAO,IAAI;;EAEf;EAEA,OAAO,KAAK;AACd;AAEA,SAASqgC,yBACP9X,UAA4B,EAC5B;EACA,OAAOA,eAAeA,WAAWroB,WAAW,IAAIqoB,WAAWvoB,eAAe,CAAD;AAC3E;AAEA,oBAAe;EACb1W,EAAI;EAEJ9E,QAAU;IACRuwB,SAAS,IAAI;IACburB,eAAe;EACjB;EAEA9xB,aAAa7wB,KAAY,EAAE4iD,KAAK,EAAEp7C,OAA4B,EAAE;IAC9D,IAAI,CAACA,OAAQ4vB,QAAO,EAAE;MACpB;;IAGF,MAAM;MACJvsB,MAAM;QAAC0G;MAAAA,CAAS;MAChB/J,SAASq7C;IAAY,CACtB,GAAG7iD,MAAMqG,MAAM;IAChB,MAAM;MAACyO;IAAQ,CAAC,GAAG+tC;IAEnB,IAAI,CAACr7C,QAAQm7C,aAAa,KAAKH,0BAA0BjxC,QAAamxC,8BAAyBG,YAAkB/tC,iBAAY0tC,yBAA0B1tC,UAAS,CAAI;MAClK;;IAGF,MAAMguC,YAAYP,YAAaviD;IAE/BuR,SAAS/Q,OAAO,CAACsiD;EACnB;AACF,CAAE;AClHF,SAASC,eAAel4C,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE8a,cAAc,EAAEpmB,OAAO,EAAE;EASnE,MAAMw7C,UAAUx7C,OAAQw7C,QAAO,IAAIp1B;EAEnC,IAAIo1B,WAAWlwC,KAAO;IACpB,OAAOjI,IAAKqpC,MAAK,CAACpzC,OAAOA,KAAQgS;;EAGnC,MAAMmwC,YAAY,EAAE;EAEpB,MAAMC,cAAc,CAACpwC,QAAQ,MAAMkwC,UAAU;EAC7C,IAAIG,YAAe;EACnB,MAAMC,WAAWtiD,QAAQgS,KAAQ;EAEjC,IAAIiG,CAAIjY;EACR,IAAIY,GAAG2hD,YAAcC,WAASvuC,IAAMwuC;EAEpCN,SAAS,CAACE,eAAe,GAAGt4C,IAAI,CAACkO,CAAE;EAEnC,KAAKrX,CAAI,MAAGA,CAAIshD,aAAU,GAAGthD,CAAK;IAChC,IAAI+7C,IAAO;IACX,IAAI+F,IAAO;IACX,IAAIr5B;IAGJ,MAAMs5B,gBAAgB7iD,IAAKoE,MAAK,CAAEtD,EAAI,QAAKwhD,eAAe,CAAIpiD;IAC9D,MAAM4iD,WAAc9iD,QAAKC,GAAG,CAACD,KAAKoE,KAAK,CAAC,CAACtD,CAAI,QAAKwhD,eAAe,GAAGpwC,KAAShS;IAC7E,MAAM6iD,iBAAiBD,WAAcD;IAErC,KAAKt5B,CAAIs5B,kBAAet5B,CAAIu5B,gBAAav5B,CAAK;MAC5CszB,QAAQ5yC,IAAI,CAACsf,CAAE,EAAClhB,CAAC;MACjBu6C,QAAQ34C,IAAI,CAACsf,CAAE,EAACjhB,CAAC;IACnB;IAEAu0C,IAAQkG;IACRH,IAAQG;IAGR,MAAMC,YAAYhjD,IAAKoE,MAAK,CAACtD,IAAIwhD,eAAe,CAAIpiD;IACpD,MAAM+iD,OAAUjjD,QAAKC,GAAG,CAACD,KAAKoE,KAAK,CAAC,CAACtD,CAAI,QAAKwhD,eAAe,GAAGpwC,KAAShS;IACzE,MAAM;MAACmI,CAAG66C;MAAS56C,GAAG66C;IAAAA,CAAQ,GAAGl5C,IAAI,CAACkO,CAAE;IAOxCuqC,UAAUvuC,OAAO,CAAC;IAElB,KAAKoV,CAAIy5B,cAAWz5B,CAAI05B,YAAS15B,CAAK;MACpCpV,OAAO,GAAMnU,QAAKwY,GAAG,CACnB,CAAC0qC,OAAUrG,OAAG,KAAM5yC,IAAI,CAACsf,EAAE,CAACjhB,CAAC,GAAG66C,OAAM,CACtC,GAACD,WAAUj5C,IAAI,CAACsf,CAAE,EAAClhB,MAAMu6C,OAAOO,OAAM;MAGxC,IAAIhvC,OAAOuuC,OAAS;QAClBA,OAAUvuC;QACVsuC,YAAex4C,OAAI,CAACsf,CAAE;QACtBo5B,KAAQp5B;;IAEZ;IAEA84B,SAAS,CAACE,eAAe,GAAGE;IAC5BtqC,CAAIwqC;EACN;EAGAN,SAAS,CAACE,eAAe,GAAGt4C,IAAI,CAACu4C,QAAS;EAE1C,OAAOH;AACT;AAEA,SAASe,iBAAiBn5C,IAAI,EAAE/J,KAAK,EAAEgS,KAAK,EAAE8a,cAAc,EAAE;EAC5D,IAAI6vB,IAAO;EACX,IAAIC,MAAS;EACb,IAAIh8C,GAAG2d,OAAOpW,CAAGC,KAAGy0C,OAAOsG,QAAUC,YAAUC,YAAYhjC,IAAMJ;EACjE,MAAMkiC,YAAY,EAAE;EACpB,MAAMG,WAAWtiD,QAAQgS,KAAQ;EAEjC,MAAMsxC,IAAOv5C,OAAI,CAAC/J,MAAM,CAACmI,CAAC;EAC1B,MAAMo7C,IAAOx5C,OAAI,CAACu4C,SAAS,CAACn6C,CAAC;EAC7B,MAAMq7C,KAAKD,IAAOD;EAElB,KAAK1iD,IAAIZ,KAAOY,MAAIZ,KAAQgS,UAAO,EAAEpR,CAAG;IACtC2d,KAAQxU,OAAI,CAACnJ,CAAE;IACfuH,IAAI,CAACoW,MAAMpW,CAAC,GAAGm7C,IAAG,IAAKE,EAAK12B;IAC5B1kB,IAAImW,MAAMnW,CAAC;IACX,MAAM60C,SAAS90C,CAAI;IAEnB,IAAI80C,WAAWJ,KAAO;MAEpB,IAAIz0C,IAAIiY,IAAM;QACZA,IAAOjY;QACP+6C,QAAWviD;OACN,UAAIwH,IAAI6X,IAAM;QACnBA,IAAO7X;QACPg7C,QAAWxiD;;MAIb+7C,IAAO,GAACC,OAASD,UAAOp+B,MAAMpW,KAAK,EAAEy0C;KAChC;MAEL,MAAM6G,YAAY7iD,CAAI;MAEtB,IAAI,CAACoY,cAAcmqC,QAAa,MAACnqC,cAAcoqC,QAAW;QAKxD,MAAMM,kBAAqB5jD,QAAKC,GAAG,CAACojD,QAAUC;QAC9C,MAAMO,kBAAqB7jD,QAAKoC,GAAG,CAACihD,QAAUC;QAE9C,IAAIM,uBAAuBL,UAAcK,2BAAuBD,SAAW;UACzEtB,UAAUvgD,IAAI,CAAC;YACb,GAAGmI,IAAI,CAAC25C,kBAAmB;YAC3Bv7C,CAAGw0C;UACL;;QAEF,IAAIgH,uBAAuBN,UAAcM,2BAAuBF,SAAW;UACzEtB,UAAUvgD,IAAI,CAAC;YACb,GAAGmI,IAAI,CAAC45C,kBAAmB;YAC3Bx7C,CAAGw0C;UACL;;;MAMJ,IAAI/7C,IAAI,CAAK6iD,kBAAcJ,UAAY;QAErClB,UAAUvgD,IAAI,CAACmI,IAAI,CAAC05C,SAAU;;MAIhCtB,UAAUvgD,IAAI,CAAC2c;MACfs+B,KAAQI;MACRL,MAAS;MACTv8B,OAAOJ,IAAO7X;MACd+6C,WAAWC,WAAWC,UAAaziD;;EAEvC;EAEA,OAAOuhD;AACT;AAEA,SAASyB,sBAAsB72C,OAAO,EAAE;EACtC,IAAIA,QAAQiY,UAAU,EAAE;IACtB,MAAMjb,OAAOgD,QAAQwB,KAAK;IAC1B,OAAOxB,QAAQiY,UAAU;IACzB,OAAOjY,QAAQwB,KAAK;IACpB1I,MAAOg+C,eAAc,CAAC92C,SAAS,MAAQ;MACrC+2C,cAAc,IAAI;MAClBC,YAAY,IAAI;MAChBC,UAAU,IAAI;MACd58C,KAAO2C;IACT;;AAEJ;AAEA,SAASk6C,mBAAmB/kD,KAAK,EAAE;EACjCA,MAAM6K,IAAI,CAAC0G,QAAQ,CAAC/Q,OAAO,CAAEqN,OAAY;IACvC62C,qBAAsB72C;EACxB;AACF;AAEA,SAASm3C,yCAA0Cl6C,KAAI,EAAEsU,MAAM,EAAE;EAC/D,MAAM6lC,aAAa7lC,OAAO3d,MAAM;EAEhC,IAAIX,KAAQ;EACZ,IAAIgS;EAEJ,MAAM;IAAC/H;EAAM,CAAC,GAAGD;EACjB,MAAM;IAACjK,GAAG;IAAEmC,GAAG;IAAE6I,UAAU;IAAEC;EAAU,CAAC,GAAGf,OAAOa,aAAa;EAE/D,IAAIC,UAAY;IACd/K,KAAQ0+B,eAAY9V,YAAatK,SAAQrU,MAAOG,KAAI,EAAErK,GAAKgpB,IAAE,EAAE,GAAGo7B,UAAa;;EAEjF,IAAIn5C,UAAY;IACdgH,KAAQ0sB,eAAY9V,YAAatK,SAAQrU,MAAOG,KAAI,EAAElI,KAAK8mB,EAAE,GAAG,CAAGhpB,SAAOmkD,UAAcnkD;GACnF;IACLgS,QAAQmyC,UAAankD;;EAGvB,OAAO;IAACA;IAAOgS;EAAK;AACtB;AAEA,wBAAe;EACbnH,EAAI;EAEJ9E,QAAU;IACRq+C,SAAW;IACX9tB,SAAS;EACX;EAEA+tB,oBAAsB,GAACnlD,KAAO+X,QAAMvQ,OAAY;IAC9C,IAAI,CAACA,OAAQ4vB,QAAO,EAAE;MAEpB2tB,kBAAmB/kD;MACnB;;IAIF,MAAM4tB,iBAAiB5tB,MAAMwd,KAAK;IAElCxd,KAAM6K,KAAI,CAAC0G,QAAQ,CAAC/Q,OAAO,CAAC,CAACqN,SAASrD,YAAiB;MACrD,MAAM;QAAC6E;QAAO2B;MAAAA,CAAU,GAAGnD;MAC3B,MAAM/C,OAAO9K,KAAMwR,eAAc,CAAChH;MAClC,MAAMK,OAAOwE,KAASxB,YAAQhD,IAAI;MAElC,IAAIpG,OAAQ,EAACuM,WAAWhR,KAAMwH,QAAO,CAACwJ,SAAS,CAAC,MAAM,GAAK;QAEzD;;MAGF,IAAI,CAAClG,KAAK6B,UAAU,CAACgD,kBAAkB,EAAE;QAEvC;;MAGF,MAAMy1C,QAAQplD,KAAMuN,OAAM,CAACzC,KAAK4F,OAAO,CAAC;MACxC,IAAI00C,MAAMjlD,IAAI,KAAK,YAAYilD,KAAMjlD,KAAI,KAAK,MAAQ;QAEpD;;MAGF,IAAIH,KAAMwH,QAAO,CAACoL,OAAO,EAAE;QAEzB;;MAGF,IAAI;QAAC9R,KAAK;QAAEgS;MAAAA,CAAM,GAAGkyC,0CAA0Cl6C,IAAMD;MACrE,MAAMw6C,SAAY79C,WAAQ69C,SAAS,IAAI,CAAIz3B;MAC3C,IAAI9a,SAASuyC,SAAW;QAEtBX,qBAAsB72C;QACtB;;MAGF,IAAIiM,cAAczK,KAAQ;QAIxBxB,QAAQwB,KAAK,GAAGxE;QAChB,OAAOgD,QAAQhD,IAAI;QACnBlE,MAAOg+C,eAAc,CAAC92C,SAAS,MAAQ;UACrC+2C,cAAc,IAAI;UAClBC,YAAY,IAAI;UAChB1iD,KAAK,YAAW;YACd,OAAO,IAAI,CAAC2jB,UAAU;UACxB;UACAxjB,GAAK,YAASsqC,CAAC,EAAE;YACf,IAAI,CAACv9B,KAAK,GAAGu9B;UACf;QACF;;MAIF,IAAIqW;MACJ,QAAQz7C,QAAQ09C,SAAS;QACzB,KAAK;UACHjC,YAAYF,cAAel4C,OAAM/J,KAAOgS,SAAO8a,cAAgBpmB;UAC/D;QACF,KAAK;UACHy7C,SAAYe,oBAAiBn5C,IAAM/J,SAAOgS,KAAO8a;UACjD;QACF;UACE,MAAM,IAAIpF,KAAM,CAAC,qCAAoChhB,QAAQ09C,SAAU,GAAE,CAAE;MAAA;MAG7Er3C,QAAQiY,UAAU,GAAGm9B;IACvB;EACF;EAEArM,QAAQ52C,KAAK,EAAE;IACb+kD,kBAAmB/kD;EACrB;AACF,CAAE;AC5RK,SAASi/C,SAAUz5B,KAAI,EAAElhB,MAAM,EAAE8jC,QAAQ,EAAE;EAChD,MAAMuW,WAAWn5B,KAAKm5B,QAAQ;EAC9B,MAAMv/B,SAASoG,KAAKpG,MAAM;EAC1B,MAAMkmC,UAAUhhD,OAAO8a,MAAM;EAC7B,MAAMspB,QAAQ,EAAE;EAEhB,KAAK,MAAM3iB,WAAW44B,QAAU;IAC9B,IAAI;MAAC79C;MAAO+H;IAAAA,CAAI,GAAGkd;IACnBld,GAAM08C,mBAAgBzkD,OAAO+H,GAAKuW;IAElC,MAAM6hC,MAASuE,cAAWpd,QAAUhpB,QAAM,CAACte,MAAM,EAAEse,MAAM,CAACvW,IAAI,EAAEkd,QAAQ5gB,IAAI;IAE5E,IAAI,CAACb,MAAOq6C,SAAQ,EAAE;MAGpBjW,MAAMhmC,IAAI,CAAC;QACTm7B,MAAQ9X;QACRzhB,MAAQ28C;QACRngD,KAAOse,QAAM,CAACte,KAAM;QACpB+H,GAAKuW,QAAM,CAACvW,GAAI;MAClB;MACA;;IAIF,MAAM48C,iBAAiBnG,eAAeh7C,MAAQ28C;IAE9C,KAAK,MAAMyE,OAAOD,cAAgB;MAChC,MAAME,YAAYH,UAAWpd,WAAUkd,OAAO,CAACI,IAAI5kD,KAAK,CAAC,EAAEwkD,OAAO,CAACI,GAAI78C,IAAG,CAAC,EAAE68C,IAAIvgD,IAAI;MACrF,MAAMygD,cAAcC,aAAc9/B,UAAS3G,MAAQumC;MAEnD,KAAK,MAAMG,cAAcF,WAAa;QACpCld,MAAMhmC,IAAI,CAAC;UACTm7B,MAAQioB;UACRxhD,MAAQohD;UACR5kD,KAAO;YACL,CAACsnC,WAAW2d,SAAS9E,QAAQ0E,SAAW,WAAS/kD,KAAKoC,GAAG;UAC3D;UACA6F,GAAK;YACH,CAACu/B,WAAW2d,SAAS9E,QAAQ0E,SAAW,SAAO/kD,KAAKC,GAAG;UACzD;QACF;MACF;IACF;EACF;EACA,OAAO6nC;AACT;AAEO,SAAS8c,WAAWpd,QAAQ,EAAE7Q,KAAK,EAAE7Z,IAAI,EAAEvY,IAAI,EAAE;EACtD,IAAIA,IAAM;IACR;;EAEF,IAAIrE,QAAQy2B,KAAK,CAAC6Q,QAAS;EAC3B,IAAIv/B,MAAM6U,IAAI,CAAC0qB,QAAS;EAExB,IAAIA,aAAa,OAAS;IACxBtnC,QAAQklD,eAAgBllD;IACxB+H,MAAMm9C,eAAgBn9C;;EAExB,OAAO;IAACu/B;IAAUtnC;IAAO+H;EAAG;AAC9B;AAEO,SAASo9C,oBAAoBC,QAAQ,EAAE1gC,IAAI,EAAE;EAClD,MAAM;IAACvc,CAAI,OAAI;IAAEC,CAAI;EAAI,CAAC,GAAGg9C,YAAY,EAAC;EAC1C,MAAMC,aAAa3gC,KAAKpG,MAAM;EAC9B,MAAMA,SAAS,EAAE;EACjBoG,IAAKm5B,SAAQ,CAACn+C,OAAO,CAAC,SAAkB;IAAA,IAAjB;MAACM,KAAK;MAAE+H;IAAG,CAAC;IACjCA,GAAM08C,mBAAgBzkD,OAAO+H,GAAKs9C;IAClC,MAAM5uB,QAAQ4uB,UAAU,CAACrlD,KAAM;IAC/B,MAAM4c,OAAOyoC,UAAU,CAACt9C,GAAI;IAC5B,IAAIK,MAAM,IAAI,EAAE;MACdkW,OAAO1c,IAAI,CAAC;QAACuG,GAAGsuB,MAAMtuB,CAAC;QAAEC;MAAC;MAC1BkW,OAAO1c,IAAI,CAAC;QAACuG,GAAGyU,KAAKzU,CAAC;QAAEC;MAAC;KACpB,UAAID,CAAM,SAAI,EAAE;MACrBmW,OAAO1c,IAAI,CAAC;QAACuG;QAAGC,GAAGquB,MAAMruB;MAAC;MAC1BkW,OAAO1c,IAAI,CAAC;QAACuG;QAAGC,GAAGwU,KAAKxU;MAAC;;EAE7B;EACA,OAAOkW;AACT;AAEO,SAASmmC,eAAgBzkD,MAAK,EAAE+H,GAAG,EAAEuW,MAAM,EAAE;EAClD,OAAMvW,MAAM/H,OAAO+H,GAAO;IACxB,MAAMwW,QAAQD,MAAM,CAACvW,GAAI;IACzB,IAAI,CAACgV,MAAMwB,KAAMpW,EAAC,KAAK,CAAC4U,MAAMwB,KAAMnW,EAAC,CAAG;MACtC;;EAEJ;EACA,OAAOL;AACT;AAEA,SAASk9C,SAAShtC,CAAC,EAAErP,CAAC,EAAEnF,IAAI,EAAE9D,EAAE,EAAE;EAChC,IAAIsY,KAAKrP,CAAG;IACV,OAAOjJ,GAAGsY,CAAC,CAACxU,KAAK,EAAEmF,CAAC,CAACnF,IAAK;;EAE5B,OAAOwU,IAAIA,CAAC,CAACxU,IAAK,IAAGmF,IAAIA,CAAC,CAACnF,IAAK,IAAG,CAAC;AACtC;ACnFO,SAAS6hD,oBAAoBF,QAAQ,EAAE1gC,IAAI,EAAE;EAClD,IAAIpG,SAAS,EAAE;EACf,IAAIla,QAAQ,KAAK;EAEjB,IAAIiC,QAAQ++C,QAAW;IACrBhhD,QAAQ,IAAI;IAEZka,MAAS8mC;GACJ;IACL9mC,SAAS6mC,oBAAoBC,QAAU1gC;;EAGzC,OAAOpG,MAAO3d,OAAM,GAAG,IAAIq9C,WAAY;IACrC1/B;IACA5X,OAAS;MAACq1C,OAAS;IAAC;IACpB33C;IACA8iB,SAAW9iB;EACb,KAAK,IAAI;AACX;AAEO,SAASmhD,gBAAiBxoB,OAAM,EAAE;EACvC,OAAOA,MAAUA,WAAO3tB,IAAI,KAAK,KAAK;AACxC;AC5BO,SAASo2C,cAAeC,QAAO,EAAEr8C,KAAK,EAAEs8C,SAAS,EAAE;EACxD,MAAM3oB,SAAS0oB,OAAO,CAACr8C,KAAM;EAC7B,IAAIgG,OAAO2tB,OAAO3tB,IAAI;EACtB,MAAMu2C,OAAU,IAACv8C,MAAM;EACvB,IAAI5F;EAEJ,IAAI,CAACkiD,SAAW;IACd,OAAOt2C;;EAGT,OAAOA,SAAS,KAAK,IAAIu2C,QAAQ3oC,OAAO,CAAC5N,UAAU,CAAC,CAAG;IACrD,IAAI,CAACxF,eAASwF,IAAO;MACnB,OAAOA;;IAGT5L,MAASiiD,UAAO,CAACr2C,IAAK;IACtB,IAAI,CAAC5L,MAAQ;MACX,OAAO,KAAK;;IAGd,IAAIA,OAAOiwC,OAAO,EAAE;MAClB,OAAOrkC;;IAGTu2C,QAAQ/jD,IAAI,CAACwN;IACbA,OAAO5L,OAAO4L,IAAI;EACpB;EAEA,OAAO,KAAK;AACd;AAOO,SAASw2C,WAAYlhC,KAAI,EAAEtb,KAAK,EAAE4I,KAAK,EAAE;EAE9C,MAAM5C,OAAOy2C,eAAgBnhC;EAE7B,IAAI/e,SAASyJ,IAAO;IAClB,OAAO2N,MAAM3N,IAAKhI,MAAK,CAAI,QAAK,GAAGgI,IAAI;;EAGzC,IAAI5L,SAASsiD,UAAW12C;EAExB,IAAIxF,eAASpG,MAAW1D,UAAKoE,KAAK,CAACV,YAAYA,MAAQ;IACrD,OAAOuiD,kBAAkB32C,IAAI,CAAC,CAAE,GAAEhG,OAAO5F,MAAQwO;;EAGnD,OAAO,CAAC,UAAU,SAAS,OAAO,SAAS,QAAQ,CAACgL,OAAO,CAAC5N,SAAS,CAAKA;AAC5E;AAEA,SAAS22C,kBAAkBC,OAAO,EAAE58C,KAAK,EAAE5F,MAAM,EAAEwO,KAAK,EAAE;EACxD,IAAIg0C,YAAY,GAAOA,gBAAY,GAAK;IACtCxiD,SAAS4F,KAAQ5F;;EAGnB,IAAIA,MAAW4F,cAAS5F,MAAS,QAAKA,UAAUwO,KAAO;IACrD,OAAO,KAAK;;EAGd,OAAOxO;AACT;AAOO,SAASyiD,gBAAgB72C,IAAI,EAAEzH,KAAK,EAAE;EAC3C,IAAIg5B,QAAQ,IAAI;EAChB,IAAIvxB,SAAS,OAAS;IACpBuxB,QAAQh5B,MAAMY,MAAM;GACf,UAAI6G,SAAS,KAAO;IACzBuxB,QAAQh5B,MAAMU,GAAG;GACZ,UAAI1C,SAASyJ,IAAO;IAEzBuxB,QAAQh5B,KAAM4Q,iBAAgB,CAACnJ,KAAKhI,KAAK;GACpC,UAAIO,KAAMsU,aAAY,EAAE;IAC7B0kB,QAAQh5B,MAAMsU,YAAY;;EAE5B,OAAO0kB;AACT;AAQO,SAASulB,eAAgB92C,KAAI,EAAEzH,KAAK,EAAE+R,UAAU,EAAE;EACvD,IAAItS;EAEJ,IAAIgI,SAAS,OAAS;IACpBhI,KAAQsS;GACH,UAAItK,SAAS,KAAO;IACzBhI,KAAQO,SAAMjB,OAAO,CAACoB,OAAO,GAAGH,KAAM5H,IAAG,GAAG4H,MAAMzF,GAAG;GAChD,UAAIyD,SAASyJ,IAAO;IAEzBhI,QAAQgI,KAAKhI,KAAK;GACb;IACLA,QAAQO,MAAMq5B,YAAY;;EAE5B,OAAO55B;AACT;AAKA,SAASy+C,eAAgBnhC,KAAI,EAAE;EAC7B,MAAMhe,UAAUge,KAAKhe,OAAO;EAC5B,MAAMy/C,aAAaz/C,QAAQ0I,IAAI;EAC/B,IAAIA,IAAOS,kBAAes2C,UAAcA,eAAW3iD,MAAM,EAAE2iD;EAE3D,IAAI/2C,SAASpQ,SAAW;IACtBoQ,IAAO,IAAC,CAAC1I,QAAQ6a,eAAe;;EAGlC,IAAInS,IAAS,UAAK,IAAIA,SAAS,IAAI,EAAE;IACnC,OAAO,KAAK;;EAGd,IAAIA,SAAS,IAAI,EAAE;IACjB,OAAO;;EAET,OAAOA;AACT;AC1HO,SAASg3C,eAAgBrpB,OAAM,EAAE;EACtC,MAAM;IAACp1B,KAAK;IAAEyB;IAAOsb;EAAAA,CAAK,GAAGqY;EAC7B,MAAMze,SAAS,EAAE;EACjB,MAAMu/B,WAAWn5B,KAAKm5B,QAAQ;EAC9B,MAAMwI,eAAe3hC,KAAKpG,MAAM;EAChC,MAAMgoC,aAAaC,cAAc5+C,KAAOyB;EACxCk9C,UAAW1kD,KAAI,CAAC0jD,mBAAoB;IAACn9C,GAAG,IAAI;IAAEC,GAAGT,MAAMY;GAASmc;EAEhE,KAAK,IAAI9jB,CAAI,MAAGA,IAAIi9C,QAASl9C,OAAM,EAAEC,CAAK;IACxC,MAAMqkB,UAAU44B,QAAQ,CAACj9C,CAAE;IAC3B,KAAK,IAAIyoB,IAAIpE,OAAQjlB,MAAK,EAAEqpB,CAAKpE,YAAQld,GAAG,EAAEshB,CAAK;MACjDm9B,eAAeloC,MAAQ+nC,cAAY,CAACh9B,EAAE,EAAEi9B;IAC1C;EACF;EACA,OAAO,IAAItI,WAAY;IAAC1/B;IAAQ5X,SAAS;EAAE;AAC7C;AAOA,SAAS6/C,cAAc5+C,KAAK,EAAEyB,KAAK,EAAE;EACnC,MAAMq9C,QAAQ,EAAE;EAChB,MAAMnrB,QAAQ3zB,KAAMgE,wBAAuB,CAAC;EAE5C,KAAK,IAAI/K,CAAI,MAAGA,IAAI06B,KAAM36B,OAAM,EAAEC,CAAK;IACrC,MAAMoJ,OAAOsxB,KAAK,CAAC16B,CAAE;IACrB,IAAIoJ,KAAKZ,KAAK,KAAKA,KAAO;MACxB;;IAEF,IAAI,CAACY,IAAK4D,OAAM,EAAE;MAChB64C,KAAMC,QAAO,CAAC18C,KAAK+C,OAAO;;EAE9B;EACA,OAAO05C;AACT;AAOA,SAASD,cAAeloC,OAAM,EAAEqoC,WAAW,EAAEL,UAAU,EAAE;EACvD,MAAMM,YAAY,EAAE;EACpB,KAAK,IAAIv9B,CAAI,MAAGA,IAAIi9B,UAAW3lD,OAAM,EAAE0oB,CAAK;IAC1C,MAAM3E,OAAO4hC,UAAU,CAACj9B,CAAE;IAC1B,MAAM;MAACoN,KAAK;MAAE7Z,IAAI;MAAE2B;IAAAA,CAAM,GAAGsoC,SAAUniC,OAAMiiC,WAAa;IAE1D,IAAI,CAACpoC,KAAUkY,aAAS7Z,IAAO;MAC7B;;IAEF,IAAI6Z,KAAO;MAGTmwB,UAAUF,OAAO,CAACnoC;KACb;MACLD,OAAO1c,IAAI,CAAC2c;MACZ,IAAI,CAAC3B,IAAM;QAET;;;EAGN;EACA0B,OAAO1c,IAAI,CAAIglD;AACjB;AAQA,SAASC,SAAUniC,KAAI,EAAEiiC,WAAW,EAAErf,QAAQ,EAAE;EAC9C,MAAM/oB,KAAQmG,QAAK65B,WAAW,CAACoI,WAAarf;EAC5C,IAAI,CAAC/oB,KAAO;IACV,OAAO,EAAC;;EAGV,MAAMuoC,aAAavoC,KAAK,CAAC+oB,QAAS;EAClC,MAAMuW,WAAWn5B,KAAKm5B,QAAQ;EAC9B,MAAMwH,aAAa3gC,KAAKpG,MAAM;EAC9B,IAAImY,QAAQ,KAAK;EACjB,IAAI7Z,OAAO,KAAK;EAChB,KAAK,IAAIhc,CAAI,MAAGA,IAAIi9C,QAASl9C,OAAM,EAAEC,CAAK;IACxC,MAAMqkB,UAAU44B,QAAQ,CAACj9C,CAAE;IAC3B,MAAMmmD,aAAa1B,UAAU,CAACpgC,QAAQjlB,KAAK,CAAC,CAACsnC,QAAS;IACtD,MAAM0f,YAAY3B,UAAU,CAACpgC,QAAQld,GAAG,CAAC,CAACu/B,QAAS;IACnD,IAAI4T,WAAW4L,UAAYC,cAAYC,SAAY;MACjDvwB,QAAQqwB,UAAeC;MACvBnqC,OAAOkqC,UAAeE;MACtB;;EAEJ;EACA,OAAO;IAACvwB;IAAO7Z;IAAM2B;EAAK;AAC5B;AC1GO,MAAM0oC;EACXvoD,YAAYmJ,IAAI,EAAE;IAChB,IAAI,CAACM,CAAC,GAAGN,KAAKM,CAAC;IACf,IAAI,CAACC,CAAC,GAAGP,KAAKO,CAAC;IACf,IAAI,CAACiW,MAAM,GAAGxW,KAAKwW,MAAM;EAC3B;EAEAm+B,YAAYtuC,GAAG,EAAEiyC,MAAM,EAAEt4C,IAAI,EAAE;IAC7B,MAAM;MAACM;MAAGC;MAAGiW;IAAM,CAAC,GAAG,IAAI;IAC3B8hC,SAASA,MAAU;MAACngD,KAAO;MAAG+H,GAAKoX;IAAG;IACtCjR,GAAI4V,IAAG,CAAC3b,GAAGC,CAAGiW,UAAQ8hC,MAAOp4C,IAAG,EAAEo4C,OAAOngD,KAAK,EAAE,IAAI;IACpD,OAAO,CAAC6H,KAAKs4C,MAAM;EACrB;EAEA5B,YAAYhgC,KAAK,EAAE;IACjB,MAAM;MAACpW;MAAGC;MAAGiW;IAAM,CAAC,GAAG,IAAI;IAC3B,MAAMwB,QAAQtB,MAAMsB,KAAK;IACzB,OAAO;MACL1X,GAAGA,CAAIrI,QAAKyf,GAAG,CAACM,KAASxB;MACzBjW,GAAGA,CAAItI,QAAK2f,GAAG,CAACI,KAASxB;MACzBwB;IACF;EACF;AACF;ACdO,SAASqnC,UAAWnqB,OAAM,EAAE;EACjC,MAAM;IAAC79B,KAAK;IAAEkQ;IAAMsV;EAAAA,CAAK,GAAGqY;EAE5B,IAAInzB,eAASwF,IAAO;IAClB,OAAO+3C,eAAejoD,KAAOkQ;;EAG/B,IAAIA,SAAS,OAAS;IACpB,OAAOg3C,eAAgBrpB;;EAGzB,IAAI3tB,SAAS,OAAS;IACpB,OAAO,IAAI;;EAGb,MAAMg2C,WAAWgC,eAAgBrqB;EAEjC,IAAIqoB,oBAAoB6B,SAAW;IACjC,OAAO7B;;EAGT,OAAOE,oBAAoBF,QAAU1gC;AACvC;AAMA,SAASyiC,eAAejoD,KAAK,EAAEkK,KAAK,EAAE;EACpC,MAAMY,OAAO9K,KAAMwR,eAAc,CAACtH;EAClC,MAAMqqC,OAAUzpC,WAAQ9K,KAAMsjB,iBAAgB,CAACpZ;EAC/C,OAAOqqC,OAAUzpC,QAAK+C,OAAO,GAAG,IAAI;AACtC;AAEA,SAASq6C,gBAAgBrqB,MAAM,EAAE;EAC/B,MAAMp1B,KAAQo1B,UAAOp1B,KAAK,IAAI,EAAC;EAE/B,IAAIA,MAAMyf,wBAAwB,EAAE;IAClC,OAAOigC,uBAAwBtqB;;EAEjC,OAAOuqB,qBAAsBvqB;AAC/B;AAGA,SAASuqB,sBAAsBvqB,MAAM,EAAE;EACrC,MAAM;IAACp1B,KAAQ;IAAIyH;EAAAA,CAAK,GAAG2tB;EAC3B,MAAM4D,QAAQslB,gBAAgB72C,IAAMzH;EAEpC,IAAIiC,eAAS+2B,KAAQ;IACnB,MAAMpmB,aAAa5S,MAAM0S,YAAY;IAErC,OAAO;MACLlS,CAAGoS,eAAaomB,QAAQ,IAAI;MAC5Bv4B,CAAGmS,eAAa,IAAI,GAAGomB;IACzB;;EAGF,OAAO,IAAI;AACb;AAEA,SAAS0mB,wBAAwBtqB,MAAM,EAAE;EACvC,MAAM;IAACp1B;IAAOyH;EAAAA,CAAK,GAAG2tB;EACtB,MAAMr2B,UAAUiB,MAAMjB,OAAO;EAC7B,MAAM/F,MAASgH,SAAM8K,SAAS,GAAG9R,MAAM;EACvC,MAAMX,QAAQ0G,QAAQoB,OAAO,GAAGH,MAAMzF,GAAG,GAAGyF,MAAM5H,GAAG;EACrD,MAAMqH,QAAQ8+C,eAAgB92C,OAAMzH,KAAO3H;EAC3C,MAAMwD,SAAS,EAAE;EAEjB,IAAIkD,OAAQkV,KAAI,CAACoK,QAAQ,EAAE;IACzB,MAAMxJ,MAAS7U,SAAMyf,wBAAwB,CAAC,CAAGpnB;IACjD,OAAO,IAAIinD,SAAU;MACnB9+C,GAAGqU,OAAOrU,CAAC;MACXC,GAAGoU,OAAOpU,CAAC;MACXiW,MAAQ1W,QAAMof,6BAA6B,CAAC3f;IAC9C;;EAGF,KAAK,IAAIxG,CAAI,MAAGA,CAAID,WAAQ,EAAEC,CAAG;IAC/B4C,OAAO5B,IAAI,CAAC+F,KAAMyf,yBAAwB,CAACxmB,CAAGwG;EAChD;EACA,OAAO5D;AACT;ACzFO,SAAS+jD,SAAUr5C,IAAG,EAAE6uB,MAAM,EAAE9oB,IAAI,EAAE;EAC3C,MAAMzQ,SAAS0jD,UAAWnqB;EAC1B,MAAM;IAACrY,IAAI;IAAE/c;IAAOyC;EAAAA,CAAK,GAAG2yB;EAC5B,MAAMyqB,WAAW9iC,KAAKhe,OAAO;EAC7B,MAAMy/C,aAAaqB,SAASp4C,IAAI;EAChC,MAAMtM,QAAQ0kD,SAASjmC,eAAe;EACtC,MAAM;IAACkmC,QAAQ3kD,KAAK;IAAE2jD,QAAQ3jD;EAAK,CAAC,GAAGqjD,cAAc,EAAC;EACtD,IAAI3iD,MAAUkhB,SAAKpG,MAAM,CAAC3d,MAAM,EAAE;IAChC+kC,SAASx3B,GAAK+F;IACdyzC,OAAOx5C,GAAK;MAACwW;MAAMlhB;MAAQikD;MAAOhB;MAAOxyC;MAAMtM;MAAOyC;IAAI;IAC1Dy7B,UAAW33B;;AAEf;AAEA,SAASw5C,MAAOx5C,IAAG,EAAE3K,GAAG,EAAE;EACxB,MAAM;IAACmhB;IAAMlhB;IAAQikD;IAAOhB;IAAOxyC;IAAMtM;EAAAA,CAAM,GAAGpE;EAClD,MAAM+jC,WAAW5iB,IAAKtgB,MAAK,GAAG,UAAUb,IAAI6G,IAAI;EAEhD8D,IAAIs2B,IAAI;EAER,IAAI8C,aAAa,GAAOmf,cAAUgB,KAAO;IACvCE,YAAaz5C,MAAK1K,MAAQyQ,OAAK5L,GAAG;IAClC+G,KAAKlB,GAAK;MAACwW;MAAMlhB;MAAQV,KAAO2kD;MAAO9/C;MAAO2/B;IAAQ;IACtDp5B,IAAIw2B,OAAO;IACXx2B,IAAIs2B,IAAI;IACRmjB,YAAaz5C,MAAK1K,MAAQyQ,OAAK1L,MAAM;;EAEvC6G,KAAKlB,GAAK;IAACwW;IAAMlhB;IAAQV,KAAO2jD;IAAO9+C;IAAO2/B;EAAQ;EAEtDp5B,IAAIw2B,OAAO;AACb;AAEA,SAASijB,aAAaz5C,GAAG,EAAE1K,MAAM,EAAEokD,KAAK,EAAE;EACxC,MAAM;IAAC/J;IAAUv/B;EAAAA,CAAO,GAAG9a;EAC3B,IAAIizB,QAAQ,IAAI;EAChB,IAAIoxB,WAAW,KAAK;EAEpB35C,IAAIg3B,SAAS;EACb,KAAK,MAAMjgB,WAAW44B,QAAU;IAC9B,MAAM;MAAC79C;MAAO+H;IAAAA,CAAI,GAAGkd;IACrB,MAAMS,aAAapH,MAAM,CAACte,KAAM;IAChC,MAAM2lB,YAAYrH,MAAM,CAACmmC,eAAgBzkD,QAAO+H,KAAKuW,MAAQ;IAC7D,IAAImY,KAAO;MACTvoB,IAAIi3B,MAAM,CAACzf,WAAWvd,CAAC,EAAEud,WAAWtd,CAAC;MACrCquB,QAAQ,KAAK;KACR;MACLvoB,IAAIk3B,MAAM,CAAC1f,UAAWvd,EAAC,EAAEy/C;MACzB15C,IAAIk3B,MAAM,CAAC1f,WAAWvd,CAAC,EAAEud,WAAWtd,CAAC;;IAEvCy/C,WAAW,CAAC,CAACrkD,OAAOg5C,WAAW,CAACtuC,KAAK+W,OAAS;MAACtO,IAAMkxC;IAAQ;IAC7D,IAAIA,QAAU;MACZ35C,IAAIypC,SAAS;KACR;MACLzpC,IAAIk3B,MAAM,CAACzf,SAAUxd,EAAC,EAAEy/C;;EAE5B;EAEA15C,IAAIk3B,MAAM,CAAC5hC,OAAOizB,KAAK,GAAGtuB,CAAC,EAAEy/C;EAC7B15C,IAAIypC,SAAS;EACbzpC,IAAI6F,IAAI;AACV;AAEA,SAAS3E,IAAKlB,IAAG,EAAE3K,GAAG,EAAE;EACtB,MAAM;IAACmhB,IAAI;IAAElhB,MAAM;IAAE8jC,QAAQ;IAAExkC,KAAK;IAAE6E;EAAK,CAAC,GAAGpE;EAC/C,MAAMs6C,WAAWM,SAAUz5B,OAAMlhB,MAAQ8jC;EAEzC,KAAK,MAAM;IAACvK,MAAQ+qB;IAAKtkD,QAAQohD,GAAG;IAAE5kD,KAAK;IAAE+H;EAAG,CAAC,IAAI81C,QAAU;IAC7D,MAAM;MAACz8B,KAAO;QAACG,eAAkBze;MAAAA,CAAM,GAAG;IAAE,CAAC,GAAGglD;IAChD,MAAMC,WAAWvkD,WAAW,IAAI;IAEhC0K,IAAIs2B,IAAI;IACRt2B,IAAIoT,SAAS,GAAGC;IAEhBymC,WAAW95C,GAAKvG,SAAOogD,QAAYrD,eAAWpd,UAAUtnC,KAAO+H;IAE/DmG,IAAIg3B,SAAS;IAEb,MAAM2iB,WAAW,CAAC,CAACnjC,IAAK83B,YAAW,CAACtuC,GAAK45C;IAEzC,IAAIzjD;IACJ,IAAI0jD,QAAU;MACZ,IAAIF,QAAU;QACZ35C,IAAIypC,SAAS;OACR;QACLsQ,kBAAmB/5C,MAAK1K,QAAQuE,GAAKu/B;;MAGvC,MAAM4gB,aAAa,CAAC,CAAC1kD,OAAOg5C,WAAW,CAACtuC,KAAK02C,GAAK;QAACjuC,IAAMkxC;QAAU//C,SAAS;MAAI;MAChFzD,OAAOwjD,QAAYK;MACnB,IAAI,CAAC7jD,IAAM;QACT4jD,kBAAmB/5C,MAAK1K,QAAQxD,KAAOsnC;;;IAI3Cp5B,IAAIypC,SAAS;IACbzpC,IAAIkB,IAAI,CAAC/K,IAAO,eAAY,SAAS;IAErC6J,IAAIw2B,OAAO;EACb;AACF;AAEA,SAASsjB,WAAW95C,GAAG,EAAEvG,KAAK,EAAEw4C,MAAM,EAAE;EACtC,MAAM;IAAC93C;IAAKE;EAAAA,CAAO,GAAGZ,MAAMzI,KAAK,CAACgV,SAAS;EAC3C,MAAM;IAACozB;IAAUtnC;IAAO+H;EAAG,CAAC,GAAGo4C,UAAU,EAAC;EAC1C,IAAI7Y,aAAa,GAAK;IACpBp5B,IAAIg3B,SAAS;IACbh3B,IAAIwyC,IAAI,CAAC1gD,OAAOqI,GAAKN,QAAM/H,OAAOuI,MAASF;IAC3C6F,IAAI6F,IAAI;;AAEZ;AAEA,SAASk0C,mBAAmB/5C,GAAG,EAAE1K,MAAM,EAAE+a,KAAK,EAAE+oB,QAAQ,EAAE;EACxD,MAAM6gB,iBAAoB3kD,UAAO+6C,WAAW,CAAChgC,KAAO+oB;EACpD,IAAI6gB,iBAAmB;IACrBj6C,IAAIk3B,MAAM,CAAC+iB,kBAAkBhgD,CAAC,EAAEggD,kBAAkB//C,CAAC;;AAEvD;AC7GA,YAAe;EACbyC,EAAI;EAEJu9C,oBAAoBlpD,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IACzC,MAAMsL,QAAQ,CAAC9S,KAAM6K,KAAI,CAAC0G,QAAQ,IAAI,EAAE,EAAE9P,MAAM;IAChD,MAAM8kD,UAAU,EAAE;IAClB,IAAIz7C,MAAMpJ,GAAG8jB,IAAMqY;IAEnB,KAAKn8B,CAAI,MAAGA,CAAIoR,UAAO,EAAEpR,CAAG;MAC1BoJ,IAAO9K,SAAMwR,cAAc,CAAC9P;MAC5B8jB,OAAO1a,KAAK+C,OAAO;MACnBgwB,SAAS,IAAI;MAEb,IAAIrY,IAAQA,SAAKhe,OAAO,IAAIge,gBAAgBs5B,WAAa;QACvDjhB,MAAS;UACP0W,OAASv0C,QAAMsjB,gBAAgB,CAAC5hB;UAChCwI,KAAOxI;UACPwO,IAAMw2C,cAAYlhC,MAAM9jB,CAAGoR;UAC3B9S;UACAkL,MAAMJ,IAAK6B,WAAU,CAACnF,OAAO,CAACwJ,SAAS;UACvCvI,OAAOqC,KAAKE,MAAM;UAClBwa;QACF;;MAGF1a,KAAKq+C,OAAO,GAAGtrB;MACf0oB,QAAQ7jD,IAAI,CAACm7B;IACf;IAEA,KAAKn8B,CAAI,MAAGA,CAAIoR,UAAO,EAAEpR,CAAG;MAC1Bm8B,MAAS0oB,UAAO,CAAC7kD,CAAE;MACnB,IAAI,CAACm8B,MAAUA,WAAO3tB,IAAI,KAAK,KAAK,EAAE;QACpC;;MAGF2tB,OAAO3tB,IAAI,GAAGo2C,eAAeC,OAAS7kD,KAAG8F,QAAQg/C,SAAS;IAC5D;EACF;EAEA4C,WAAWppD,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAChC,MAAM7F,OAAO6F,OAAQ6hD,SAAQ,KAAK;IAClC,MAAMt/C,WAAW/J,MAAMkqB,4BAA4B;IACnD,MAAMnV,OAAO/U,MAAMgV,SAAS;IAC5B,KAAK,IAAItT,IAAIqI,QAAStI,OAAM,GAAG,CAAGC,OAAK,CAAG,IAAEA,CAAG;MAC7C,MAAMm8B,MAAS9zB,WAAQ,CAACrI,EAAE,CAACynD,OAAO;MAClC,IAAI,CAACtrB,MAAQ;QACX;;MAGFA,OAAOrY,IAAI,CAACkB,mBAAmB,CAAC3R,MAAM8oB,OAAO3yB,IAAI;MACjD,IAAIvJ,QAAQk8B,MAAO3tB,KAAI,EAAE;QACvBm4C,SAAUroD,OAAMgP,GAAG,EAAE6uB,MAAQ9oB;;IAEjC;EACF;EAEAu0C,mBAAmBtpD,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IACxC,IAAIA,QAAQ6hD,QAAQ,KAAK,oBAAsB;MAC7C;;IAGF,MAAMt/C,WAAW/J,MAAMkqB,4BAA4B;IACnD,KAAK,IAAIxoB,IAAIqI,QAAStI,OAAM,GAAG,CAAGC,OAAK,CAAG,IAAEA,CAAG;MAC7C,MAAMm8B,MAAS9zB,WAAQ,CAACrI,EAAE,CAACynD,OAAO;MAElC,IAAI9C,iBAAiBxoB,MAAS;QAC5BwqB,UAAUroD,KAAMgP,IAAG,EAAE6uB,QAAQ79B,MAAMgV,SAAS;;IAEhD;EACF;EAEAu0C,kBAAkBvpD,KAAK,EAAE+X,IAAI,EAAEvQ,OAAO,EAAE;IACtC,MAAMq2B,MAAS9lB,QAAKjN,IAAI,CAACq+C,OAAO;IAEhC,IAAI,CAAC9C,gBAAiBxoB,YAAWr2B,OAAQ6hD,SAAQ,KAAK,mBAAqB;MACzE;;IAGFhB,UAAUroD,KAAMgP,IAAG,EAAE6uB,QAAQ79B,MAAMgV,SAAS;EAC9C;EAEAnO,QAAU;IACR2/C,WAAW,IAAI;IACf6C,QAAU;EACZ;AACF,CAAE;ACzEF,MAAMG,aAAa,CAACC,WAAWviB,QAAa;EAC1C,IAAI;IAACwiB,SAAYxiB;IAAUyiB,QAAWziB;EAAAA,CAAS,GAAGuiB;EAElD,IAAIA,UAAUG,aAAa,EAAE;IAC3BF,SAAY9oD,QAAKC,GAAG,CAAC6oD,SAAWxiB;IAChCyiB,WAAWF,UAAUI,eAAe,IAAIjpD,IAAKC,IAAG,CAAC8oD,QAAUziB;;EAG7D,OAAO;IACLyiB;IACAD;IACAI,UAAYlpD,OAAKoC,GAAG,CAACkkC,QAAUwiB;EACjC;AACF;AAEA,MAAMK,aAAa,CAAChxC,CAAGrP,QAAMqP,MAAM,IAAI,IAAIrP,MAAM,IAAI,IAAIqP,EAAEvO,YAAY,KAAKd,EAAEc,YAAY,IAAIuO,EAAE7O,KAAK,KAAKR,EAAEQ,KAAK;AAE1G,MAAM8/C,MAAe1zB;EAK1B92B,YAAY6G,MAAM,EAAE;IAClB,KAAK;IAEL,IAAI,CAAC4jD,MAAM,GAAG,KAAK;IAGnB,IAAI,CAACC,cAAc,GAAG,EAAE;IAKxB,IAAI,CAACC,YAAY,GAAG,IAAI;IAGxB,IAAI,CAACC,YAAY,GAAG,KAAK;IAEzB,IAAI,CAACpqD,KAAK,GAAGqG,OAAOrG,KAAK;IACzB,IAAI,CAACwH,OAAO,GAAGnB,OAAOmB,OAAO;IAC7B,IAAI,CAACwH,GAAG,GAAG3I,OAAO2I,GAAG;IACrB,IAAI,CAACq7C,WAAW,GAAGvqD;IACnB,IAAI,CAACwqD,WAAW,GAAGxqD;IACnB,IAAI,CAACyqD,UAAU,GAAGzqD;IAClB,IAAI,CAACikB,SAAS,GAAGjkB;IACjB,IAAI,CAACgkB,QAAQ,GAAGhkB;IAChB,IAAI,CAACqJ,GAAG,GAAGrJ;IACX,IAAI,CAACuJ,MAAM,GAAGvJ;IACd,IAAI,CAACwJ,IAAI,GAAGxJ;IACZ,IAAI,CAACsJ,KAAK,GAAGtJ;IACb,IAAI,CAACyd,MAAM,GAAGzd;IACd,IAAI,CAAC0d,KAAK,GAAG1d;IACb,IAAI,CAACg7B,QAAQ,GAAGh7B;IAChB,IAAI,CAACkqB,QAAQ,GAAGlqB;IAChB,IAAI,CAACslB,MAAM,GAAGtlB;IACd,IAAI,CAAC6tB,QAAQ,GAAG7tB;EAClB;EAEA4F,OAAOoe,QAAQ,EAAEC,SAAS,EAAE4Y,OAAO,EAAE;IACnC,IAAI,CAAC7Y,QAAQ,GAAGA;IAChB,IAAI,CAACC,SAAS,GAAGA;IACjB,IAAI,CAAC+W,QAAQ,GAAG6B;IAEhB,IAAI,CAACI,aAAa;IAClB,IAAI,CAACytB,WAAW;IAChB,IAAI,CAACxsB,GAAG;EACV;EAEAjB,aAAgB;IACd,IAAI,IAAI,CAAC5hB,YAAY,EAAI;MACvB,IAAI,CAACqC,KAAK,GAAG,IAAI,CAACsG,QAAQ;MAC1B,IAAI,CAACxa,IAAI,GAAG,IAAI,CAACwxB,QAAQ,CAACxxB,IAAI;MAC9B,IAAI,CAACF,KAAK,GAAG,IAAI,CAACoU,KAAK;KAClB;MACL,IAAI,CAACD,MAAM,GAAG,IAAI,CAACwG,SAAS;MAC5B,IAAI,CAAC5a,GAAG,GAAG,IAAI,CAAC2xB,QAAQ,CAAC3xB,GAAG;MAC5B,IAAI,CAACE,MAAM,GAAG,IAAI,CAACkU,MAAM;;EAE7B;EAEAitC,WAAc;IACZ,MAAMf,YAAY,IAAI,CAACjiD,OAAO,CAAC8L,MAAM,IAAI,EAAC;IAC1C,IAAI+2C,WAAcppD,YAAKwoD,SAAU1nC,eAAc,EAAE,CAAC,IAAI,CAAC/hB,KAAK,CAAC,EAAE,IAAI,KAAK,EAAE;IAE1E,IAAIypD,UAAUj8C,MAAM,EAAE;MACpB68C,cAAcA,WAAY78C,OAAM,CAAE5L,IAAS6nD,cAAUj8C,MAAM,CAAC5L,IAAM,MAAI,CAAC5B,KAAK,CAAC6K,IAAI;;IAGnF,IAAI4+C,UAAU3wC,IAAI,EAAE;MAClBuxC,cAAcA,WAAYvxC,KAAI,CAAC,CAACC,GAAGrP,CAAM+/C,eAAU3wC,IAAI,CAACC,GAAGrP,CAAG,MAAI,CAAC1J,KAAK,CAAC6K,IAAI;;IAG/E,IAAI,IAAI,CAACrD,OAAO,CAACoB,OAAO,EAAE;MACxByhD,YAAYzhD,OAAO;;IAGrB,IAAI,CAACyhD,WAAW,GAAGA;EACrB;EAEArsB,GAAM;IACJ,MAAM;MAACx2B,OAAO;MAAEwH;IAAG,CAAC,GAAG,IAAI;IAM3B,IAAI,CAACxH,OAAQqf,QAAO,EAAE;MACpB,IAAI,CAACrJ,KAAK,GAAG,IAAI,CAACD,MAAM,GAAG;MAC3B;;IAGF,MAAMksC,YAAYjiD,QAAQ8L,MAAM;IAChC,MAAMm3C,YAAYxwB,MAAOwvB,WAAUzvB,IAAI;IACvC,MAAMkN,WAAWujB,UAAUtiD,IAAI;IAC/B,MAAM23B,cAAc,IAAI,CAAC4qB,mBAAmB;IAC5C,MAAM;MAACf,QAAQ;MAAEG;IAAAA,CAAW,GAAGN,WAAWC,SAAWviB;IAErD,IAAI1pB,KAAOD;IAEXvO,GAAIgrB,KAAI,GAAGywB,UAAUppB,MAAM;IAE3B,IAAI,IAAI,CAAClmB,YAAY,EAAI;MACvBqC,QAAQ,IAAI,CAACsG,QAAQ;MACrBvG,SAAS,IAAI,CAACotC,QAAQ,CAAC7qB,WAAaoH,YAAUyiB,UAAUG,UAAc;KACjE;MACLvsC,SAAS,IAAI,CAACwG,SAAS;MACvBvG,QAAQ,IAAI,CAACotC,QAAQ,CAAC9qB,WAAa2qB,aAAWd,UAAUG,UAAc;;IAGxE,IAAI,CAACtsC,KAAK,GAAG5c,KAAKC,GAAG,CAAC2c,KAAOhW,UAAQsc,QAAQ,IAAI,IAAI,CAACA,QAAQ;IAC9D,IAAI,CAACvG,MAAM,GAAG3c,KAAKC,GAAG,CAAC0c,MAAQ/V,UAAQuc,SAAS,IAAI,IAAI,CAACA,SAAS;EACpE;EAKA4mC,SAAS7qB,WAAW,EAAEoH,QAAQ,EAAEyiB,QAAQ,EAAEG,UAAU,EAAE;IACpD,MAAM;MAAC96C,GAAG;MAAE8U,QAAQ;MAAEtc,SAAS;QAAC8L,QAAQ;UAAC4c;QAAAA;MAAQ;IAAC,CAAC,GAAG,IAAI;IAC1D,MAAM26B,QAAW,OAAI,CAACX,cAAc,GAAG,EAAE;IAEzC,MAAMK,UAAa,OAAI,CAACA,UAAU,GAAG,CAAC,EAAE;IACxC,MAAMpwB,aAAa2vB,UAAa55B;IAChC,IAAI46B,WAAchrB;IAElB9wB,IAAIi1B,SAAS,GAAG;IAChBj1B,IAAIo1B,YAAY,GAAG;IAEnB,IAAI2mB,MAAM,CAAC;IACX,IAAI5hD,MAAM,CAACgxB;IACX,IAAI,CAACkwB,WAAW,CAAC7pD,OAAO,CAAC,CAACqiB,YAAYnhB,CAAM;MAC1C,MAAMspD,YAAYrB,QAAYziB,cAAW,CAAKl4B,OAAIi8C,WAAW,CAACpoC,WAAWV,IAAI,EAAE3E,KAAK;MAEpF,IAAI9b,CAAM,UAAK6oD,UAAU,CAACA,UAAW9oD,OAAM,GAAG,EAAE,GAAGupD,YAAY,CAAI96B,aAAUpM,QAAU;QACrFgnC,WAAe3wB;QACfowB,UAAU,CAACA,UAAW9oD,OAAM,IAAIC,CAAI,OAAI,CAAI,IAAC,CAAD,CAAG,GAAG;QAClDyH,GAAOgxB;QACP4wB;;MAGFF,QAAQ,CAACnpD,EAAE,GAAG;QAAC4H,IAAM;QAAGH;QAAK4hD;QAAKvtC,KAAOwtC;QAAWztC,MAAQusC;MAAU;MAEtES,UAAU,CAACA,UAAW9oD,OAAM,GAAG,EAAE,IAAIupD,SAAY96B;IACnD;IAEA,OAAO46B;EACT;EAEAF,SAAS9qB,WAAW,EAAE2qB,SAAS,EAAEd,QAAQ,EAAEuB,WAAW,EAAE;IACtD,MAAM;MAACl8C,GAAG;MAAE+U,SAAS;MAAEvc,SAAS;QAAC8L,QAAQ;UAAC4c;QAAAA;MAAQ;IAAC,CAAC,GAAG,IAAI;IAC3D,MAAM26B,QAAW,OAAI,CAACX,cAAc,GAAG,EAAE;IACzC,MAAMI,WAAc,OAAI,CAACA,WAAW,GAAG,EAAE;IACzC,MAAMa,cAAcpnC,SAAY+b;IAEhC,IAAIsrB,UAAal7B;IACjB,IAAIm7B,eAAkB;IACtB,IAAIC,gBAAmB;IAEvB,IAAIhiD,IAAO;IACX,IAAIiiD,GAAM;IAEV,IAAI,CAAClB,WAAW,CAAC7pD,OAAO,CAAC,CAACqiB,YAAYnhB,CAAM;MAC1C,MAAM;QAACspD,SAAS;QAAElB;MAAU,CAAC,GAAG0B,iBAAkB7B,WAAUc,SAAWz7C,OAAK6T,UAAYqoC;MAGxF,IAAIxpD,IAAI,CAAK4pD,uBAAmBxB,UAAa,OAAI55B,UAAUi7B,WAAa;QACtEC,cAAcC,eAAkBn7B;QAChCo6B,YAAY5nD,IAAI,CAAC;UAAC8a,KAAO6tC;UAAiB9tC,MAAQ+tC;QAAgB;QAClEhiD,QAAQ+hD,eAAkBn7B;QAC1Bq7B;QACAF,kBAAkBC,gBAAmB;;MAIvCT,QAAQ,CAACnpD,EAAE,GAAG;QAAC4H;QAAMH,GAAKmiD;QAAkBC;QAAK/tC,KAAOwtC;QAAWztC,MAAQusC;MAAU;MAGrFuB,eAAkBzqD,QAAKoC,GAAG,CAACqoD,eAAiBL;MAC5CM,oBAAoBxB,UAAa55B;IACnC;IAEAk7B,UAAcC;IACdf,YAAY5nD,IAAI,CAAC;MAAC8a,KAAO6tC;MAAiB9tC,MAAQ+tC;IAAgB;IAElE,OAAOF;EACT;EAEAK,cAAiB;IACf,IAAI,CAAC,IAAI,CAACjkD,OAAO,CAACqf,OAAO,EAAE;MACzB;;IAEF,MAAMiZ,cAAc,IAAI,CAAC4qB,mBAAmB;IAC5C,MAAM;MAACR,cAAgBW;MAAUrjD,OAAS;QAACoxB;QAAOtlB,QAAQ;UAAC4c;QAAO,CAAC;QAAEw7B;MAAAA;IAAI,CAAC,GAAG,IAAI;IACjF,MAAMC,YAAYC,cAAcF,GAAK,MAAI,CAACpiD,IAAI,EAAE,IAAI,CAACkU,KAAK;IAC1D,IAAI,IAAI,CAACrC,YAAY,EAAI;MACvB,IAAI4vC,GAAM;MACV,IAAIzhD,OAAOqxB,cAAe/B,QAAO,IAAI,CAACtvB,IAAI,GAAG4mB,SAAS,IAAI,CAAC9mB,KAAK,GAAG,IAAI,CAACmhD,UAAU,CAACQ,GAAI;MACvF,KAAK,MAAMc,UAAUhB,QAAU;QAC7B,IAAIE,QAAQc,MAAOd,IAAG,EAAE;UACtBA,MAAMc,OAAOd,GAAG;UAChBzhD,OAAOqxB,cAAe/B,QAAO,IAAI,CAACtvB,IAAI,GAAG4mB,SAAS,IAAI,CAAC9mB,KAAK,GAAG,IAAI,CAACmhD,UAAU,CAACQ,GAAI;;QAErFc,OAAO1iD,GAAG,IAAI,IAAI,CAACA,GAAG,GAAG22B,WAAc5P;QACvC27B,MAAOviD,KAAI,GAAGqiD,UAAUG,UAAU,CAACH,UAAU1iD,CAAC,CAACK,IAAOuiD,UAAOruC,KAAK;QAClElU,IAAQuiD,WAAOruC,KAAK,GAAG0S;MACzB;KACK;MACL,IAAIq7B,GAAM;MACV,IAAIpiD,MAAMwxB,cAAe/B,QAAO,IAAI,CAACzvB,GAAG,GAAG22B,WAAc5P,YAAS,IAAI,CAAC7mB,MAAM,GAAG,IAAI,CAACihD,WAAW,CAACiB,IAAI,CAAChuC,MAAM;MAC5G,KAAK,MAAMsuC,UAAUhB,QAAU;QAC7B,IAAIgB,OAAON,GAAG,KAAKA,GAAK;UACtBA,MAAMM,OAAON,GAAG;UAChBpiD,MAAMwxB,eAAe/B,KAAO,MAAI,CAACzvB,GAAG,GAAG22B,cAAc5P,OAAS,MAAI,CAAC7mB,MAAM,GAAG,IAAI,CAACihD,WAAW,CAACiB,IAAI,CAAChuC,MAAM;;QAE1GsuC,OAAO1iD,GAAG,GAAGA;QACb0iD,OAAOviD,IAAI,IAAI,IAAI,CAACA,IAAI,GAAG4mB;QAC3B27B,OAAOviD,IAAI,GAAGqiD,SAAUG,WAAU,CAACH,UAAU1iD,CAAC,CAAC4iD,MAAOviD,KAAI,CAAGuiD,SAAOruC,KAAK;QACzErU,GAAO0iD,WAAOtuC,MAAM,GAAG2S;MACzB;;EAEJ;EAEA/U,YAAe;IACb,OAAO,IAAI,CAAC3T,OAAO,CAACwiB,QAAQ,KAAK,KAAS,QAAI,CAACxiB,OAAO,CAACwiB,QAAQ,KAAK;EACtE;EAEAroB,IAAO;IACL,IAAI,IAAI,CAAC6F,OAAO,CAACqf,OAAO,EAAE;MACxB,MAAM7X,MAAM,IAAI,CAACA,GAAG;MACpBw3B,SAASx3B,KAAK,IAAI;MAElB,IAAI,CAAC+8C,KAAK;MAEVplB,UAAW33B;;EAEf;EAKA+8C,KAAQ;IACN,MAAM;MAACvkD,OAASmB;MAAM2hD;MAAaC;MAAYv7C;IAAAA,CAAI,GAAG,IAAI;IAC1D,MAAM;MAAC4pB,KAAK;MAAEtlB,MAAQm2C;IAAAA,CAAU,GAAG9gD;IACnC,MAAMqjD,eAAenlD,SAASjD,KAAK;IACnC,MAAM+nD,YAAYC,aAAcjjD,MAAK+iD,GAAG,EAAE,IAAI,CAACpiD,IAAI,EAAE,IAAI,CAACkU,KAAK;IAC/D,MAAMitC,YAAYxwB,MAAOwvB,WAAUzvB,IAAI;IACvC,MAAM;MAAC9J;IAAO,CAAC,GAAGu5B;IAClB,MAAMviB,WAAWujB,UAAUtiD,IAAI;IAC/B,MAAM8jD,eAAe/kB,QAAW;IAChC,IAAIglB;IAEJ,IAAI,CAACtlB,SAAS;IAGd53B,IAAIi1B,SAAS,GAAG0nB,SAAU1nB,UAAS,CAAC;IACpCj1B,IAAIo1B,YAAY,GAAG;IACnBp1B,IAAIyT,SAAS,GAAG;IAChBzT,GAAIgrB,KAAI,GAAGywB,UAAUppB,MAAM;IAE3B,MAAM;MAACsoB;MAAUD;MAAWI;IAAU,CAAC,GAAGN,WAAWC,SAAWviB;IAGhE,MAAMilB,gBAAgB,UAASljD,CAAC,EAAEC,CAAC,EAAE2Z,UAAU,EAAE;MAC/C,IAAIhF,MAAM8rC,QAAaA,iBAAY,KAAK9rC,KAAM6rC,eAAcA,YAAY,CAAG;QACzE;;MAIF16C,IAAIs2B,IAAI;MAER,MAAM7iB,SAAY9R,kBAAekS,UAAWJ,UAAS,EAAE;MACvDzT,IAAIoT,SAAS,GAAGzR,cAAekS,YAAWT,SAAS,EAAE4pC;MACrDh9C,IAAIutC,OAAO,GAAG5rC,cAAekS,YAAW05B,OAAO,EAAE;MACjDvtC,IAAI+2B,cAAc,GAAGp1B,cAAekS,YAAWkjB,cAAc,EAAE;MAC/D/2B,IAAIysC,QAAQ,GAAG9qC,cAAekS,YAAW44B,QAAQ,EAAE;MACnDzsC,IAAIyT,SAAS,GAAGA;MAChBzT,IAAIsT,WAAW,GAAG3R,cAAekS,YAAWP,WAAW,EAAE0pC;MAEzDh9C,IAAI82B,WAAW,CAACn1B,eAAekS,UAAWupC,SAAQ,EAAE,EAAE;MAEtD,IAAI3C,UAAUG,aAAa,EAAE;QAG3B,MAAMyC,WAAc;UAClBltC,MAAQuqC,cAAY9oD,IAAK0rD,MAAK,GAAG;UACjCtqC,YAAYa,WAAWb,UAAU;UACjCtC,UAAUmD,WAAWnD,QAAQ;UAC7BgD,WAAaD;QACf;QACA,MAAMiC,OAAUinC,aAAUY,KAAK,CAACtjD,GAAG0gD,QAAW;QAC9C,MAAMhlC,UAAUzb,CAAI+iD;QAGpBO,gBAAgBx9C,KAAKq9C,WAAa3nC,WAASC,OAAS8kC,YAAUI,eAAe,IAAIF;OAC5E;QAGL,MAAM8C,UAAUvjD,CAAItI,QAAKoC,GAAG,CAAC,CAACkkC,WAAWwiB,SAAQ,IAAK,CAAG;QACzD,MAAMgD,QAAWf,aAAUG,UAAU,CAAC7iD,CAAG0gD;QACzC,MAAM5Q,eAAe0H,aAAc59B,YAAWk2B,YAAY;QAE1D/pC,IAAIg3B,SAAS;QAEb,IAAIr/B,OAAOW,MAAM,CAACyxC,cAAczN,IAAI,CAACrvB,CAAKA,UAAM,CAAI;UAClD6lC,mBAAmB9yC,GAAK;YACtB/F,CAAGyjD;YACHxjD,CAAGujD;YACH19B,CAAG46B;YACH16B,CAAGy6B;YACHvqC,MAAQ45B;UACV;SACK;UACL/pC,IAAIwyC,IAAI,CAACkL,QAAUD,WAAS9C,QAAUD;;QAGxC16C,IAAIkB,IAAI;QACR,IAAIuS,cAAc,CAAG;UACnBzT,IAAIm3B,MAAM;;;MAIdn3B,IAAIw2B,OAAO;IACb;IAEA,MAAMmnB,WAAW,UAAS1jD,CAAC,EAAEC,CAAC,EAAE2Z,UAAU,EAAE;MAC1C6jB,UAAW13B,MAAK6T,WAAWV,IAAI,EAAElZ,GAAGC,CAAK4gD,gBAAa,GAAIW,SAAW;QACnEmC,eAAe/pC,WAAWnU,MAAM;QAChCu1B,WAAW0nB,SAAU1nB,UAAS,CAACphB,WAAWohB,SAAS;MACrD;IACF;IAGA,MAAM9oB,eAAe,IAAI,CAACA,YAAY;IACtC,MAAM2kB,cAAc,IAAI,CAAC4qB,mBAAmB;IAC5C,IAAIvvC,YAAc;MAChB+wC,MAAS;QACPjjD,GAAG0xB,cAAe/B,QAAO,IAAI,CAACtvB,IAAI,GAAG4mB,OAAS,MAAI,CAAC9mB,KAAK,GAAGmhD,UAAU,CAAC,CAAE;QACxErhD,GAAG,IAAI,CAACC,GAAG,GAAG+mB,OAAU4P;QACxBta,IAAM;MACR;KACK;MACL0mC,MAAS;QACPjjD,CAAG,MAAI,CAACK,IAAI,GAAG4mB;QACfhnB,GAAGyxB,eAAe/B,KAAO,MAAI,CAACzvB,GAAG,GAAG22B,WAAc5P,YAAS,IAAI,CAAC7mB,MAAM,GAAGihD,WAAW,CAAC,EAAE,CAAC/sC,MAAM;QAC9FiI,IAAM;MACR;;IAGFqnC,sBAAsB,IAAI,CAAC79C,GAAG,EAAErG,KAAKmkD,aAAa;IAElD,MAAM3yB,aAAa2vB,UAAa55B;IAChC,IAAI,CAACm6B,WAAW,CAAC7pD,OAAO,CAAC,CAACqiB,YAAYnhB,CAAM;MAC1CsN,IAAIsT,WAAW,GAAGO,UAAWL,UAAS;MACtCxT,IAAIoT,SAAS,GAAGS,UAAWL,UAAS;MAEpC,MAAMuqC,YAAY/9C,GAAIi8C,YAAW,CAACpoC,UAAWV,KAAI,EAAE3E,KAAK;MACxD,MAAMymB,SAAY0nB,aAAU1nB,SAAS,CAACphB,UAAWohB,UAAS,KAAKphB,UAAWohB,UAAS,GAAGwlB,UAAUxlB,SAAS,CAAD;MACxG,MAAMzmB,QAAQmsC,WAAWsC,YAAec;MACxC,IAAI9jD,IAAIijD,OAAOjjD,CAAC;MAChB,IAAIC,IAAIgjD,OAAOhjD,CAAC;MAEhByiD,UAAUqB,QAAQ,CAAC,IAAI,CAACxvC,KAAK;MAE7B,IAAIrC,YAAc;QAChB,IAAIzZ,IAAI,KAAKuH,CAAIuU,WAAQ0S,UAAU,IAAI,CAAC9mB,KAAK,EAAE;UAC7CF,CAAIgjD,UAAOhjD,CAAC,IAAIixB;UAChB+xB,OAAO1mC,IAAI;UACXvc,IAAIijD,OAAOjjD,CAAC,GAAG0xB,eAAe/B,KAAO,MAAI,CAACtvB,IAAI,GAAG4mB,OAAS,MAAI,CAAC9mB,KAAK,GAAGmhD,UAAU,CAAC2B,OAAO1mC,IAAI,CAAC;;OAE3F,UAAI9jB,IAAI,CAAKwH,QAAIixB,aAAa,IAAI,CAAC9wB,MAAM,EAAE;QAChDJ,CAAIijD,UAAOjjD,CAAC,GAAGA,CAAIqhD,cAAW,CAAC4B,OAAO1mC,IAAI,CAAC,CAAChI,KAAK,GAAG0S;QACpDg8B,OAAO1mC,IAAI;QACXtc,CAAIgjD,UAAOhjD,CAAC,GAAGyxB,eAAe/B,OAAO,IAAI,CAACzvB,GAAG,GAAG22B,cAAc5P,SAAS,IAAI,CAAC7mB,MAAM,GAAGihD,WAAW,CAAC4B,MAAO1mC,KAAI,CAAC,CAACjI,MAAM;;MAGtH,MAAM0vC,QAAQtB,SAAU1iD,EAAC,CAACA;MAE1BkjD,cAAcc,OAAO/jD,CAAG2Z;MAExB5Z,IAAIikD,MAAOjpB,YAAWh7B,CAAI0gD,cAAWsC,YAAc9wC,iBAAelS,CAAIuU,WAAQ,IAAI,CAACpU,KAAK,EAAET,KAAK+iD,GAAG;MAGlGiB,SAAShB,SAAU1iD,EAAC,CAACA,IAAIC,CAAG2Z;MAE5B,IAAI1H,YAAc;QAChB+wC,MAAOjjD,EAAC,IAAIuU,KAAQ0S;MACtB,OAAO,IAAI,OAAOrN,UAAWV,KAAI,KAAK,QAAU;QAC9C,MAAMgrC,iBAAiB1C,UAAUtwB,UAAU;QAC3C+xB,OAAOhjD,CAAC,IAAIkkD,yBAA0BvqC,aAAYsqC,cAAkBj9B;OAC/D;QACLg8B,OAAOhjD,CAAC,IAAIixB;;IAEhB;IAEAkzB,qBAAqB,IAAI,CAACr+C,GAAG,EAAErG,KAAKmkD,aAAa;EACnD;EAKAlmB,SAAY;IACV,MAAMj+B,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAMo4B,YAAYj3B,KAAK82B,KAAK;IAC5B,MAAM6tB,YAAYrzB,MAAO2F,WAAU5F,IAAI;IACvC,MAAMuzB,eAAe98B,SAAUmP,WAAU1P,OAAO;IAEhD,IAAI,CAAC0P,SAAU/Y,QAAO,EAAE;MACtB;;IAGF,MAAM8kC,YAAYC,aAAcjjD,MAAK+iD,GAAG,EAAE,IAAI,CAACpiD,IAAI,EAAE,IAAI,CAACkU,KAAK;IAC/D,MAAMxO,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMgb,WAAW4V,UAAU5V,QAAQ;IACnC,MAAMiiC,eAAeqB,SAAUnlD,KAAI,GAAG;IACtC,MAAMqlD,6BAA6BD,YAAapkD,IAAG,GAAG8iD;IACtD,IAAI/iD;IAIJ,IAAII,OAAO,IAAI,CAACA,IAAI;IACpB,IAAIwa,WAAW,IAAI,CAACtG,KAAK;IAEzB,IAAI,IAAI,CAACrC,YAAY,EAAI;MAEvB2I,WAAWljB,IAAKoC,IAAG,CAAI,OAAI,CAACunD,UAAU;MACtCrhD,CAAI,OAAI,CAACC,GAAG,GAAGqkD;MACflkD,IAAOqxB,kBAAehyB,KAAKiwB,KAAK,EAAEtvB,MAAM,IAAI,CAACF,KAAK,GAAG0a;KAChD;MAEL,MAAMC,YAAY,IAAI,CAACumC,WAAW,CAACznD,MAAM,CAAC,CAACC,GAAKqF,WAASvH,KAAKoC,GAAG,CAACF,GAAKqF,OAAKoV,MAAM,CAAG;MACrFrU,CAAIskD,gCAA6B7yB,eAAehyB,IAAKiwB,MAAK,EAAE,IAAI,CAACzvB,GAAG,EAAE,IAAI,CAACE,MAAM,GAAG0a,YAAYpb,IAAK2K,OAAM,CAAC4c,OAAO,GAAG,IAAI,CAACw6B,mBAAmB;;IAKhJ,MAAMzhD,CAAI0xB,kBAAe3Q,QAAU1gB,QAAMA,IAAOwa;IAGhD9U,IAAIi1B,SAAS,GAAG0nB,SAAU1nB,UAAS,CAAC1J,kBAAmBvQ;IACvDhb,IAAIo1B,YAAY,GAAG;IACnBp1B,GAAIsT,YAAW,GAAGsd,UAAUh8B,KAAK;IACjCoL,GAAIoT,UAAS,GAAGwd,UAAUh8B,KAAK;IAC/BoL,GAAIgrB,KAAI,GAAGszB,UAAUjsB,MAAM;IAE3BqF,WAAW13B,GAAK4wB,YAAUzd,IAAI,EAAElZ,GAAGC,CAAGokD;EACxC;EAKA5C,mBAAsB;IACpB,MAAM9qB,SAAY,OAAI,CAACp4B,OAAO,CAACi4B,KAAK;IACpC,MAAM6tB,YAAYrzB,MAAO2F,WAAU5F,IAAI;IACvC,MAAMuzB,eAAe98B,SAAUmP,WAAU1P,OAAO;IAChD,OAAO0P,UAAU/Y,OAAO,GAAGymC,UAAUnzB,UAAU,GAAGozB,aAAahwC,MAAM,GAAG,CAAC;EAC3E;EAKAkwC,gBAAiBxkD,EAAC,EAAEC,CAAC,EAAE;IACrB,IAAIxH,GAAGgsD,MAAQC;IAEf,IAAI3R,WAAW/yC,CAAG,MAAI,CAACK,IAAI,EAAE,IAAI,CAACF,KAAK,KAClC4yC,UAAW9yC,IAAG,IAAI,CAACC,GAAG,EAAE,IAAI,CAACE,MAAM,CAAG;MAEzCskD,EAAK,OAAI,CAACzD,cAAc;MACxB,KAAKxoD,IAAI,CAAGA,MAAIisD,GAAGlsD,MAAM,EAAE,EAAEC,CAAG;QAC9BgsD,MAASC,KAAE,CAACjsD,CAAE;QAEd,IAAIs6C,WAAW/yC,GAAGykD,MAAOpkD,KAAI,EAAEokD,MAAOpkD,KAAI,GAAGokD,MAAOlwC,MAAK,KACpDw+B,UAAW9yC,IAAGwkD,OAAOvkD,GAAG,EAAEukD,OAAOvkD,GAAG,GAAGukD,MAAOnwC,OAAM,CAAG;UAE1D,OAAO,IAAI,CAAC8sC,WAAW,CAAC3oD,CAAE;;MAE9B;;IAGF,OAAO,IAAI;EACb;EAMAksD,YAAYhrC,CAAC,EAAE;IACb,MAAMja,OAAO,IAAI,CAACnB,OAAO;IACzB,IAAI,CAACqmD,WAAWjrC,CAAEziB,KAAI,EAAEwI,IAAO;MAC7B;;IAIF,MAAMmlD,cAAc,IAAI,CAACL,gBAAgB,CAAC7qC,CAAE3Z,EAAC,EAAE2Z,EAAE1Z,CAAC;IAElD,IAAI0Z,EAAEziB,IAAI,KAAK,eAAeyiB,CAAEziB,KAAI,KAAK,UAAY;MACnD,MAAMs8C,WAAW,IAAI,CAAC0N,YAAY;MAClC,MAAM4D,WAAWhE,WAAWtN,QAAUqR;MACtC,IAAIrR,YAAY,CAACsR,QAAU;QACzB9sD,QAAK0H,MAAKqlD,OAAO,EAAE,CAACprC,GAAG65B,UAAU,IAAI,CAAC,EAAE,IAAI;;MAG9C,IAAI,CAAC0N,YAAY,GAAG2D;MAEpB,IAAIA,eAAe,CAACC,QAAU;QAC5B9sD,QAAK0H,MAAK0vC,OAAO,EAAE,CAACz1B,GAAGkrC,aAAa,IAAI,CAAC,EAAE,IAAI;;IAEnD,OAAO,IAAIA,WAAa;MACtB7sD,QAAK0H,MAAKga,OAAO,EAAE,CAACC,GAAGkrC,aAAa,IAAI,CAAC,EAAE,IAAI;;EAEnD;AACF;AAEA,SAAStC,kBAAkB7B,QAAQ,EAAEc,SAAS,EAAEz7C,GAAG,EAAE6T,UAAU,EAAEqoC,WAAW,EAAE;EAC5E,MAAMF,SAAYiD,sBAAmBprC,UAAY8mC,YAAUc,SAAWz7C;EACtE,MAAM86C,UAAaoE,uBAAoBhD,WAAaroC,cAAY4nC,UAAUtwB,UAAU;EACpF,OAAO;IAAC6wB;IAAWlB;EAAU;AAC/B;AAEA,SAASmE,mBAAmBprC,UAAU,EAAE8mC,QAAQ,EAAEc,SAAS,EAAEz7C,GAAG,EAAE;EAChE,IAAIm/C,iBAAiBtrC,WAAWV,IAAI;EACpC,IAAIgsC,kBAAkB,OAAOA,mBAAmB,QAAU;IACxDA,iBAAiBA,cAAetrD,OAAM,CAAC,CAACkW,CAAGrP,QAAMqP,CAAEtX,OAAM,GAAGiI,EAAEjI,MAAM,GAAGsX,IAAIrP,CAAC;;EAE9E,OAAOigD,WAAYc,UAAUtiD,IAAI,GAAG,IAAK6G,GAAIi8C,YAAW,CAACkD,gBAAgB3wC,KAAK;AAChF;AAEA,SAAS0wC,oBAAoBhD,WAAW,EAAEroC,UAAU,EAAEsqC,cAAc,EAAE;EACpE,IAAIrD,UAAaoB;EACjB,IAAI,OAAOroC,WAAWV,IAAI,KAAK,QAAU;IACvC2nC,aAAasD,0BAA0BvqC,UAAYsqC;;EAErD,OAAOrD;AACT;AAEA,SAASsD,yBAA0BvqC,WAAU,EAAEsqC,cAAc,EAAE;EAC7D,MAAMltB,cAAcpd,WAAWV,IAAI,GAAGU,WAAWV,IAAI,CAAC1gB,MAAM,GAAG,CAAC;EAChE,OAAO0rD,cAAiBltB;AAC1B;AAEA,SAAS4tB,UAAW1tD,KAAI,EAAEwI,IAAI,EAAE;EAC9B,IAAI,CAACxI,IAAS,oBAAeA,SAAS,UAAS,MAAOwI,KAAK0vC,OAAO,IAAI1vC,IAAKqlD,QAAO,CAAG;IACnF,OAAO,IAAI;;EAEb,IAAIrlD,KAAKga,OAAO,KAAKxiB,SAAS,OAAWA,aAAS,SAAQ,CAAI;IAC5D,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd;AAEA,oBAAe;EACbwL,EAAI;EAMJyiD,QAAUpE;EAEVlpD,MAAMd,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAC3B,MAAMsa,MAAS9hB,SAAM8hB,MAAM,GAAG,IAAIkoC,MAAO;MAACh7C,KAAKhP,MAAMgP,GAAG;MAAExH;MAASxH;IAAK;IACxEitB,OAAQzmB,UAAS,CAACxG,OAAO8hB,MAAQta;IACjCylB,OAAQkD,OAAM,CAACnwB,KAAO8hB;EACxB;EAEA5e,KAAKlD,KAAK,EAAE;IACVitB,QAAQqD,SAAS,CAACtwB,KAAOA,QAAM8hB,MAAM;IACrC,OAAO9hB,MAAM8hB,MAAM;EACrB;EAKA4a,aAAa18B,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAClC,MAAMsa,SAAS9hB,MAAM8hB,MAAM;IAC3BmL,OAAQzmB,UAAS,CAACxG,OAAO8hB,MAAQta;IACjCsa,OAAOta,OAAO,GAAGA;EACnB;EAIA02B,YAAYl+B,KAAK,EAAE;IACjB,MAAM8hB,SAAS9hB,MAAM8hB,MAAM;IAC3BA,OAAO0oC,WAAW;IAClB1oC,OAAO2pC,cAAc;EACvB;EAGA4C,UAAWruD,MAAK,EAAE+X,IAAI,EAAE;IACtB,IAAI,CAACA,IAAK6/B,OAAM,EAAE;MAChB53C,MAAM8hB,MAAM,CAAC8rC,WAAW,CAAC71C,KAAKvV,KAAK;;EAEvC;EAEAqE,QAAU;IACRggB,SAAS,IAAI;IACbmD,QAAU;IACV4O,KAAO;IACPjL,UAAU,IAAI;IACd/kB,SAAS,KAAK;IACdwc,MAAQ;IAGRzC,QAAQC,CAAC,EAAEC,UAAU,EAAEf,MAAM,EAAE;MAC7B,MAAM5X,QAAQ2Y,WAAWrY,YAAY;MACrC,MAAM8jD,KAAKxsC,OAAO9hB,KAAK;MACvB,IAAIsuD,GAAGhrC,gBAAgB,CAACpZ,KAAQ;QAC9BokD,GAAG7X,IAAI,CAACvsC;QACR2Y,UAAWnU,OAAM,GAAG,IAAI;OACnB;QACL4/C,GAAG5X,IAAI,CAACxsC;QACR2Y,UAAWnU,OAAM,GAAG,KAAK;;IAE7B;IAEA2pC,SAAS,IAAI;IACb2V,SAAS,IAAI;IAEb16C,MAAQ;MACN1P,OAAQoL,GAAQA,QAAIhP,KAAK,CAACwH,OAAO,CAAC5D,KAAK;MACvC+lD,QAAU;MACVz5B,OAAS;MAYTnO,eAAe/hB,KAAK,EAAE;QACpB,MAAMuR,QAAWvR,SAAM6K,IAAI,CAAC0G,QAAQ;QACpC,MAAM;UAAC+B,QAAQ;YAACs2C;YAAe5nC,UAAU;YAAEiiB;YAAWrgC;YAAO2qD,eAAe;YAAExV;UAAAA;QAAa,CAAC,GAAG/4C,MAAM8hB,MAAM,CAACta,OAAO;QAEnH,OAAOxH,MAAMgK,sBAAsB,GAAGiY,GAAG,CAAEnX,IAAS;UAClD,MAAMoX,QAAQpX,KAAK6B,UAAU,CAACuI,QAAQ,CAAC00C,gBAAgB,IAAI9pD,SAAS;UACpE,MAAM4iB,cAAc+N,SAAUvO,OAAMQ,WAAW;UAE/C,OAAO;YACLP,MAAM5Q,QAAQ,CAACzG,KAAKZ,KAAK,CAAC,CAACwK,KAAK;YAChC0N,WAAWF,MAAMG,eAAe;YAChCG,SAAW5e;YACX8K,MAAQ,GAAC5D,KAAKypC,OAAO;YACrBgI,SAASr6B,MAAMs6B,cAAc;YAC7B4P,UAAUlqC,MAAMqhB,UAAU;YAC1BwC,gBAAgB7jB,MAAMuhB,gBAAgB;YACtCgY,UAAUv5B,MAAMq5B,eAAe;YAC/B94B,SAAW,EAACC,YAAYlF,MAAK,GAAGkF,WAAYnF,OAAM,IAAI;YACtD+E,aAAaJ,MAAMK,WAAW;YAC9BP,UAAYA,gBAAcE,MAAMF,UAAU;YAC1CtC,UAAUwC,MAAMxC,QAAQ;YACxBukB,SAAWA,eAAa/hB,MAAM+hB,SAAS;YACvC8U,cAAcwV,eAAoBxV,iBAAgB72B,UAAM62B,YAAY,CAAD;YAGnEvuC,cAAcM,KAAKZ;UACrB;QACF,GAAG,IAAI;MACT;IACF;IAEAu1B,KAAO;MACL77B,OAAQoL,GAAQA,QAAIhP,KAAK,CAACwH,OAAO,CAAC5D,KAAK;MACvCijB,SAAS,KAAK;MACdmD,QAAU;MACV7H,IAAM;IACR;EACF;EAEAX,WAAa;IACXC,aAAcxD,QAAS,CAACA,KAAK0D,UAAU,CAAC;IACxCrO,MAAQ;MACNmO,WAAa,EAACxD,QAAS,CAAC,CAAC,kBAAkB,UAAU,OAAO,CAACkP,QAAQ,CAAClP;IACxE;EACF;AACF,CAAE;ACzsBK,MAAMuwC,KAAcl4B;EAIzB92B,YAAY6G,MAAM,EAAE;IAClB,KAAK;IAEL,IAAI,CAACrG,KAAK,GAAGqG,OAAOrG,KAAK;IACzB,IAAI,CAACwH,OAAO,GAAGnB,OAAOmB,OAAO;IAC7B,IAAI,CAACwH,GAAG,GAAG3I,OAAO2I,GAAG;IACrB,IAAI,CAACy/C,QAAQ,GAAG3uD;IAChB,IAAI,CAACqJ,GAAG,GAAGrJ;IACX,IAAI,CAACuJ,MAAM,GAAGvJ;IACd,IAAI,CAACwJ,IAAI,GAAGxJ;IACZ,IAAI,CAACsJ,KAAK,GAAGtJ;IACb,IAAI,CAAC0d,KAAK,GAAG1d;IACb,IAAI,CAACyd,MAAM,GAAGzd;IACd,IAAI,CAACkqB,QAAQ,GAAGlqB;IAChB,IAAI,CAACslB,MAAM,GAAGtlB;IACd,IAAI,CAAC6tB,QAAQ,GAAG7tB;EAClB;EAEA4F,MAAOoe,SAAQ,EAAEC,SAAS,EAAE;IAC1B,MAAMpb,OAAO,IAAI,CAACnB,OAAO;IAEzB,IAAI,CAAC8B,IAAI,GAAG;IACZ,IAAI,CAACH,GAAG,GAAG;IAEX,IAAI,CAACR,IAAKke,QAAO,EAAE;MACjB,IAAI,CAACrJ,KAAK,GAAG,IAAI,CAACD,MAAM,GAAG,IAAI,CAACnU,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG;MACtD;;IAGF,IAAI,CAACmU,KAAK,GAAG,IAAI,CAACpU,KAAK,GAAG0a;IAC1B,IAAI,CAACvG,MAAM,GAAG,IAAI,CAAClU,MAAM,GAAG0a;IAE5B,MAAMmgB,YAAY/8B,OAAQwB,MAAKwZ,IAAI,IAAIxZ,KAAKwZ,IAAI,CAAC1gB,MAAM,GAAG,CAAC;IAC3D,IAAI,CAACgtD,QAAQ,GAAGh+B,UAAU9nB,KAAKunB,OAAO;IACtC,MAAMw+B,QAAWxqB,eAAYjK,MAAOtxB,MAAKqxB,IAAI,EAAEG,UAAU,GAAG,IAAI,CAACs0B,QAAQ,CAAClxC,MAAM;IAEhF,IAAI,IAAI,CAACpC,YAAY,EAAI;MACvB,IAAI,CAACoC,MAAM,GAAGmxC;KACT;MACL,IAAI,CAAClxC,KAAK,GAAGkxC;;EAEjB;EAEAvzC,YAAe;IACb,MAAMoR,GAAM,OAAI,CAAC/kB,OAAO,CAACwiB,QAAQ;IACjC,OAAOuC,QAAQ,SAASA,GAAQ;EAClC;EAEAoiC,UAAUlyC,MAAM,EAAE;IAChB,MAAM;MAACtT;MAAKG;MAAMD;MAAQD;MAAO5B;IAAAA,CAAQ,GAAG,IAAI;IAChD,MAAMoxB,QAAQpxB,QAAQoxB,KAAK;IAC3B,IAAIlZ,QAAW;IACf,IAAIoE,UAAU2W,MAAQC;IAEtB,IAAI,IAAI,CAACvf,YAAY,EAAI;MACvBsf,MAASE,kBAAe/B,OAAOtvB,IAAMF;MACrCsxB,SAASvxB,GAAMsT;MACfqH,WAAW1a,KAAQE;KACd;MACL,IAAI9B,QAAQwiB,QAAQ,KAAK,MAAQ;QAC/ByQ,SAASnxB,IAAOmT;QAChBie,MAASC,kBAAe/B,OAAOvvB,MAAQF;QACvCuW,WAAWwB,KAAK,CAAC;OACZ;QACLuZ,SAASrxB,KAAQqT;QACjBie,MAASC,kBAAe/B,OAAOzvB,GAAKE;QACpCqW,WAAWwB,EAAK;;MAElB4C,WAAWza,MAASF;;IAEtB,OAAO;MAACsxB;MAAQC;MAAQ5W;MAAUpE;IAAQ;EAC5C;EAEA/d,IAAO;IACL,MAAMqN,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMrG,OAAO,IAAI,CAACnB,OAAO;IAEzB,IAAI,CAACmB,IAAKke,QAAO,EAAE;MACjB;;IAGF,MAAM+nC,WAAW30B,MAAOtxB,MAAKqxB,IAAI;IACjC,MAAMG,aAAay0B,SAASz0B,UAAU;IACtC,MAAM1d,SAAS0d,UAAa,OAAI,IAAI,CAACs0B,QAAQ,CAACtlD,GAAG;IACjD,MAAM;MAACsxB;MAAQC;MAAQ5W;MAAUpE;IAAAA,CAAS,GAAG,IAAI,CAACivC,SAAS,CAAClyC;IAE5DiqB,WAAW13B,KAAKrG,IAAKwZ,KAAI,EAAE,GAAG,GAAGysC,QAAU;MACzChrD,OAAO+E,KAAK/E,KAAK;MACjBkgB;MACApE;MACAukB,SAAW1J,qBAAmB5xB,KAAKiwB,KAAK;MACxCwL,YAAc;MACde,WAAa,GAAC1K,QAAQC;IACxB;EACF;AACF;AAEA,SAASm0B,WAAY7uD,MAAK,EAAE4/B,SAAS,EAAE;EACrC,MAAMH,QAAQ,IAAI+uB,KAAM;IACtBx/C,KAAKhP,MAAMgP,GAAG;IACdxH,OAASo4B;IACT5/B;EACF;EAEAitB,OAAQzmB,UAAS,CAACxG,OAAOy/B,KAAOG;EAChC3S,OAAQkD,OAAM,CAACnwB,KAAOy/B;EACtBz/B,MAAM8uD,UAAU,GAAGrvB;AACrB;AAEA,mBAAe;EACb9zB,EAAI;EAMJyiD,QAAUI;EAEV1tD,MAAMd,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAC3BqnD,YAAY7uD,KAAOwH;EACrB;EAEAtE,KAAKlD,KAAK,EAAE;IACV,MAAM8uD,aAAa9uD,MAAM8uD,UAAU;IACnC7hC,OAAQqD,UAAS,CAACtwB,KAAO8uD;IACzB,OAAO9uD,MAAM8uD,UAAU;EACzB;EAEApyB,aAAa18B,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAClC,MAAMi4B,QAAQz/B,MAAM8uD,UAAU;IAC9B7hC,OAAQzmB,UAAS,CAACxG,OAAOy/B,KAAOj4B;IAChCi4B,MAAMj4B,OAAO,GAAGA;EAClB;EAEAX,QAAU;IACR+xB,KAAO;IACP/R,SAAS,KAAK;IACdmT,IAAM;MACJ5U,MAAQ;IACV;IACAuI,UAAU,IAAI;IACduC,OAAS;IACTlG,QAAU;IACV7H,IAAM;IACNiD,QAAQ;EACV;EAEAmR,aAAe;IACb3yB,KAAO;EACT;EAEA4d,WAAa;IACXC,aAAa,IAAI;IACjBC,YAAY;EACd;AACF,CAAE;AClKF,MAAMO,MAAM,IAAI8sC;AAEhB,sBAAe;EACbpjD,EAAI;EAEJ7K,MAAMd,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAC3B,MAAMi4B,QAAQ,IAAI+uB,KAAM;MACtBx/C,KAAKhP,MAAMgP,GAAG;MACdxH;MACAxH;IACF;IAEAitB,OAAQzmB,UAAS,CAACxG,OAAOy/B,KAAOj4B;IAChCylB,OAAQkD,OAAM,CAACnwB,KAAOy/B;IACtBxd,GAAI3f,IAAG,CAACtC,KAAOy/B;EACjB;EAEAv8B,KAAKlD,KAAK,EAAE;IACVitB,QAAQqD,SAAS,CAACtwB,KAAOiiB,MAAI9f,GAAG,CAACnC;IACjCiiB,IAAI5e,MAAM,CAACrD;EACb;EAEA08B,aAAa18B,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAClC,MAAMi4B,QAAQxd,GAAI9f,IAAG,CAACnC;IACtBitB,OAAQzmB,UAAS,CAACxG,OAAOy/B,KAAOj4B;IAChCi4B,MAAMj4B,OAAO,GAAGA;EAClB;EAEAX,QAAU;IACR+xB,KAAO;IACP/R,SAAS,KAAK;IACdmT,IAAM;MACJ5U,MAAQ;IACV;IACAuI,UAAU,IAAI;IACduC,OAAS;IACTlG,QAAU;IACV7H,IAAM;IACNiD,QAAQ;EACV;EAEAmR,aAAe;IACb3yB,KAAO;EACT;EAEA4d,WAAa;IACXC,aAAa,IAAI;IACjBC,YAAY;EACd;AACF,CAAE;ACpCF,MAAMstC,WAAc;EAIlBC,QAAQztD,KAAK,EAAE;IACb,IAAI,CAACA,KAAMC,OAAM,EAAE;MACjB,OAAO,KAAK;;IAGd,IAAIC,CAAGg3B;IACP,IAAIw2B,OAAO,IAAIrhB;IACf,IAAI3kC,CAAI;IACR,IAAI4J,KAAQ;IAEZ,KAAKpR,IAAI,GAAGg3B,GAAMl3B,SAAMC,MAAM,EAAEC,IAAIg3B,GAAK,IAAEh3B,CAAG;MAC5C,MAAMioB,EAAKnoB,QAAK,CAACE,EAAE,CAACqM,OAAO;MAC3B,IAAI4b,MAAMA,EAAG8M,SAAQ,EAAI;QACvB,MAAMlK,MAAM5C,GAAG6M,eAAe;QAC9B04B,IAAKvsD,IAAG,CAAC4pB,IAAItjB,CAAC;QACdC,KAAKqjB,IAAIrjB,CAAC;QACV,EAAE4J;;IAEN;IAEA,MAAMq8C,QAAW,IAAID,QAAK,CAACrsD,MAAM,CAAC,CAACkW,GAAGrP,MAAMqP,CAAIrP,QAAKwlD,KAAK/mD,IAAI;IAE9D,OAAO;MACLc,CAAGkmD;MACHjmD,GAAGA,CAAI4J;IACT;EACF;EAKAqZ,OAAQ3qB,MAAK,EAAE4tD,aAAa,EAAE;IAC5B,IAAI,CAAC5tD,KAAMC,OAAM,EAAE;MACjB,OAAO,KAAK;;IAGd,IAAIwH,IAAImmD,cAAcnmD,CAAC;IACvB,IAAIC,IAAIkmD,cAAclmD,CAAC;IACvB,IAAIuiB,cAAc1f,OAAOE,iBAAiB;IAC1C,IAAIvK,GAAGg3B,GAAK22B;IAEZ,KAAK3tD,IAAI,GAAGg3B,GAAMl3B,SAAMC,MAAM,EAAEC,IAAIg3B,GAAK,IAAEh3B,CAAG;MAC5C,MAAMioB,EAAKnoB,QAAK,CAACE,EAAE,CAACqM,OAAO;MAC3B,IAAI4b,MAAMA,EAAG8M,SAAQ,EAAI;QACvB,MAAMnZ,SAASqM,GAAG+B,cAAc;QAChC,MAAMkhB,IAAI0iB,sBAAsBF,aAAe9xC;QAE/C,IAAIsvB,IAAInhB,WAAa;UACnBA,WAAcmhB;UACdyiB,cAAiB1lC;;;IAGvB;IAEA,IAAI0lC,cAAgB;MAClB,MAAME,KAAKF,eAAe74B,eAAe;MACzCvtB,IAAIsmD,GAAGtmD,CAAC;MACRC,IAAIqmD,GAAGrmD,CAAC;;IAGV,OAAO;MACLD;MACAC;IACF;EACF;AACF;AAGA,SAASsmD,YAAal0C,KAAI,EAAEm0C,MAAM,EAAE;EAClC,IAAIA,MAAQ;IACV,IAAItoD,QAAQsoD,MAAS;MAEnBpkD,MAAMud,SAAS,CAAClmB,IAAI,CAACgtD,KAAK,CAACp0C,IAAMm0C;KAC5B;MACLn0C,KAAK5Y,IAAI,CAAC+sD;;;EAId,OAAOn0C;AACT;AAQA,SAASq0C,aAAcC,IAAG,EAAE;EAC1B,IAAI,CAAC,OAAOA,QAAQ,QAAYA,mBAAeC,MAAK,KAAMD,GAAI9xC,QAAO,CAAC,QAAQ,CAAC,CAAG;IAChF,OAAO8xC,IAAItnB,KAAK,CAAC;;EAEnB,OAAOsnB;AACT;AASA,SAASE,kBAAkB9vD,KAAK,EAAE4B,IAAI,EAAE;EACtC,MAAM;IAACmM,OAAO;IAAEvD;IAAcN;EAAAA,CAAM,GAAGtI;EACvC,MAAM+K,UAAa3M,SAAMwR,cAAc,CAAChH,cAAcmC,UAAU;EAChE,MAAM;IAAC+H;IAAOxM;EAAAA,CAAM,GAAGyE,WAAW8H,gBAAgB,CAACvK;EAEnD,OAAO;IACLlK;IACA0U;IACA9H,MAAQD,aAAWiH,SAAS,CAAC1J;IAC7B+D,GAAKjO,QAAM6K,IAAI,CAAC0G,QAAQ,CAAC/G,YAAa,EAACK,IAAI,CAACX,KAAM;IAClD6lD,cAAgB7nD;IAChB2F,SAASlB,WAAW4D,UAAU;IAC9BvC,SAAW9D;IACXM;IACAuD;EACF;AACF;AAKA,SAASiiD,eAAeC,OAAO,EAAEzoD,OAAO,EAAE;EACxC,MAAMwH,GAAMihD,WAAQjwD,KAAK,CAACgP,GAAG;EAC7B,MAAM;IAACkhD,IAAI;IAAEC;IAAQ1wB;EAAAA,CAAM,GAAGwwB;EAC9B,MAAM;IAACtG;IAAUD;EAAAA,CAAU,GAAGliD;EAC9B,MAAM4oD,WAAWn2B,MAAOzyB,SAAQ4oD,QAAQ;EACxC,MAAM9C,YAAYrzB,MAAOzyB,SAAQ8lD,SAAS;EAC1C,MAAM+C,aAAap2B,MAAOzyB,SAAQ6oD,UAAU;EAC5C,MAAMC,iBAAiB7wB,MAAMh+B,MAAM;EACnC,MAAM8uD,kBAAkBJ,OAAO1uD,MAAM;EACrC,MAAM+uD,oBAAoBN,KAAKzuD,MAAM;EAErC,MAAMyuB,UAAUO,SAAUjpB,SAAQ0oB,OAAO;EACzC,IAAI3S,SAAS2S,QAAQ3S,MAAM;EAC3B,IAAIC,KAAQ;EAGZ,IAAIizC,qBAAqBP,KAAKrtD,MAAM,CAAC,CAACiQ,KAAO49C,eAAa59C,KAAQ49C,YAASC,MAAM,CAAClvD,MAAM,GAAGivD,SAASx2B,KAAK,CAACz4B,MAAM,GAAGivD,QAASE,MAAK,CAACnvD,MAAM,EAAE;EAC1IgvD,kBAAsBR,YAAQY,UAAU,CAACpvD,MAAM,GAAGwuD,OAAQa,UAAS,CAACrvD,MAAM;EAE1E,IAAI6uD,cAAgB;IAClB/yC,UAAU+yC,cAAiBhD,aAAUnzB,UAAU,GAC9C,CAACm2B,cAAiB,QAAK9oD,QAAQupD,YAAY,GAC3CvpD,QAAQwpD,iBAAiB;;EAE5B,IAAIP,kBAAoB;IAEtB,MAAMQ,cAAiBzpD,WAAQ0pD,aAAa,GAAGtwD,IAAKoC,IAAG,CAAC0mD,WAAW0G,QAASj2B,WAAU,CAAIi2B,YAASj2B,UAAU;IAC7G5c,UAAUizC,oBAAoBS,cAC7B,GAACR,sBAAqBD,iBAAgB,IAAKJ,SAASj2B,UAAU,GAC9D,CAACs2B,qBAAqB,KAAKjpD,QAAQ2pD,WAAW;;EAEjD,IAAIZ,eAAiB;IACnBhzC,UAAU/V,OAAQ4pD,gBAAe,GAChCb,kBAAkBF,UAAWl2B,WAAU,GACtCo2B,mBAAkB,KAAK/oD,QAAQ6pD,aAAa;;EAIhD,IAAIC,YAAe;EACnB,MAAMC,eAAe,UAAS/rC,IAAI,EAAE;IAClChI,KAAQ5c,QAAKoC,GAAG,CAACwa,OAAOxO,IAAIi8C,WAAW,CAACzlC,IAAMhI,OAAK,GAAG8zC;EACxD;EAEAtiD,IAAIs2B,IAAI;EAERt2B,GAAIgrB,KAAI,GAAGszB,UAAUjsB,MAAM;EAC3BzQ,IAAKq/B,SAAQxwB,KAAK,EAAE8xB;EAGpBviD,GAAIgrB,KAAI,GAAGo2B,SAAS/uB,MAAM;EAC1BzQ,KAAKq/B,QAAQY,UAAU,CAACj4C,MAAM,CAACq3C,QAAQa,SAAS,CAAGS;EAGnDD,YAAe9pD,WAAQ0pD,aAAa,GAAIvH,WAAW,IAAIniD,OAAQ+mB,WAAU,GAAI,CAAC;EAC9EqC,IAAKs/B,OAAOQ,QAAa;IACvB9/B,IAAK8/B,UAASC,MAAM,EAAEY;IACtB3gC,IAAK8/B,UAASx2B,KAAK,EAAEq3B;IACrB3gC,IAAK8/B,UAASE,KAAK,EAAEW;EACvB;EAGAD,YAAe;EAGftiD,GAAIgrB,KAAI,GAAGq2B,WAAWhvB,MAAM;EAC5BzQ,IAAKq/B,SAAQE,MAAM,EAAEoB;EAErBviD,IAAIw2B,OAAO;EAGXhoB,SAAS0S,QAAQ1S,KAAK;EAEtB,OAAO;IAACA;IAAOD;EAAM;AACvB;AAEA,SAASi0C,eAAgBxxD,MAAK,EAAEmI,IAAI,EAAE;EACpC,MAAM;IAACe;IAAGqU;EAAAA,CAAO,GAAGpV;EAEpB,IAAIe,IAAIqU,SAAS,CAAG;IAClB,OAAO;EACT,OAAO,IAAIrU,CAAKlJ,SAAMud,MAAM,GAAGA,SAAS,CAAI;IAC1C,OAAO;;EAET,OAAO;AACT;AAEA,SAASk0C,oBAAoBC,MAAM,EAAE1xD,KAAK,EAAEwH,OAAO,EAAEW,IAAI,EAAE;EACzD,MAAM;IAACc;IAAGuU;EAAAA,CAAM,GAAGrV;EACnB,MAAMwpD,KAAQnqD,WAAQoqD,SAAS,GAAGpqD,QAAQqqD,YAAY;EACtD,IAAIH,WAAW,MAAUzoD,QAAIuU,QAAQm0C,KAAQ3xD,SAAMwd,KAAK,EAAE;IACxD,OAAO,IAAI;;EAGb,IAAIk0C,MAAW,gBAAWzoD,CAAIuU,WAAQm0C,QAAQ,CAAG;IAC/C,OAAO,IAAI;;AAEf;AAEA,SAASG,gBAAgB9xD,KAAK,EAAEwH,OAAO,EAAEW,IAAI,EAAE4pD,MAAM,EAAE;EACrD,MAAM;IAAC9oD;IAAGuU;EAAAA,CAAM,GAAGrV;EACnB,MAAM;IAACqV,OAAOw0C,UAAU;IAAEh9C,SAAW;MAAC1L,IAAI;MAAEF;IAAK;EAAC,CAAC,GAAGpJ;EACtD,IAAI0xD,MAAS;EAEb,IAAIK,WAAW,QAAU;IACvBL,MAASzoD,QAAK,CAACK,OAAOF,KAAI,IAAK,IAAI,SAAS,OAAO;GAC9C,UAAIH,CAAKuU,YAAQ,CAAG;IACzBk0C,MAAS;EACX,OAAO,IAAIzoD,KAAK+oD,UAAax0C,WAAQ,CAAG;IACtCk0C,MAAS;;EAGX,IAAID,mBAAoBC,SAAQ1xD,KAAOwH,WAASW,IAAO;IACrDupD,MAAS;;EAGX,OAAOA;AACT;AAKA,SAASO,kBAAmBjyD,MAAK,EAAEwH,OAAO,EAAEW,IAAI,EAAE;EAChD,MAAM4pD,SAAS5pD,KAAK4pD,MAAM,IAAIvqD,QAAQuqD,MAAM,IAAIP,gBAAgBxxD,KAAOmI;EAEvE,OAAO;IACLupD,MAAQvpD,OAAKupD,MAAM,IAAIlqD,QAAQkqD,MAAM,IAAII,gBAAgB9xD,KAAOwH,WAASW,IAAM4pD;IAC/EA;EACF;AACF;AAEA,SAASG,MAAO/pD,KAAI,EAAEupD,MAAM,EAAE;EAC5B,IAAI;IAACzoD;IAAGuU;EAAAA,CAAM,GAAGrV;EACjB,IAAIupD,WAAW,OAAS;IACtBzoD,CAAKuU;GACA,UAAIk0C,WAAW,QAAU;IAC9BzoD,KAAMuU,KAAQ;;EAEhB,OAAOvU;AACT;AAEA,SAASkpD,OAAOhqD,IAAI,EAAE4pD,MAAM,EAAEK,cAAc,EAAE;EAE5C,IAAI;IAAClpD;IAAGqU;EAAAA,CAAO,GAAGpV;EAClB,IAAI4pD,WAAW,KAAO;IACpB7oD,CAAKkpD;GACA,UAAIL,WAAW,QAAU;IAC9B7oD,KAAKqU,MAAS60C;GACT;IACLlpD,KAAMqU,MAAS;;EAEjB,OAAOrU;AACT;AAKA,SAASmpD,mBAAmB7qD,OAAO,EAAEW,IAAI,EAAEmqD,SAAS,EAAEtyD,KAAK,EAAE;EAC3D,MAAM;IAAC4xD,SAAS;IAAEC;IAAcU;EAAAA,CAAa,GAAG/qD;EAChD,MAAM;IAACkqD;IAAQK;EAAAA,CAAO,GAAGO;EACzB,MAAMF,iBAAiBR,SAAYC;EACnC,MAAM;IAACjR,OAAO;IAAEC,QAAQ;IAAEC;IAAYC;EAAAA,CAAY,GAAGN,aAAc8R;EAEnE,IAAItpD,IAAIipD,OAAO/pD,IAAMupD;EACrB,MAAMxoD,IAAIipD,MAAOhqD,OAAM4pD,MAAQK;EAE/B,IAAIL,WAAW,QAAU;IACvB,IAAIL,WAAW,MAAQ;MACrBzoD,CAAKmpD;KACA,UAAIV,WAAW,OAAS;MAC7BzoD,CAAKmpD;;GAEF,UAAIV,WAAW,MAAQ;IAC5BzoD,KAAKrI,IAAKoC,IAAG,CAAC49C,SAASE,UAAc8Q;GAChC,UAAIF,WAAW,OAAS;IAC7BzoD,KAAKrI,IAAKoC,IAAG,CAAC69C,UAAUE,WAAe6Q;;EAGzC,OAAO;IACL3oD,GAAGu2B,YAAYv2B,CAAG,KAAGjJ,MAAMwd,KAAK,GAAGrV,KAAKqV,KAAK;IAC7CtU,GAAGs2B,YAAYt2B,CAAG,KAAGlJ,MAAMud,MAAM,GAAGpV,KAAKoV,MAAM;EACjD;AACF;AAEA,SAASi1C,YAAYvC,OAAO,EAAEr3B,KAAK,EAAEpxB,OAAO,EAAE;EAC5C,MAAM0oB,UAAUO,SAAUjpB,SAAQ0oB,OAAO;EAEzC,OAAO0I,UAAU,QACbq3B,WAAQhnD,CAAC,GAAGgnD,QAAQzyC,KAAK,GAAG,CAC5Bob,aAAU,OACRq3B,WAAQhnD,CAAC,GAAGgnD,QAAQzyC,KAAK,GAAG0S,OAAQ9mB,MAAK,GACzC6mD,OAAQhnD,EAAC,GAAGinB,QAAQ5mB,IAAI;AAChC;AAKA,SAASmpD,uBAAwB/zB,SAAQ,EAAE;EACzC,OAAO8wB,aAAa,EAAE,EAAEG,aAAcjxB;AACxC;AAEA,SAASg0B,qBAAqB/kD,MAAM,EAAEsiD,OAAO,EAAE0C,YAAY,EAAE;EAC3D,OAAO/kD,cAAcD,MAAQ;IAC3BsiD;IACA0C;IACAxyD,IAAM;EACR;AACF;AAEA,SAASyyD,iBAAkBxyD,UAAS,EAAEiV,OAAO,EAAE;EAC7C,MAAMqT,QAAWrT,cAAWA,OAAQxH,QAAO,IAAIwH,OAAQxH,QAAO,CAACoiD,OAAO,IAAI56C,OAAQxH,QAAO,CAACoiD,OAAO,CAAC7vD,SAAS;EAC3G,OAAOsoB,QAAWtoB,aAAUsoB,QAAQ,CAACA,YAAYtoB,SAAS;AAC5D;AAEA,MAAMyyD,gBAAmB;EAEvBC,WAAaC;EACbtzB,MAAMkzB,YAAY,EAAE;IAClB,IAAIA,aAAalxD,MAAM,GAAG,CAAG;MAC3B,MAAMG,OAAO+wD,YAAY,CAAC,CAAE;MAC5B,MAAMr/C,SAAS1R,IAAK5B,MAAK,CAAC6K,IAAI,CAACyI,MAAM;MACrC,MAAM0/C,UAAa1/C,YAASA,MAAO7R,OAAM,GAAG,CAAC;MAE7C,IAAI,IAAI,IAAI,IAAI,CAAC+F,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC+C,IAAI,KAAK,SAAW;QAC3D,OAAO3I,IAAKiM,QAAO,CAAC6G,KAAK,IAAI;OACxB,UAAI9S,IAAK8S,MAAK,EAAE;QACrB,OAAO9S,KAAK8S,KAAK;MACnB,OAAO,IAAIs+C,UAAa,QAAKpxD,IAAKoM,UAAS,GAAGglD,UAAY;QACxD,OAAO1/C,MAAM,CAAC1R,IAAKoM,UAAS,CAAC;;;IAIjC,OAAO;EACT;EACAilD,UAAYF;EAGZlC,UAAYkC;EAGZG,WAAaH;EACbr+C,MAAMy+C,WAAW,EAAE;IACjB,IAAI,IAAI,IAAI,IAAI,CAAC3rD,OAAO,IAAI,IAAI,CAACA,OAAO,CAAC+C,IAAI,KAAK,SAAW;MAC3D,OAAO4oD,YAAYz+C,KAAK,GAAG,OAAOy+C,YAAYpD,cAAc,IAAIoD,YAAYpD,cAAc;;IAG5F,IAAIr7C,KAAQy+C,eAAYtlD,OAAO,CAAC6G,KAAK,IAAI;IAEzC,IAAIA,KAAO;MACTA,KAAS;;IAEX,MAAMxM,QAAQirD,YAAYpD,cAAc;IACxC,IAAI,CAACj2C,cAAc5R,KAAQ;MACzBwM,KAASxM;;IAEX,OAAOwM;EACT;EACA0+C,WAAWD,WAAW,EAAE;IACtB,MAAMroD,OAAOqoD,WAAYnzD,MAAK,CAACwR,cAAc,CAAC2hD,YAAY3oD,YAAY;IACtE,MAAMhD,UAAUsD,IAAK6B,WAAU,CAACuI,QAAQ,CAACi+C,YAAYnlD,SAAS;IAC9D,OAAO;MACLuU,aAAa/a,QAAQ+a,WAAW;MAChCF,iBAAiB7a,QAAQ6a,eAAe;MACxCK,aAAalb,QAAQkb,WAAW;MAChC6gB,YAAY/7B,QAAQ+7B,UAAU;MAC9BE,kBAAkBj8B,QAAQi8B,gBAAgB;MAC1CsV,YAAc;IAChB;EACF;EACAsa,cAAiB;IACf,OAAO,IAAI,CAAC7rD,OAAO,CAAC8rD,SAAS;EAC/B;EACAC,gBAAgBJ,WAAW,EAAE;IAC3B,MAAMroD,OAAOqoD,WAAYnzD,MAAK,CAACwR,cAAc,CAAC2hD,YAAY3oD,YAAY;IACtE,MAAMhD,UAAUsD,IAAK6B,WAAU,CAACuI,QAAQ,CAACi+C,YAAYnlD,SAAS;IAC9D,OAAO;MACLgU,YAAYxa,QAAQwa,UAAU;MAC9BtC,UAAUlY,QAAQkY;IACpB;EACF;EACA8zC,UAAYT;EAGZjC,SAAWiC;EAGXU,YAAcV;EACd5C,MAAQ4C;EACRW,WAAaX;AACf;AAWA,SAASY,2BAA2BvzD,SAAS,EAAE6d,IAAI,EAAEjP,GAAG,EAAE86B,GAAG,EAAE;EAC7D,MAAMxR,SAASl4B,SAAS,CAAC6d,KAAK,CAAChd,IAAI,CAAC+N,GAAK86B;EAEzC,IAAI,OAAOxR,WAAW,WAAa;IACjC,OAAOu6B,gBAAgB,CAAC50C,KAAK,CAAChd,IAAI,CAAC+N,GAAK86B;;EAG1C,OAAOxR;AACT;AAEO,MAAMs7B,OAAgBt9B;EAK3B,OAAO04B,cAAcA,WAAY;EAEjCxvD,YAAY6G,MAAM,EAAE;IAClB,KAAK;IAEL,IAAI,CAACwtD,OAAO,GAAG;IACf,IAAI,CAAChyD,OAAO,GAAG,EAAE;IACjB,IAAI,CAACiyD,cAAc,GAAGh0D;IACtB,IAAI,CAACi0D,KAAK,GAAGj0D;IACb,IAAI,CAACk0D,iBAAiB,GAAGl0D;IACzB,IAAI,CAACm0D,aAAa,GAAG,EAAE;IACvB,IAAI,CAACnsD,WAAW,GAAGhI;IACnB,IAAI,CAAC8P,QAAQ,GAAG9P;IAChB,IAAI,CAACE,KAAK,GAAGqG,OAAOrG,KAAK;IACzB,IAAI,CAACwH,OAAO,GAAGnB,OAAOmB,OAAO;IAC7B,IAAI,CAAC0sD,UAAU,GAAGp0D;IAClB,IAAI,CAAC2/B,KAAK,GAAG3/B;IACb,IAAI,CAAC+wD,UAAU,GAAG/wD;IAClB,IAAI,CAACowD,IAAI,GAAGpwD;IACZ,IAAI,CAACgxD,SAAS,GAAGhxD;IACjB,IAAI,CAACqwD,MAAM,GAAGrwD;IACd,IAAI,CAAC4xD,MAAM,GAAG5xD;IACd,IAAI,CAACiyD,MAAM,GAAGjyD;IACd,IAAI,CAACmJ,CAAC,GAAGnJ;IACT,IAAI,CAACoJ,CAAC,GAAGpJ;IACT,IAAI,CAACyd,MAAM,GAAGzd;IACd,IAAI,CAAC0d,KAAK,GAAG1d;IACb,IAAI,CAACq0D,MAAM,GAAGr0D;IACd,IAAI,CAACs0D,MAAM,GAAGt0D;IAGd,IAAI,CAACu0D,WAAW,GAAGv0D;IACnB,IAAI,CAACw0D,gBAAgB,GAAGx0D;IACxB,IAAI,CAACy0D,eAAe,GAAGz0D;EACzB;EAEAiQ,WAAWvI,OAAO,EAAE;IAClB,IAAI,CAACA,OAAO,GAAGA;IACf,IAAI,CAACwsD,iBAAiB,GAAGl0D;IACzB,IAAI,CAAC8P,QAAQ,GAAG9P;EAClB;EAKAmW,kBAAqB;IACnB,MAAM3H,SAAS,IAAI,CAAC0lD,iBAAiB;IAErC,IAAI1lD,MAAQ;MACV,OAAOA;;IAGT,MAAMtO,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMwH,UAAU,IAAI,CAACA,OAAO,CAACw0B,UAAU,CAAC,IAAI,CAACrpB,UAAU;IACvD,MAAMhK,OAAOnB,OAAQ4vB,QAAO,IAAIp3B,MAAMwH,OAAO,CAACV,SAAS,IAAIU,QAAQE,UAAU;IAC7E,MAAMA,aAAa,IAAItB,WAAW,IAAI,CAACpG,KAAK,EAAE2I;IAC9C,IAAIA,KAAKyN,UAAU,EAAE;MACnB,IAAI,CAAC49C,iBAAiB,GAAGrtD,OAAOqP,MAAM,CAACtO;;IAGzC,OAAOA;EACT;EAKAiL,UAAa;IACX,OAAO,IAAI,CAAC/C,QAAQ,KACpB,IAAI,CAACA,QAAQ,GAAG8iD,qBAAqB,IAAI,CAAC1yD,KAAK,CAAC2S,UAAU,IAAI,IAAI,EAAE,IAAI,CAACshD,aAAa;EACxF;EAEAO,QAASn/C,QAAO,EAAE7N,OAAO,EAAE;IACzB,MAAM;MAACpH;IAAS,CAAC,GAAGoH;IAEpB,MAAMsrD,WAAca,8BAA2BvzD,SAAW,iBAAe,IAAI,EAAEiV;IAC/E,MAAMoqB,KAAQk0B,8BAA2BvzD,SAAW,WAAS,IAAI,EAAEiV;IACnE,MAAM49C,UAAaU,8BAA2BvzD,SAAW,gBAAc,IAAI,EAAEiV;IAE7E,IAAI6kB,QAAQ,EAAE;IACdA,KAAQs1B,gBAAat1B,OAAOy1B,aAAcmD;IAC1C54B,KAAQs1B,gBAAat1B,OAAOy1B,aAAclwB;IAC1CvF,KAAQs1B,gBAAat1B,OAAOy1B,aAAcsD;IAE1C,OAAO/4B;EACT;EAEAu6B,aAAc9B,aAAY,EAAEnrD,OAAO,EAAE;IACnC,OAAOirD,wBACLkB,0BAA2BnsD,SAAQpH,SAAS,EAAE,cAAc,IAAI,EAAEuyD;EAEtE;EAEA+B,OAAQ/B,aAAY,EAAEnrD,OAAO,EAAE;IAC7B,MAAM;MAACpH;IAAS,CAAC,GAAGoH;IACpB,MAAMmtD,YAAY,EAAE;IAEpB/jC,IAAK+hC,eAAet9C,OAAY;MAC9B,MAAMq7C,QAAW;QACfC,QAAQ,EAAE;QACVz2B,OAAO,EAAE;QACT02B,OAAO;MACT;MACA,MAAMgE,SAAShC,kBAAkBxyD,SAAWiV;MAC5Cm6C,YAAakB,UAASC,MAAM,EAAEhB,cAAcgE,2BAA2BiB,MAAQ,iBAAe,IAAI,EAAEv/C;MACpGm6C,aAAakB,SAASx2B,KAAK,EAAEy5B,2BAA2BiB,MAAQ,WAAS,IAAI,EAAEv/C;MAC/Em6C,YAAakB,UAASE,KAAK,EAAEjB,cAAcgE,2BAA2BiB,MAAQ,gBAAc,IAAI,EAAEv/C;MAElGs/C,UAAUjyD,IAAI,CAACguD;IACjB;IAEA,OAAOiE;EACT;EAEAE,YAAalC,aAAY,EAAEnrD,OAAO,EAAE;IAClC,OAAOirD,wBACLkB,0BAA2BnsD,SAAQpH,SAAS,EAAE,aAAa,IAAI,EAAEuyD;EAErE;EAGAmC,SAAUnC,aAAY,EAAEnrD,OAAO,EAAE;IAC/B,MAAM;MAACpH;IAAS,CAAC,GAAGoH;IAEpB,MAAMisD,YAAeE,8BAA2BvzD,SAAW,kBAAgB,IAAI,EAAEuyD;IACjF,MAAMxC,MAASwD,8BAA2BvzD,SAAW,YAAU,IAAI,EAAEuyD;IACrE,MAAMe,WAAcC,8BAA2BvzD,SAAW,iBAAe,IAAI,EAAEuyD;IAE/E,IAAIz4B,QAAQ,EAAE;IACdA,KAAQs1B,gBAAat1B,OAAOy1B,aAAc8D;IAC1Cv5B,KAAQs1B,gBAAat1B,OAAOy1B,aAAcQ;IAC1Cj2B,KAAQs1B,gBAAat1B,OAAOy1B,aAAc+D;IAE1C,OAAOx5B;EACT;EAKA66B,aAAavtD,OAAO,EAAE;IACpB,MAAM/B,SAAS,IAAI,CAAC5D,OAAO;IAC3B,MAAMgJ,IAAO,OAAI,CAAC7K,KAAK,CAAC6K,IAAI;IAC5B,MAAMwpD,cAAc,EAAE;IACtB,MAAMC,mBAAmB,EAAE;IAC3B,MAAMC,kBAAkB,EAAE;IAC1B,IAAI5B,eAAe,EAAE;IACrB,IAAIjxD,CAAGg3B;IAEP,KAAKh3B,IAAI,GAAGg3B,GAAMjzB,UAAOhE,MAAM,EAAEC,IAAIg3B,GAAK,IAAEh3B,CAAG;MAC7CixD,YAAajwD,KAAI,CAACotD,iBAAkB,KAAI,CAAC9vD,KAAK,EAAEyF,MAAM,CAAC/D,CAAE;IAC3D;IAGA,IAAI8F,QAAQgG,MAAM,EAAE;MAClBmlD,eAAeA,YAAanlD,OAAM,CAAC,CAACO,OAAS7D,SAAOoiB,KAAU9kB,aAAQgG,MAAM,CAACO,OAAS7D,SAAOoiB,KAAOzhB;;IAItG,IAAIrD,QAAQwtD,QAAQ,EAAE;MACpBrC,YAAeA,gBAAa75C,IAAI,CAAC,CAACC,GAAGrP,MAAMlC,OAAQwtD,SAAQ,CAACj8C,GAAGrP,CAAGmB;;IAIpE+lB,IAAK+hC,eAAet9C,OAAY;MAC9B,MAAMu/C,MAAShC,qBAAkBprD,OAAQpH,UAAS,EAAEiV;MACpDg/C,YAAY3xD,IAAI,CAACixD,2BAA2BiB,MAAQ,gBAAc,IAAI,EAAEv/C;MACxEi/C,iBAAiB5xD,IAAI,CAACixD,2BAA2BiB,MAAQ,qBAAmB,IAAI,EAAEv/C;MAClFk/C,gBAAgB7xD,IAAI,CAACixD,2BAA2BiB,MAAQ,oBAAkB,IAAI,EAAEv/C;IAClF;IAEA,IAAI,CAACg/C,WAAW,GAAGA;IACnB,IAAI,CAACC,gBAAgB,GAAGA;IACxB,IAAI,CAACC,eAAe,GAAGA;IACvB,IAAI,CAACL,UAAU,GAAGvB;IAClB,OAAOA;EACT;EAEAjtD,MAAOoqB,QAAO,EAAE8nB,MAAM,EAAE;IACtB,MAAMpwC,UAAU,IAAI,CAACA,OAAO,CAACw0B,UAAU,CAAC,IAAI,CAACrpB,UAAU;IACvD,MAAMlN,SAAS,IAAI,CAAC5D,OAAO;IAC3B,IAAIuF;IACJ,IAAIurD,eAAe,EAAE;IAErB,IAAI,CAACltD,MAAOhE,OAAM,EAAE;MAClB,IAAI,IAAI,CAACoyD,OAAO,KAAK,CAAG;QACtBzsD,UAAa;UACXysD,OAAS;QACX;;KAEG;MACL,MAAM7pC,QAAWglC,cAAW,CAACxnD,QAAQwiB,QAAQ,CAAC,CAAC/oB,IAAI,CAAC,IAAI,EAAEwE,MAAQ,MAAI,CAACquD,cAAc;MACrFnB,YAAe,OAAI,CAACoC,YAAY,CAACvtD;MAEjC,IAAI,CAACi4B,KAAK,GAAG,IAAI,CAAC+0B,QAAQ,CAAC7B,YAAcnrD;MACzC,IAAI,CAACqpD,UAAU,GAAG,IAAI,CAAC4D,aAAa,CAAC9B,YAAcnrD;MACnD,IAAI,CAAC0oD,IAAI,GAAG,IAAI,CAACwE,OAAO,CAAC/B,YAAcnrD;MACvC,IAAI,CAACspD,SAAS,GAAG,IAAI,CAAC+D,YAAY,CAAClC,YAAcnrD;MACjD,IAAI,CAAC2oD,MAAM,GAAG,IAAI,CAAC2E,SAAS,CAACnC,YAAcnrD;MAE3C,MAAMW,OAAO,IAAI,CAAC4rD,KAAK,GAAG/D,eAAe,IAAI,EAAExoD;MAC/C,MAAMytD,kBAAkBtuD,MAAOyB,OAAM,CAAC,IAAI4hB,QAAU7hB;MACpD,MAAMmqD,YAAYL,kBAAmB,KAAI,CAACjyD,KAAK,EAAEwH,OAASytD;MAC1D,MAAMC,kBAAkB7C,kBAAmB7qD,UAASytD,iBAAiB3C,SAAW,MAAI,CAACtyD,KAAK;MAE1F,IAAI,CAAC0xD,MAAM,GAAGY,UAAUZ,MAAM;MAC9B,IAAI,CAACK,MAAM,GAAGO,UAAUP,MAAM;MAE9B3qD,UAAa;QACXysD,OAAS;QACT5qD,GAAGisD,gBAAgBjsD,CAAC;QACpBC,GAAGgsD,gBAAgBhsD,CAAC;QACpBsU,OAAOrV,KAAKqV,KAAK;QACjBD,QAAQpV,KAAKoV,MAAM;QACnB42C,QAAQnqC,SAAS/gB,CAAC;QAClBmrD,QAAQpqC,SAAS9gB;MACnB;;IAGF,IAAI,CAAC+qD,aAAa,GAAGtB;IACrB,IAAI,CAAC/iD,QAAQ,GAAG9P;IAEhB,IAAIsH,UAAY;MACd,IAAI,CAAC6O,kBAAkB,GAAGvQ,MAAM,CAAC,IAAI,EAAE0B;;IAGzC,IAAI0oB,WAAWtoB,OAAQ2tD,SAAQ,EAAE;MAC/B3tD,QAAQ2tD,QAAQ,CAACl0D,IAAI,CAAC,IAAI,EAAE;QAACjB,KAAO,MAAI,CAACA,KAAK;QAAEiwD,SAAS,IAAI;QAAErY;MAAM;;EAEzE;EAEAwd,UAAUC,YAAY,EAAErmD,GAAG,EAAE7G,IAAI,EAAEX,OAAO,EAAE;IAC1C,MAAM8tD,gBAAgB,IAAI,CAACC,gBAAgB,CAACF,cAAcltD,IAAMX;IAEhEwH,IAAIk3B,MAAM,CAACovB,cAAcxyB,EAAE,EAAEwyB,cAAcvyB,EAAE;IAC7C/zB,IAAIk3B,MAAM,CAACovB,cAActyB,EAAE,EAAEsyB,cAAcryB,EAAE;IAC7Cj0B,IAAIk3B,MAAM,CAACovB,cAAcE,EAAE,EAAEF,cAAcG,EAAE;EAC/C;EAEAF,iBAAiBF,YAAY,EAAEltD,IAAI,EAAEX,OAAO,EAAE;IAC5C,MAAM;MAACkqD,MAAM;MAAEK;IAAM,CAAC,GAAG,IAAI;IAC7B,MAAM;MAACH;MAAWW;IAAAA,CAAa,GAAG/qD;IAClC,MAAM;MAACo5C,OAAO;MAAEC,QAAQ;MAAEC;MAAYC;IAAAA,CAAY,GAAGN,aAAc8R;IACnE,MAAM;MAACtpD,CAAGysD;MAAKxsD,CAAGysD;IAAAA,CAAI,GAAGN;IACzB,MAAM;MAAC73C;MAAOD;IAAAA,CAAO,GAAGpV;IACxB,IAAI26B,EAAIE,MAAIwyB,EAAIzyB,MAAIE,EAAIwyB;IAExB,IAAI1D,WAAW,QAAU;MACvB9uB,KAAK0yB,MAAOp4C,MAAS;MAErB,IAAIm0C,WAAW,MAAQ;QACrB5uB,EAAK4yB;QACL1yB,KAAKF,EAAK8uB;QAGV7uB,KAAKE,EAAK2uB;QACV6D,KAAKxyB,EAAK2uB;OACL;QACL9uB,KAAK4yB,GAAMl4C;QACXwlB,KAAKF,EAAK8uB;QAGV7uB,KAAKE,EAAK2uB;QACV6D,KAAKxyB,EAAK2uB;;MAGZ4D,EAAK1yB;KACA;MACL,IAAI4uB,WAAW,MAAQ;QACrB1uB,KAAK0yB,GAAM90D,QAAKoC,GAAG,CAAC49C,SAASE,UAAe8Q;OACvC,UAAIF,WAAW,OAAS;QAC7B1uB,KAAK0yB,MAAMl4C,KAAQ5c,QAAKoC,GAAG,CAAC69C,UAAUE,WAAe6Q;OAChD;QACL5uB,EAAK,OAAI,CAACmxB,MAAM;;MAGlB,IAAIpC,WAAW,KAAO;QACpBhvB,EAAK4yB;QACL1yB,KAAKF,EAAK6uB;QAGV9uB,KAAKE,EAAK4uB;QACV4D,KAAKxyB,EAAK4uB;OACL;QACL7uB,KAAK4yB,GAAMp4C;QACX0lB,KAAKF,EAAK6uB;QAGV9uB,KAAKE,EAAK4uB;QACV4D,KAAKxyB,EAAK4uB;;MAEZ6D,EAAK1yB;;IAEP,OAAO;MAACD;MAAIE;MAAIwyB;MAAIzyB;MAAIE;MAAIwyB;IAAE;EAChC;EAEA7uB,UAAUgvB,EAAE,EAAE5mD,GAAG,EAAExH,OAAO,EAAE;IAC1B,MAAMi4B,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMh+B,SAASg+B,MAAMh+B,MAAM;IAC3B,IAAI6rD,WAAWyD,YAAcrvD;IAE7B,IAAID,MAAQ;MACV,MAAMkqD,YAAYC,aAAcpkD,SAAQkkD,GAAG,EAAE,IAAI,CAACziD,CAAC,EAAE,IAAI,CAACuU,KAAK;MAE/Do4C,GAAG3sD,CAAC,GAAGupD,YAAY,IAAI,EAAEhrD,QAAQ8yB,UAAU,EAAE9yB;MAE7CwH,IAAIi1B,SAAS,GAAG0nB,UAAU1nB,SAAS,CAACz8B,QAAQ8yB,UAAU;MACtDtrB,IAAIo1B,YAAY,GAAG;MAEnBkpB,SAAYrzB,UAAOzyB,QAAQ8lD,SAAS;MACpCyD,eAAevpD,QAAQupD,YAAY;MAEnC/hD,GAAIoT,UAAS,GAAG5a,QAAQquD,UAAU;MAClC7mD,GAAIgrB,KAAI,GAAGszB,UAAUjsB,MAAM;MAE3B,KAAK3/B,CAAI,MAAGA,CAAID,WAAQ,EAAEC,CAAG;QAC3BsN,IAAI29C,QAAQ,CAACltB,KAAK,CAAC/9B,EAAE,EAAEiqD,SAAU1iD,EAAC,CAAC2sD,GAAG3sD,CAAC,CAAG2sD,KAAG1sD,CAAC,GAAGokD,UAAUnzB,UAAU,GAAG;QACxEy7B,GAAG1sD,CAAC,IAAIokD,UAAUnzB,UAAU,GAAG42B;QAE/B,IAAIrvD,IAAI,MAAMD,MAAQ;UACpBm0D,GAAG1sD,CAAC,IAAI1B,QAAQwpD,iBAAiB,GAAGD;;MAExC;;EAEJ;EAKA+E,cAAc9mD,GAAG,EAAE4mD,EAAE,EAAEl0D,CAAC,EAAEiqD,SAAS,EAAEnkD,OAAO,EAAE;IAC5C,MAAM4rD,UAAa,OAAI,CAACiB,WAAW,CAAC3yD,CAAE;IACtC,MAAM6xD,eAAkB,OAAI,CAACe,gBAAgB,CAAC5yD,CAAE;IAChD,MAAM;MAACgoD;MAAWC;IAAAA,CAAS,GAAGniD;IAC9B,MAAM4oD,WAAWn2B,MAAOzyB,SAAQ4oD,QAAQ;IACxC,MAAM2F,MAASvD,eAAY,IAAI,EAAE,MAAQhrD;IACzC,MAAMwuD,YAAYrK,SAAU1iD,EAAC,CAAC8sD;IAC9B,MAAME,OAAUvM,eAAY0G,QAASj2B,WAAU,GAAIi2B,UAASj2B,UAAU,GAAGuvB,SAAQ,IAAK,IAAI,CAAC;IAC3F,MAAMwM,SAASN,EAAG1sD,EAAC,GAAG+sD;IAEtB,IAAIzuD,QAAQoiD,aAAa,EAAE;MACzB,MAAMyC,WAAc;QAClBltC,QAAQve,IAAKC,IAAG,CAAC8oD,UAAUD,SAAa;QACxC1nC,YAAYuxC,gBAAgBvxC,UAAU;QACtCtC,UAAU6zC,gBAAgB7zC,QAAQ;QAClCgD,WAAa;MACf;MAGA,MAAMgC,UAAUinC,SAAUG,WAAU,CAACkK,WAAWrM,YAAYA,QAAW;MACvE,MAAMhlC,UAAUuxC,SAASxM,SAAY;MAGrC16C,GAAIsT,YAAW,GAAG9a,QAAQ2uD,kBAAkB;MAC5CnnD,GAAIoT,UAAS,GAAG5a,QAAQ2uD,kBAAkB;MAC1CnW,SAAUhxC,MAAKq9C,aAAa3nC,OAASC;MAGrC3V,GAAIsT,YAAW,GAAG8wC,WAAW7wC,WAAW;MACxCvT,GAAIoT,UAAS,GAAGgxC,WAAW/wC,eAAe;MAC1C29B,SAAUhxC,MAAKq9C,aAAa3nC,OAASC;KAChC;MAEL3V,GAAIyT,UAAS,GAAGhc,QAAS2sD,YAAW1wC,WAAW,CAAI9hB,QAAKoC,GAAG,CAAI2D,UAAOW,MAAM,CAAC8rD,WAAW1wC,WAAW,CAAM0wC,eAAW1wC,WAAW,IAAI,CAAE;MACrI1T,GAAIsT,YAAW,GAAG8wC,WAAW7wC,WAAW;MACxCvT,IAAI82B,WAAW,CAACstB,UAAW7vB,WAAU,IAAI,EAAE;MAC3Cv0B,IAAI+2B,cAAc,GAAGqtB,UAAW3vB,iBAAgB,IAAI;MAGpD,MAAM2yB,MAASzK,aAAUG,UAAU,CAACkK,SAAWrM;MAC/C,MAAM0M,SAAS1K,UAAUG,UAAU,CAACH,UAAUY,KAAK,CAACyJ,SAAW,MAAIrM,QAAW;MAC9E,MAAM5Q,eAAe0H,aAAc2S,YAAWra,YAAY;MAE1D,IAAIpyC,OAAOW,MAAM,CAACyxC,cAAczN,IAAI,CAACrvB,CAAKA,UAAM,CAAI;QAClDjN,IAAIg3B,SAAS;QACbh3B,GAAIoT,UAAS,GAAG5a,QAAQ2uD,kBAAkB;QAC1CrU,mBAAmB9yC,GAAK;UACtB/F,CAAGmtD;UACHltD,CAAGgtD;UACHnnC,CAAG46B;UACH16B,CAAGy6B;UACHvqC,MAAQ45B;QACV;QACA/pC,IAAIkB,IAAI;QACRlB,IAAIm3B,MAAM;QAGVn3B,GAAIoT,UAAS,GAAGgxC,WAAW/wC,eAAe;QAC1CrT,IAAIg3B,SAAS;QACb8b,mBAAmB9yC,GAAK;UACtB/F,CAAGotD;UACHntD,GAAGgtD,MAAS;UACZnnC,GAAG46B,QAAW;UACd16B,GAAGy6B,SAAY;UACfvqC,MAAQ45B;QACV;QACA/pC,IAAIkB,IAAI;OACH;QAELlB,GAAIoT,UAAS,GAAG5a,QAAQ2uD,kBAAkB;QAC1CnnD,IAAIu2B,QAAQ,CAAC6wB,MAAQF,UAAQvM,QAAUD;QACvC16C,IAAIsnD,UAAU,CAACF,MAAQF,UAAQvM,QAAUD;QAEzC16C,GAAIoT,UAAS,GAAGgxC,WAAW/wC,eAAe;QAC1CrT,IAAIu2B,QAAQ,CAAC8wB,QAAQH,SAAS,CAAGvM,aAAW,GAAGD,SAAY;;;IAK/D16C,IAAIoT,SAAS,GAAG,IAAI,CAACmyC,eAAe,CAAC7yD,CAAE;EACzC;EAEA60D,SAASX,EAAE,EAAE5mD,GAAG,EAAExH,OAAO,EAAE;IACzB,MAAM;MAAC0oD;IAAAA,CAAK,GAAG,IAAI;IACnB,MAAM;MAACiB;MAAaqF;MAAWtF;MAAexH;MAAWC;MAAUp7B;IAAAA,CAAW,GAAG/mB;IACjF,MAAM4oD,WAAWn2B,MAAOzyB,SAAQ4oD,QAAQ;IACxC,IAAIa,iBAAiBb,SAASj2B,UAAU;IACxC,IAAIs8B,YAAe;IAEnB,MAAM9K,YAAYC,aAAcpkD,SAAQkkD,GAAG,EAAE,IAAI,CAACziD,CAAC,EAAE,IAAI,CAACuU,KAAK;IAE/D,MAAMk5C,iBAAiB,UAASlxC,IAAI,EAAE;MACpCxW,IAAI29C,QAAQ,CAACnnC,IAAMmmC,YAAU1iD,CAAC,CAAC2sD,EAAG3sD,EAAC,GAAGwtD,eAAeb,EAAG1sD,EAAC,GAAG+nD,cAAiB;MAC7E2E,EAAG1sD,EAAC,IAAI+nD,cAAiBE;IAC3B;IAEA,MAAMwF,0BAA0BhL,SAAU1nB,UAAS,CAACuyB;IACpD,IAAI9F,QAAUkG,aAAW18B,KAAOx4B,KAAGyoB,GAAGlgB,IAAM+2B;IAE5ChyB,IAAIi1B,SAAS,GAAGuyB;IAChBxnD,IAAIo1B,YAAY,GAAG;IACnBp1B,GAAIgrB,KAAI,GAAGo2B,SAAS/uB,MAAM;IAE1Bu0B,GAAG3sD,CAAC,GAAGupD,WAAY,KAAI,EAAEmE,uBAAyBnvD;IAGlDwH,GAAIoT,UAAS,GAAG5a,QAAQ8rD,SAAS;IACjC1iC,IAAK,KAAI,CAACigC,UAAU,EAAE6F;IAEtBD,eAAevF,aAAiByF,gCAA4B,OACxDH,iBAAc,QAAY7M,cAAW,CAAIp7B,gBAAeo7B,QAAW,OAAIp7B,UAAW,GAClF,CAAC;IAGL,KAAK7sB,IAAI,GAAGuI,IAAOimD,QAAKzuD,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC7CgvD,QAAWR,OAAI,CAACxuD,CAAE;MAClBk1D,YAAY,IAAI,CAACrC,eAAe,CAAC7yD,CAAE;MAEnCsN,IAAIoT,SAAS,GAAGw0C;MAChBhmC,IAAK8/B,UAASC,MAAM,EAAE+F;MAEtBx8B,QAAQw2B,SAASx2B,KAAK;MAEtB,IAAIg3B,iBAAiBh3B,KAAMz4B,OAAM,EAAE;QACjC,IAAI,CAACq0D,aAAa,CAAC9mD,GAAK4mD,MAAIl0D,GAAGiqD,SAAWnkD;QAC1CypD,iBAAiBrwD,IAAKoC,IAAG,CAACotD,SAASj2B,UAAU,EAAEuvB;;MAGjD,KAAKv/B,IAAI,GAAG6W,IAAO9G,SAAMz4B,MAAM,EAAE0oB,IAAI6W,IAAM,IAAE7W,CAAG;QAC9CusC,cAAex8B,MAAK,CAAC/P,CAAE;QAEvB8mC,iBAAiBb,SAASj2B,UAAU;MACtC;MAEAvJ,IAAK8/B,UAASE,KAAK,EAAE8F;IACvB;IAGAD,YAAe;IACfxF,iBAAiBb,SAASj2B,UAAU;IAGpCvJ,IAAK,KAAI,CAACkgC,SAAS,EAAE4F;IACrBd,EAAG1sD,EAAC,IAAIioD;EACV;EAEA0F,WAAWjB,EAAE,EAAE5mD,GAAG,EAAExH,OAAO,EAAE;IAC3B,MAAM2oD,SAAS,IAAI,CAACA,MAAM;IAC1B,MAAM1uD,SAAS0uD,OAAO1uD,MAAM;IAC5B,IAAI4uD,UAAY3uD;IAEhB,IAAID,MAAQ;MACV,MAAMkqD,YAAYC,aAAcpkD,SAAQkkD,GAAG,EAAE,IAAI,CAACziD,CAAC,EAAE,IAAI,CAACuU,KAAK;MAE/Do4C,GAAG3sD,CAAC,GAAGupD,YAAY,IAAI,EAAEhrD,QAAQsvD,WAAW,EAAEtvD;MAC9CouD,EAAG1sD,EAAC,IAAI1B,QAAQ4pD,eAAe;MAE/BpiD,IAAIi1B,SAAS,GAAG0nB,UAAU1nB,SAAS,CAACz8B,QAAQsvD,WAAW;MACvD9nD,IAAIo1B,YAAY,GAAG;MAEnBisB,UAAap2B,UAAOzyB,QAAQ6oD,UAAU;MAEtCrhD,GAAIoT,UAAS,GAAG5a,QAAQuvD,WAAW;MACnC/nD,GAAIgrB,KAAI,GAAGq2B,WAAWhvB,MAAM;MAE5B,KAAK3/B,CAAI,MAAGA,CAAID,WAAQ,EAAEC,CAAG;QAC3BsN,IAAI29C,QAAQ,CAACwD,MAAM,CAACzuD,EAAE,EAAEiqD,SAAU1iD,EAAC,CAAC2sD,GAAG3sD,CAAC,CAAG2sD,KAAG1sD,CAAC,GAAGmnD,WAAWl2B,UAAU,GAAG;QAC1Ey7B,GAAG1sD,CAAC,IAAImnD,WAAWl2B,UAAU,GAAG3yB,QAAQ6pD,aAAa;MACvD;;EAEJ;EAEAhsB,eAAeuwB,EAAE,EAAE5mD,GAAG,EAAEgoD,WAAW,EAAExvD,OAAO,EAAE;IAC5C,MAAM;MAACkqD,MAAM;MAAEK;IAAM,CAAC,GAAG,IAAI;IAC7B,MAAM;MAAC9oD;MAAGC;IAAAA,CAAE,GAAG0sD;IACf,MAAM;MAACp4C;MAAOD;IAAAA,CAAO,GAAGy5C;IACxB,MAAM;MAACpW;MAASC;MAAUC;MAAYC;IAAAA,CAAY,GAAGN,aAAcj5C,SAAQ+qD,YAAY;IAEvFvjD,GAAIoT,UAAS,GAAG5a,QAAQ6a,eAAe;IACvCrT,GAAIsT,YAAW,GAAG9a,QAAQ+a,WAAW;IACrCvT,GAAIyT,UAAS,GAAGjb,QAAQkb,WAAW;IAEnC1T,IAAIg3B,SAAS;IACbh3B,GAAIi3B,OAAM,CAACh9B,IAAI23C,OAAS13C;IACxB,IAAI6oD,WAAW,KAAO;MACpB,IAAI,CAACqD,SAAS,CAACQ,IAAI5mD,KAAKgoD,WAAaxvD;;IAEvCwH,IAAIk3B,MAAM,CAACj9B,CAAIuU,WAAQqjC,QAAU33C;IACjC8F,IAAIioD,gBAAgB,CAAChuD,IAAIuU,OAAOtU,CAAGD,MAAIuU,OAAOtU,CAAI23C;IAClD,IAAIkR,WAAW,QAAYL,eAAW,OAAS;MAC7C,IAAI,CAAC0D,SAAS,CAACQ,IAAI5mD,KAAKgoD,WAAaxvD;;IAEvCwH,IAAIk3B,MAAM,CAACj9B,CAAIuU,UAAOtU,IAAIqU,MAASwjC;IACnC/xC,GAAIioD,iBAAgB,CAAChuD,CAAIuU,UAAOtU,IAAIqU,MAAQtU,MAAIuU,KAAQujC,gBAAa73C,CAAIqU;IACzE,IAAIw0C,WAAW,QAAU;MACvB,IAAI,CAACqD,SAAS,CAACQ,IAAI5mD,KAAKgoD,WAAaxvD;;IAEvCwH,IAAIk3B,MAAM,CAACj9B,CAAI63C,eAAY53C,CAAIqU;IAC/BvO,IAAIioD,gBAAgB,CAAChuD,GAAGC,IAAIqU,MAAQtU,KAAGC,IAAIqU,MAASujC;IACpD,IAAIiR,WAAW,QAAYL,eAAW,MAAQ;MAC5C,IAAI,CAAC0D,SAAS,CAACQ,IAAI5mD,KAAKgoD,WAAaxvD;;IAEvCwH,GAAIk3B,OAAM,CAACj9B,GAAGC,CAAI03C;IAClB5xC,IAAIioD,gBAAgB,CAAChuD,CAAGC,KAAGD,IAAI23C,OAAS13C;IACxC8F,IAAIypC,SAAS;IAEbzpC,IAAIkB,IAAI;IAER,IAAI1I,QAAQkb,WAAW,GAAG,CAAG;MAC3B1T,IAAIm3B,MAAM;;EAEd;EAMA+wB,uBAAuB1vD,OAAO,EAAE;IAC9B,MAAMxH,QAAQ,IAAI,CAACA,KAAK;IACxB,MAAMC,QAAQ,IAAI,CAAC6H,WAAW;IAC9B,MAAMqvD,QAAQl3D,KAASA,UAAMgJ,CAAC;IAC9B,MAAMmuD,QAAQn3D,KAASA,UAAMiJ,CAAC;IAC9B,IAAIiuD,SAASC,KAAO;MAClB,MAAMptC,WAAWglC,WAAW,CAACxnD,OAAQwiB,SAAQ,CAAC,CAAC/oB,IAAI,CAAC,IAAI,EAAE,IAAI,CAACY,OAAO,EAAE,IAAI,CAACiyD,cAAc;MAC3F,IAAI,CAAC9pC,QAAU;QACb;;MAEF,MAAM7hB,OAAO,IAAI,CAAC4rD,KAAK,GAAG/D,eAAe,IAAI,EAAExoD;MAC/C,MAAMytD,kBAAkBtuD,OAAOyB,MAAM,CAAC,EAAI4hB,YAAU,IAAI,CAAC+pC,KAAK;MAC9D,MAAMzB,YAAYL,kBAAmBjyD,QAAOwH,OAASytD;MACrD,MAAM51C,KAAQgzC,sBAAmB7qD,OAASytD,mBAAiB3C,SAAWtyD;MACtE,IAAIm3D,MAAM5xD,GAAG,KAAK8Z,KAAMpW,EAAC,IAAImuD,MAAM7xD,GAAG,KAAK8Z,KAAMnW,EAAC,EAAE;QAClD,IAAI,CAACwoD,MAAM,GAAGY,UAAUZ,MAAM;QAC9B,IAAI,CAACK,MAAM,GAAGO,UAAUP,MAAM;QAC9B,IAAI,CAACv0C,KAAK,GAAGrV,KAAKqV,KAAK;QACvB,IAAI,CAACD,MAAM,GAAGpV,KAAKoV,MAAM;QACzB,IAAI,CAAC42C,MAAM,GAAGnqC,SAAS/gB,CAAC;QACxB,IAAI,CAACmrD,MAAM,GAAGpqC,SAAS9gB,CAAC;QACxB,IAAI,CAAC+M,kBAAkB,GAAGvQ,MAAM,CAAC,IAAI,EAAE2Z;;;EAG7C;EAMAg4C,WAAc;IACZ,OAAO,CAAC,CAAC,IAAI,CAACxD,OAAO;EACvB;EAEAlyD,KAAKqN,GAAG,EAAE;IACR,MAAMxH,UAAU,IAAI,CAACA,OAAO,CAACw0B,UAAU,CAAC,IAAI,CAACrpB,UAAU;IACvD,IAAIkhD,UAAU,IAAI,CAACA,OAAO;IAE1B,IAAI,CAACA,OAAS;MACZ;;IAGF,IAAI,CAACqD,sBAAsB,CAAC1vD;IAE5B,MAAMwvD,WAAc;MAClBx5C,KAAO,MAAI,CAACA,KAAK;MACjBD,MAAQ,MAAI,CAACA;IACf;IACA,MAAMq4C,EAAK;MACT3sD,CAAG,MAAI,CAACA,CAAC;MACTC,CAAG,MAAI,CAACA;IACV;IAGA2qD,UAAUjzD,KAAKwY,GAAG,CAACy6C,OAAW,WAAO,IAAIA,OAAO;IAEhD,MAAM3jC,UAAUO,SAAUjpB,SAAQ0oB,OAAO;IAGzC,MAAMonC,iBAAoB,OAAI,CAAC73B,KAAK,CAACh+B,MAAM,IAAI,IAAI,CAACovD,UAAU,CAACpvD,MAAM,IAAI,IAAI,CAACyuD,IAAI,CAACzuD,MAAM,IAAI,IAAI,CAACqvD,SAAS,CAACrvD,MAAM,IAAI,IAAI,CAAC0uD,MAAM,CAAC1uD,MAAM;IAExI,IAAI+F,QAAQ4vB,OAAO,IAAIkgC,iBAAmB;MACxCtoD,IAAIs2B,IAAI;MACRt2B,IAAIuoD,WAAW,GAAG1D;MAGlB,IAAI,CAACxuB,cAAc,CAACuwB,IAAI5mD,KAAKgoD,WAAaxvD;MAE1CqlD,qBAAsB79C,MAAKxH,QAAQslD,aAAa;MAEhD8I,EAAG1sD,EAAC,IAAIgnB,QAAQ/mB,GAAG;MAGnB,IAAI,CAACy9B,SAAS,CAACgvB,IAAI5mD,GAAKxH;MAGxB,IAAI,CAAC+uD,QAAQ,CAACX,IAAI5mD,GAAKxH;MAGvB,IAAI,CAACqvD,UAAU,CAACjB,IAAI5mD,GAAKxH;MAEzB6lD,oBAAqBr+C,MAAKxH,QAAQslD,aAAa;MAE/C99C,IAAIw2B,OAAO;;EAEf;EAMA8R,iBAAoB;IAClB,OAAO,IAAI,CAACz1C,OAAO,IAAI,EAAE;EAC3B;EAOA01C,iBAAkBC,eAAc,EAAE4X,aAAa,EAAE;IAC/C,MAAM3X,aAAa,IAAI,CAAC51C,OAAO;IAC/B,MAAM4D,SAAS+xC,cAAev1B,IAAG,CAAC,SAA2B;MAAA,IAA1B;QAACzX,YAAY;QAAEN;MAAK,CAAC;MACtD,MAAMY,OAAO,IAAI,CAAC9K,KAAK,CAACwR,cAAc,CAAChH;MAEvC,IAAI,CAACM,IAAM;QACT,MAAM,IAAI0d,KAAM,qCAAoChe,YAAc;;MAGpE,OAAO;QACLA;QACAuD,OAASjD,OAAKD,IAAI,CAACX,KAAM;QACzBA;MACF;IACF;IACA,MAAM4lB,UAAU,CAAC4nB,eAAeD,UAAYhyC;IAC5C,MAAM+xD,eAAkB,OAAI,CAACC,gBAAgB,CAAChyD,MAAQ2pD;IAEtD,IAAIt/B,WAAW0nC,eAAiB;MAC9B,IAAI,CAAC31D,OAAO,GAAG4D;MACf,IAAI,CAACquD,cAAc,GAAG1E;MACtB,IAAI,CAACsI,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAAChyD,MAAM,CAAC,IAAI;;EAEpB;EASAkoD,YAAYhrC,CAAC,EAAEg1B,MAAM,EAAsB;IAAA,IAApB7G,kFAAc,IAAI;IACvC,IAAI6G,MAAU,QAAI,CAAC8f,mBAAmB,EAAE;MACtC,OAAO,KAAK;;IAEd,IAAI,CAACA,mBAAmB,GAAG,KAAK;IAEhC,MAAMlwD,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMiwC,UAAa,OAAI,CAAC51C,OAAO,IAAI,EAAE;IACrC,MAAM4D,SAAS,IAAI,CAAC0yC,kBAAkB,CAACv1B,GAAG60B,YAAYG,MAAQ7G;IAK9D,MAAMymB,eAAkB,OAAI,CAACC,gBAAgB,CAAChyD,MAAQmd;IAGtD,MAAMkN,OAAU8nB,aAAU,CAACF,eAAejyC,QAAQgyC,UAAe+f;IAGjE,IAAI1nC,OAAS;MACX,IAAI,CAACjuB,OAAO,GAAG4D;MAEf,IAAI+B,OAAQ4vB,QAAO,IAAI5vB,QAAQ2tD,QAAQ,EAAE;QACvC,IAAI,CAACrB,cAAc,GAAG;UACpB7qD,GAAG2Z,EAAE3Z,CAAC;UACNC,GAAG0Z,EAAE1Z;QACP;QAEA,IAAI,CAACxD,MAAM,CAAC,IAAI,EAAEkyC;;;IAItB,OAAO9nB;EACT;EAWAqoB,mBAAmBv1B,CAAC,EAAE60B,UAAU,EAAEG,MAAM,EAAE7G,WAAW,EAAE;IACrD,MAAMvpC,UAAU,IAAI,CAACA,OAAO;IAE5B,IAAIob,EAAEziB,IAAI,KAAK,UAAY;MACzB,OAAO,EAAE;;IAGX,IAAI,CAAC4wC,WAAa;MAGhB,OAAO0G,UAAWjqC,OAAM,CAAC9L,KACvB,IAAI,CAAC1B,KAAK,CAAC6K,IAAI,CAAC0G,QAAQ,CAAC7P,EAAE8I,YAAY,CAAC,IACxC,IAAI,CAACxK,KAAK,CAACwR,cAAc,CAAC9P,CAAE8I,aAAY,CAAEmC,WAAU,CAACiH,SAAS,CAAClS,EAAEwI,KAAK,CAAMpK;;IAKhF,MAAM2F,SAAS,IAAI,CAACzF,KAAK,CAACq2C,yBAAyB,CAACzzB,CAAGpb,UAAQ+C,IAAI,EAAE/C,OAASowC;IAE9E,IAAIpwC,QAAQoB,OAAO,EAAE;MACnBnD,OAAOmD,OAAO;;IAGhB,OAAOnD;EACT;EASAgyD,gBAAiBhyD,OAAM,EAAEmd,CAAC,EAAE;IAC1B,MAAM;MAACuxC;MAAQC;MAAQ5sD;IAAO,CAAC,GAAG,IAAI;IACtC,MAAMwiB,WAAWglC,WAAW,CAACxnD,OAAQwiB,SAAQ,CAAC,CAAC/oB,IAAI,CAAC,IAAI,EAAEwE,MAAQmd;IAClE,OAAOoH,aAAa,KAAK,KAAKmqC,WAAWnqC,QAAS/gB,EAAC,IAAImrD,WAAWpqC,QAAS9gB,EAAC,CAADA;EAC7E;AACF;AAEA,qBAAe;EACbyC,EAAI;EACJyiD,QAAUwF;EACV5E;EAEA2I,UAAU33D,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAC/B,IAAIA,OAAS;MACXxH,KAAMiwD,QAAO,GAAG,IAAI2D,OAAQ;QAAC5zD;QAAOwH;MAAO;;EAE/C;EAEAk1B,aAAa18B,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAClC,IAAIxH,MAAMiwD,OAAO,EAAE;MACjBjwD,KAAMiwD,QAAO,CAAClgD,UAAU,CAACvI;;EAE7B;EAEAmK,MAAM3R,KAAK,EAAE4iD,KAAK,EAAEp7C,OAAO,EAAE;IAC3B,IAAIxH,MAAMiwD,OAAO,EAAE;MACjBjwD,KAAMiwD,QAAO,CAAClgD,UAAU,CAACvI;;EAE7B;EAEAowD,UAAU53D,KAAK,EAAE;IACf,MAAMiwD,UAAUjwD,MAAMiwD,OAAO;IAE7B,IAAIA,WAAWA,OAAQoH,YAAW,EAAI;MACpC,MAAMt/C,IAAO;QACXk4C;MACF;MAEA,IAAIjwD,MAAMu+B,aAAa,CAAC,mBAAqB;QAAC,GAAGxmB,IAAI;QAAEgzB,YAAY;MAAI,OAAO,KAAK,EAAE;QACnF;;MAGFklB,OAAQtuD,KAAI,CAAC3B,MAAMgP,GAAG;MAEtBhP,KAAMu+B,cAAa,CAAC,kBAAoBxmB;;EAE5C;EAEAs2C,UAAWruD,MAAK,EAAE+X,IAAI,EAAE;IACtB,IAAI/X,MAAMiwD,OAAO,EAAE;MAEjB,MAAMnlC,mBAAmB/S,KAAK6/B,MAAM;MACpC,IAAI53C,MAAMiwD,OAAO,CAACrC,WAAW,CAAC71C,IAAKvV,MAAK,EAAEsoB,kBAAkB/S,IAAKg5B,YAAW,CAAG;QAE7Eh5B,IAAK+X,QAAO,GAAG,IAAI;;;EAGzB;EAEAjpB,QAAU;IACRuwB,SAAS,IAAI;IACb+9B,UAAU,IAAI;IACdnrC,QAAU;IACV3H,eAAiB;IACjBwzC,UAAY;IACZvI,SAAW;MACTloC,MAAQ;IACV;IACA2rC,YAAc;IACdC,iBAAmB;IACnB12B,UAAY;IACZg5B,SAAW;IACXnC,WAAa;IACbf,UAAU,EACV;IACAoG,SAAW;IACXO,WAAa;IACb1F,aAAe;IACfD,eAAiB;IACjBf,UAAY;MACVjrC,MAAQ;IACV;IACA0xC,WAAa;IACb5mC,OAAS;IACT2hC,YAAc;IACdD,SAAW;IACXW,YAAc;IACd7I,WAAW,CAAC16C,GAAKrG,WAASA,IAAKynD,SAAQ,CAACjoD,IAAI;IAC5CwhD,UAAU,CAAC36C,GAAKrG,WAASA,IAAKynD,SAAQ,CAACjoD,IAAI;IAC3CguD,kBAAoB;IACpBjF,eAAe,IAAI;IACnB3iC,UAAY;IACZhM,WAAa;IACbG,WAAa;IACb5b,SAAW;MACTvG,QAAU;MACVsE,MAAQ;IACV;IACA6C,UAAY;MACV4U,OAAS;QACPnc,IAAM;QACNiH,UAAY,GAAC,KAAK,KAAK,SAAS,UAAU,UAAU;MACtD;MACAysD,OAAS;QACPhvD,MAAQ;QACRtE,QAAU;MACZ;IACF;IACAH,SAAWyyD;EACb;EAEAt8B,aAAe;IACb65B,QAAU;IACVC,UAAY;IACZ/C,SAAW;EACb;EAEA9rC,WAAa;IACXC,aAAcxD,IAASA,aAAS,QAAYA,aAAS,cAAcA,IAAS;IAC5EyD,YAAY,KAAK;IACjBthB,SAAW;MACTqhB,aAAa,KAAK;MAClBC,YAAY;IACd;IACA5a,SAAW;MACT+wD,WAAW;IACb;IACAnwD,UAAY;MACVmwD,SAAW;IACb;EACF;EAGAppB,sBAAwB,GAAC;AAC3B,CAAE;;;;;;;;;;;AC7zCF,MAAMqpB,WAAc,IAACxkD,MAAQrF,OAAK/D,OAAO6tD,WAAgB;EACvD,IAAI,OAAO9pD,QAAQ,QAAU;IAC3B/D,KAAQoJ,UAAO5Q,IAAI,CAACuL,GAAO;IAC3B8pD,YAAYvQ,OAAO,CAAC;MAACt9C;MAAOwK,KAAOzG;IAAG;GACjC,UAAI4P,MAAM5P,GAAM;IACrB/D,QAAQ,IAAI;;EAEd,OAAOA;AACT;AAEA,SAAS8tD,eAAe1kD,MAAM,EAAErF,GAAG,EAAE/D,KAAK,EAAE6tD,WAAW,EAAE;EACvD,MAAMxgC,QAAQjkB,MAAOwK,QAAO,CAAC7P;EAC7B,IAAIspB,UAAU,CAAC,CAAG;IAChB,OAAOugC,YAAYxkD,MAAQrF,OAAK/D,KAAO6tD;;EAEzC,MAAMr6C,OAAOpK,MAAO2kD,YAAW,CAAChqD;EAChC,OAAOspB,UAAU7Z,IAAOxT,WAAQqtB,KAAK;AACvC;AAEA,MAAM8B,UAAa,IAACnvB,KAAOlH,UAAQkH,UAAU,IAAI,GAAG,IAAI,GAAGs1B,YAAY5+B,IAAKg3B,MAAK,CAAC1tB,QAAQ,GAAGlH,GAAI;AAEjG,SAASk1D,kBAAkBhwD,KAAK,EAAE;EAChC,MAAMoL,SAAS,IAAI,CAACC,SAAS;EAE7B,IAAIrL,KAAS,SAAKA,KAAQoL,UAAO7R,MAAM,EAAE;IACvC,OAAO6R,MAAM,CAACpL,KAAM;;EAEtB,OAAOA;AACT;AAEe,MAAMiwD,aAAsBt9B;EAEzC,OAAOlvB,KAAK,UAAW;EAKvB,OAAO9E,QAAW;IAChByS,KAAO;MACLolB,QAAUw5B;IACZ;GACA;EAEF14D,YAAY6E,GAAG,EAAE;IACf,KAAK,CAACA;IAGN,IAAI,CAAC+zD,WAAW,GAAGt4D;IACnB,IAAI,CAACu4D,WAAW,GAAG;IACnB,IAAI,CAACC,YAAY,GAAG,EAAE;EACxB;EAEAzvC,KAAK0jB,YAAY,EAAE;IACjB,MAAMgsB,QAAQ,IAAI,CAACD,YAAY;IAC/B,IAAIC,MAAM92D,MAAM,EAAE;MAChB,MAAM6R,SAAS,IAAI,CAACC,SAAS;MAC7B,KAAK,MAAM;QAACrJ;QAAOwK;MAAK,CAAC,IAAI6jD,KAAO;QAClC,IAAIjlD,MAAM,CAACpJ,KAAM,MAAKwK,KAAO;UAC3BpB,MAAOuE,OAAM,CAAC3N,KAAO;;MAEzB;MACA,IAAI,CAACouD,YAAY,GAAG,EAAE;;IAExB,KAAK,CAACzvC,IAAI,CAAC0jB;EACb;EAEA15B,KAAM5E,IAAG,EAAE/D,KAAK,EAAE;IAChB,IAAI4P,cAAc7L,GAAM;MACtB,OAAO,IAAI;;IAEb,MAAMqF,SAAS,IAAI,CAACC,SAAS;IAC7BrJ,QAAQQ,SAASR,KAAUoJ,WAAM,CAACpJ,MAAM,KAAK+D,GAAM/D,WAC/C8tD,cAAe1kD,SAAQrF,KAAK0C,cAAezG,QAAO+D,MAAM,IAAI,CAACqqD,YAAY,CAAC;IAC9E,OAAOj/B,UAAWnvB,QAAOoJ,MAAO7R,OAAM,GAAG;EAC3C;EAEAy7B,mBAAsB;IACpB,MAAM;MAACrxB;MAAYC;IAAAA,CAAW,GAAG,IAAI,CAACF,aAAa;IACnD,IAAI;MAAC/K,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI,CAACkR,SAAS,CAAC,IAAI;IAEpC,IAAI,IAAI,CAAC1M,OAAO,CAACy5C,MAAM,KAAK,OAAS;MACnC,IAAI,CAACp1C,UAAY;QACfhL,GAAM;;MAER,IAAI,CAACiL,UAAY;QACf9I,MAAM,IAAI,CAACuQ,SAAS,GAAG9R,MAAM,GAAG;;;IAIpC,IAAI,CAACZ,GAAG,GAAGA;IACX,IAAI,CAACmC,GAAG,GAAGA;EACb;EAEAs6B,UAAa;IACX,MAAMz8B,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMmC,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMyZ,MAAS,OAAI,CAACjV,OAAO,CAACiV,MAAM;IAClC,MAAMnD,QAAQ,EAAE;IAChB,IAAIhG,SAAS,IAAI,CAACC,SAAS;IAG3BD,SAASzS,GAACA,KAAQ,CAAKmC,YAAQsQ,OAAO7R,MAAM,GAAG,CAAK6R,YAASA,MAAO4gC,MAAK,CAACrzC,KAAKmC,MAAM,CAAE;IAEvF,IAAI,CAACq1D,WAAW,GAAGz3D,KAAKoC,GAAG,CAACsQ,OAAO7R,MAAM,IAAIgb,SAAS,CAAI,IAAC,CAAG;IAC9D,IAAI,CAAC27C,WAAW,GAAG,IAAI,CAACv3D,GAAG,IAAI4b,SAAS,GAAM,IAAC,CAAD;IAE9C,KAAK,IAAIvU,QAAQrH,GAAKqH,WAASlF,KAAKkF,KAAS;MAC3CoR,MAAM5W,IAAI,CAAC;QAACwF;MAAK;IACnB;IACA,OAAOoR;EACT;EAEA3E,iBAAiBzM,KAAK,EAAE;IACtB,OAAOgwD,iBAAkBj3D,KAAI,CAAC,IAAI,EAAEiH;EACtC;EAKA1B,SAAY;IACV,KAAK,CAACA,SAAS;IAEf,IAAI,CAAC,IAAI,CAAC2U,YAAY,EAAI;MAExB,IAAI,CAACqO,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc;;EAE9C;EAGAnQ,iBAAiBnR,KAAK,EAAE;IACtB,IAAI,OAAOA,UAAU,QAAU;MAC7BA,KAAQ,OAAI,CAAC2K,KAAK,CAAC3K;;IAGrB,OAAOA,UAAU,IAAI,GAAG+L,MAAM,IAAI,CAACwK,kBAAkB,CAAEvW,MAAQ,OAAI,CAACkwD,WAAU,IAAK,IAAI,CAACC,WAAW,CAAC;EACtG;EAIA9+C,gBAAgBrP,KAAK,EAAE;IACrB,MAAMoP,QAAQ,IAAI,CAACA,KAAK;IACxB,IAAIpP,QAAQ,CAAKA,YAAQoP,KAAM7X,OAAM,GAAG,CAAG;MACzC,OAAO,IAAI;;IAEb,OAAO,IAAI,CAAC4X,gBAAgB,CAACC,KAAK,CAACpP,MAAM,CAAChC,KAAK;EACjD;EAEAyW,iBAAiB8iB,KAAK,EAAE;IACtB,OAAO7gC,IAAKg3B,MAAK,CAAC,IAAI,CAACwgC,WAAW,GAAG,IAAI,CAACv2B,kBAAkB,CAACJ,KAAS,QAAI,CAAC42B,WAAW;EACxF;EAEAt7C,YAAe;IACb,OAAO,IAAI,CAAC1T,MAAM;EACpB;AACF;ACrIA,SAASmvD,gBAAcC,iBAAiB,EAAEC,SAAS,EAAE;EACnD,MAAMp/C,QAAQ,EAAE;EAKhB,MAAMq/C,WAAc;EACpB,MAAM;IAAC1X,MAAM;IAAE9d;IAAMtiC;IAAKmC,GAAG;IAAE41D;IAAW9lD;IAAO+lD,QAAQ;IAAEC;IAAWC;EAAAA,CAAc,GAAGN;EACvF,MAAMO,OAAO71B,IAAQ;EACrB,MAAM81B,YAAYJ,QAAW;EAC7B,MAAM;IAACh4D,GAAKq4D;IAAMl2D,GAAKm2D;EAAAA,CAAK,GAAGT;EAC/B,MAAM7sD,aAAa,CAACiO,aAAcjZ;EAClC,MAAMiL,aAAa,CAACgO,aAAc9W;EAClC,MAAMo2D,eAAe,CAACt/C,aAAchH;EACpC,MAAMumD,aAAa,CAACF,OAAOD,IAAG,KAAMJ,YAAY;EAChD,IAAIv3C,UAAU+3C,QAAQ,CAACH,OAAOD,IAAG,IAAKD,YAAYD,IAAQA;EAC1D,IAAIr1D,QAAQ41D,SAASC,OAASC;EAI9B,IAAIl4C,OAAUo3C,kBAAe,CAAC9sD,cAAc,CAACC,UAAY;IACvD,OAAO,CAAC;MAAC5D,KAAOgxD;IAAI,GAAG;MAAChxD,KAAOixD;IAAI,EAAE;;EAGvCM,SAAY74D,QAAK23B,IAAI,CAAC4gC,OAAO53C,WAAW3gB,IAAKoE,MAAK,CAACk0D,IAAO33C;EAC1D,IAAIk4C,YAAYR,SAAW;IAEzB13C,UAAU+3C,OAAQG,aAAYl4C,OAAU03C,eAAYD,IAAQA;;EAG9D,IAAI,CAACl/C,cAAc8+C,SAAY;IAE7Bj1D,MAAS/C,QAAKgqB,GAAG,CAAC,EAAIguC;IACtBr3C,UAAU3gB,IAAK23B,KAAI,CAAChX,UAAU5d,MAAUA;;EAG1C,IAAIs9C,WAAW,OAAS;IACtBsY,UAAU34D,IAAKoE,MAAK,CAACk0D,OAAO33C,OAAWA;IACvCi4C,UAAU54D,IAAK23B,KAAI,CAAC4gC,OAAO53C,OAAWA;GACjC;IACLg4C,OAAUL;IACVM,OAAUL;;EAGZ,IAAIttD,cAAcC,UAAcq3B,YAAQu2B,WAAY,CAAC12D,OAAMnC,GAAE,IAAKsiC,IAAM5hB,YAAU,IAAO;IAKvFk4C,SAAY74D,QAAKg3B,KAAK,CAACh3B,IAAKC,IAAG,CAAEmC,OAAMnC,GAAE,IAAK0gB,OAASs3C;IACvDt3C,UAAU,CAACve,GAAMnC,MAAE,IAAK44D;IACxBF,OAAU14D;IACV24D,OAAUx2D;EACZ,OAAO,IAAIo2D,YAAc;IAIvBG,OAAU1tD,gBAAahL,MAAM04D,OAAO;IACpCC,OAAU1tD,gBAAa9I,MAAMw2D,OAAO;IACpCC,YAAY3mD,KAAQ;IACpByO,UAAU,CAACi4C,OAAUD,UAAM,IAAKE;GAC3B;IAELA,YAAY,CAACD,OAAUD,UAAM,IAAKh4C;IAGlC,IAAIo4C,aAAaF,SAAW74D,OAAKg3B,KAAK,CAAC6hC,YAAYl4C,UAAU,IAAO;MAClEk4C,SAAY74D,QAAKg3B,KAAK,CAAC6hC;KAClB;MACLA,SAAY74D,QAAK23B,IAAI,CAACkhC;;;EAM1B,MAAMG,gBAAgBh5D,IAAKoC,IAAG,CAC5B62D,eAAet4C,UACfs4C,cAAeN;EAEjB51D,SAAS/C,KAAKgqB,GAAG,CAAC,IAAI9Q,aAAc8+C,cAAagB,gBAAgBhB,SAAS;EAC1EW,UAAU34D,IAAKg3B,MAAK,CAAC2hC,UAAU51D,MAAUA;EACzC61D,UAAU54D,IAAKg3B,MAAK,CAAC4hC,UAAU71D,MAAUA;EAEzC,IAAIwmB,CAAI;EACR,IAAIte,UAAY;IACd,IAAIktD,iBAAiBQ,YAAY14D,GAAK;MACpCyY,MAAM5W,IAAI,CAAC;QAACwF,KAAOrH;MAAG;MAEtB,IAAI04D,UAAU14D,GAAK;QACjBspB;;MAGF,IAAIwvC,aAAa/4D,IAAKg3B,MAAK,CAAE2hC,QAAUpvC,OAAI5I,OAAM,IAAK5d,UAAUA,MAAQ9C,OAAKi5D,iBAAkBj5D,MAAKw4D,YAAYZ,iBAAqB;QACnItuC;;KAEG,UAAIovC,UAAU14D,GAAK;MACxBspB;;;EAIJ,OAAOA,IAAIsvC,SAAW,IAAEtvC,CAAG;IACzB,MAAM4vC,YAAYn5D,IAAKg3B,MAAK,CAAE2hC,QAAUpvC,OAAI5I,OAAM,IAAK5d,MAAUA;IACjE,IAAImI,cAAciuD,YAAY/2D,GAAK;MACjC;;IAEFsW,MAAM5W,IAAI,CAAC;MAACwF,KAAO6xD;IAAS;EAC9B;EAEA,IAAIjuD,cAAcitD,aAAiBS,gBAAYx2D,GAAK;IAElD,IAAIsW,MAAM7X,MAAM,IAAIk4D,YAAargD,MAAK,CAACA,KAAM7X,OAAM,GAAG,EAAE,CAACyG,KAAK,EAAElF,KAAK82D,iBAAkB92D,MAAKq2D,YAAYZ,iBAAqB;MAC3Hn/C,KAAK,CAACA,KAAM7X,OAAM,GAAG,CAAE,EAACyG,KAAK,GAAGlF;KAC3B;MACLsW,MAAM5W,IAAI,CAAC;QAACwF,KAAOlF;MAAG;;EAE1B,OAAO,IAAI,CAAC8I,UAAc0tD,gBAAYx2D,GAAK;IACzCsW,MAAM5W,IAAI,CAAC;MAACwF,KAAOsxD;IAAO;;EAG5B,OAAOlgD;AACT;AAEA,SAASwgD,kBAAkB5xD,KAAK,EAAEmxD,UAAU,SAA6B;EAAA,IAA3B;IAACh+C,UAAU;IAAEwjB;EAAW,CAAC;EACrE,MAAMm7B,MAAM72C,SAAU0b;EACtB,MAAMhlB,KAAQ,GAACwB,cAAaza,IAAK2f,IAAG,CAACy5C,OAAOp5D,IAAKyf,IAAG,CAAC25C,IAAI,KAAK;EAC9D,MAAMv4D,SAAS,OAAO43D,UAAa,GAAC,GAAKnxD,QAAI,EAAGzG,MAAM;EACtD,OAAOb,IAAKC,IAAG,CAACw4D,aAAax/C,KAAOpY;AACtC;AAEe,MAAMw4D,eAAwBp/B;EAE3Cr7B,YAAY6E,GAAG,EAAE;IACf,KAAK,CAACA;IAGN,IAAI,CAACvD,KAAK,GAAGhB;IAEb,IAAI,CAAC+I,GAAG,GAAG/I;IAEX,IAAI,CAACs4D,WAAW,GAAGt4D;IAEnB,IAAI,CAACo6D,SAAS,GAAGp6D;IACjB,IAAI,CAACu4D,WAAW,GAAG;EACrB;EAEAxlD,KAAM5E,IAAG,EAAE/D,KAAK,EAAE;IAChB,IAAI4P,cAAc7L,GAAM;MACtB,OAAO,IAAI;;IAEb,IAAK,QAAOA,GAAQ,iBAAYA,GAAelC,kBAAK,KAAM,CAACrB,QAAS,EAACuD,GAAM;MACzE,OAAO,IAAI;;IAGb,OAAO,CAACA;EACV;EAEAksD,sBAAyB;IACvB,MAAM;MAACv9C;IAAW,CAAC,GAAG,IAAI,CAACpV,OAAO;IAClC,MAAM;MAACqE;MAAYC;IAAAA,CAAW,GAAG,IAAI,CAACF,aAAa;IACnD,IAAI;MAAC/K,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI;IAErB,MAAMo3D,SAASn+C,KAAMpb,GAAMgL,gBAAahL,MAAMob,CAAC;IAC/C,MAAMo+C,SAASp+C,KAAMjZ,GAAM8I,gBAAa9I,MAAMiZ,CAAC;IAE/C,IAAIW,WAAa;MACf,MAAM09C,UAAU3vD,IAAK9J;MACrB,MAAM05D,UAAU5vD,IAAK3H;MAErB,IAAIs3D,UAAU,CAAKC,cAAU,CAAG;QAC9BF,MAAO;MACT,OAAO,IAAIC,UAAU,CAAKC,cAAU,CAAG;QACrCH,MAAO;;;IAIX,IAAIv5D,QAAQmC,GAAK;MACf,IAAIyZ,SAASzZ,QAAQ,CAAI,OAAIpC,KAAKwY,GAAG,CAACpW,MAAM,IAAK;MAEjDq3D,OAAOr3D,GAAMyZ;MAEb,IAAI,CAACG,WAAa;QAChBw9C,OAAOv5D,GAAM4b;;;IAGjB,IAAI,CAAC5b,GAAG,GAAGA;IACX,IAAI,CAACmC,GAAG,GAAGA;EACb;EAEAw3D,YAAe;IACb,MAAM3jC,QAAW,OAAI,CAACrvB,OAAO,CAAC8R,KAAK;IAEnC,IAAI;MAAC2d;MAAewjC;IAAAA,CAAS,GAAG5jC;IAChC,IAAIgiC;IAEJ,IAAI4B,QAAU;MACZ5B,WAAWj4D,IAAK23B,KAAI,CAAC,IAAI,CAACv1B,GAAG,GAAGy3D,QAAY75D,SAAKoE,KAAK,CAAC,IAAI,CAACnE,GAAG,GAAG45D,QAAY;MAC9E,IAAI5B,WAAW,IAAM;QACnBzoD,QAAQC,IAAI,CAAE,UAAS,IAAI,CAAC1E,EAAG,oBAAmB8uD,QAAS,kCAAiC5B,QAAS,2BAA0B;QAC/HA,QAAW;;KAER;MACLA,QAAW,OAAI,CAAC6B,gBAAgB;MAChCzjC,gBAAgBA,aAAiB;;IAGnC,IAAIA,aAAe;MACjB4hC,QAAWj4D,QAAKC,GAAG,CAACo2B,aAAe4hC;;IAGrC,OAAOA;EACT;EAKA6B,gBAAmB;IACjB,OAAO3uD,OAAOE,iBAAiB;EACjC;EAEAqxB,UAAa;IACX,MAAM30B,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAMqvB,WAAWluB,KAAK2Q,KAAK;IAM3B,IAAIu/C,WAAW,IAAI,CAAC2B,YAAY;IAChC3B,QAAWj4D,QAAKoC,GAAG,CAAC,CAAG61D;IAEvB,MAAM8B,uBAA0B;MAC9B9B;MACA5X,QAAQt4C,KAAKs4C,MAAM;MACnBpgD,KAAK8H,KAAK9H,GAAG;MACbmC,KAAK2F,KAAK3F,GAAG;MACb41D,WAAW/hC,SAAS+hC,SAAS;MAC7Bz1B,MAAMtM,SAAS4jC,QAAQ;MACvB3nD,OAAO+jB,SAAS/jB,KAAK;MACrBgmD,SAAW,MAAI,CAAC7xB,UAAU;MAC1B5rB,UAAY,MAAI,CAACF,YAAY;MAC7B0jB,WAAahI,WAASgI,WAAW,IAAI;MACrCk6B,aAAeliC,WAASkiC,aAAa,KAAK;IAC5C;IACA,MAAML,SAAY,OAAI,CAACt9B,MAAM,IAAI,IAAI;IACrC,MAAM9hB,QAAQk/C,gBAAcmC,uBAAyBjC;IAIrD,IAAI/vD,KAAKs4C,MAAM,KAAK,OAAS;MAC3B2Z,kBAAmBthD,QAAO,IAAI,EAAE;;IAGlC,IAAI3Q,KAAKC,OAAO,EAAE;MAChB0Q,MAAM1Q,OAAO;MAEb,IAAI,CAAC9H,KAAK,GAAG,IAAI,CAACkC,GAAG;MACrB,IAAI,CAAC6F,GAAG,GAAG,IAAI,CAAChI,GAAG;KACd;MACL,IAAI,CAACC,KAAK,GAAG,IAAI,CAACD,GAAG;MACrB,IAAI,CAACgI,GAAG,GAAG,IAAI,CAAC7F,GAAG;;IAGrB,OAAOsW;EACT;EAKA9S,SAAY;IACV,MAAM8S,QAAQ,IAAI,CAACA,KAAK;IACxB,IAAIxY,QAAQ,IAAI,CAACD,GAAG;IACpB,IAAIgI,MAAM,IAAI,CAAC7F,GAAG;IAElB,KAAK,CAACwD,SAAS;IAEf,IAAI,IAAI,CAACgB,OAAO,CAACiV,MAAM,IAAInD,MAAM7X,MAAM,EAAE;MACvC,MAAMgb,MAAS,GAAC5T,OAAM/H,KAAI,IAAKF,IAAKoC,IAAG,CAACsW,MAAM7X,MAAM,GAAG,GAAG,CAAK;MAC/DX,KAAS2b;MACT5T,GAAO4T;;IAET,IAAI,CAAC27C,WAAW,GAAGt3D;IACnB,IAAI,CAACo5D,SAAS,GAAGrxD;IACjB,IAAI,CAACwvD,WAAW,GAAGxvD,GAAM/H;EAC3B;EAEA6T,iBAAiBzM,KAAK,EAAE;IACtB,OAAO4c,aAAa5c,KAAO,MAAI,CAAClI,KAAK,CAACwH,OAAO,CAACud,MAAM,EAAE,IAAI,CAACvd,OAAO,CAAC8R,KAAK,CAACyP,MAAM;EACjF;AACF;ACnTe,MAAM8xC,WAAoBZ;EAEvC,OAAOtuD,KAAK,QAAS;EAKrB,OAAO9E,QAAW;IAChByS,KAAO;MACLolB,QAAUo8B,QAAMC,UAAU,CAACC;IAC7B;GACA;EAGF99B,mBAAsB;IACpB,MAAM;MAACr8B,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI,CAACkR,SAAS,CAAC,IAAI;IAEtC,IAAI,CAACrT,GAAG,GAAG6J,cAAS7J,QAAOA,MAAM,CAAC;IAClC,IAAI,CAACmC,GAAG,GAAG0H,cAAS1H,QAAOA,MAAM,CAAC;IAGlC,IAAI,CAACm3D,sBAAsB;EAC7B;EAMAO,gBAAmB;IACjB,MAAMr/C,aAAa,IAAI,CAACF,YAAY;IACpC,MAAM1Z,SAAS4Z,aAAa,IAAI,CAACmC,KAAK,GAAG,IAAI,CAACD,MAAM;IACpD,MAAMshB,cAAc1b,UAAU,IAAI,CAAC3b,OAAO,CAAC8R,KAAK,CAACulB,WAAW;IAC5D,MAAMhlB,KAAQ,GAACwB,cAAaza,IAAK2f,IAAG,CAACse,eAAej+B,IAAKyf,IAAG,CAACwe,YAAY,KAAK;IAC9E,MAAMoC,QAAW,OAAI,CAACG,uBAAuB,CAAC;IAC9C,OAAOxgC,KAAK23B,IAAI,CAAC92B,MAASb,QAAKC,GAAG,CAAC,IAAIogC,QAAS9G,WAAU,GAAGtgB;EAC/D;EAGAR,iBAAiBnR,KAAK,EAAE;IACtB,OAAOA,UAAU,IAAI,GAAG+L,MAAM,IAAI,CAACwK,kBAAkB,CAAEvW,MAAQ,OAAI,CAACkwD,WAAU,IAAK,IAAI,CAACC,WAAW,CAAC;EACtG;EAEA15C,iBAAiB8iB,KAAK,EAAE;IACtB,OAAO,IAAI,CAAC22B,WAAW,GAAG,IAAI,CAACv2B,kBAAkB,CAACJ,SAAS,IAAI,CAAC42B,WAAW;EAC7E;AACF;AC3CA,MAAM4C,aAAah/C,KAAKrb,IAAKoE,MAAK,CAACk2D,KAAMj/C;AACzC,MAAMk/C,iBAAiB,CAACl/C,CAAGm/C,QAAMx6D,KAAKgqB,GAAG,CAAC,EAAIqwC,aAAWh/C,CAAKm/C;AAE9D,SAASC,QAAQC,OAAO,EAAE;EACxB,MAAM11D,SAAS01D,OAAW16D,QAAKgqB,GAAG,CAAC,IAAIqwC,UAAWK;EAClD,OAAO11D,MAAW;AACpB;AAEA,SAAS21D,MAAM16D,GAAG,EAAEmC,GAAG,EAAEw4D,QAAQ,EAAE;EACjC,MAAMC,SAAY76D,QAAKgqB,GAAG,CAAC,EAAI4wC;EAC/B,MAAM16D,KAAQF,QAAKoE,KAAK,CAACnE,GAAM46D;EAC/B,MAAM5yD,GAAMjI,QAAK23B,IAAI,CAACv1B,GAAMy4D;EAC5B,OAAO5yD,GAAM/H;AACf;AAEA,SAAS46D,QAAS76D,IAAG,EAAEmC,GAAG,EAAE;EAC1B,MAAM+Q,QAAQ/Q,GAAMnC;EACpB,IAAI26D,WAAWP,UAAWlnD;EAC1B,OAAOwnD,KAAM16D,MAAKmC,GAAKw4D,cAAY,EAAI;IACrCA;EACF;EACA,OAAOD,KAAM16D,MAAKmC,GAAKw4D,cAAY,EAAI;IACrCA;EACF;EACA,OAAO56D,IAAKC,IAAG,CAAC26D,UAAUP,UAAWp6D;AACvC;AASA,SAAS23D,cAAcC,iBAAiB,SAAc;EAAA,IAAZ;IAAC53D,GAAG;IAAEmC;EAAG,CAAC;EAClDnC,GAAMs7B,mBAAgBs8B,iBAAkB53D,IAAG,EAAEA;EAC7C,MAAMyY,QAAQ,EAAE;EAChB,MAAMqiD,SAASV,UAAWp6D;EAC1B,IAAI+6D,MAAMF,SAAS76D,GAAKmC;EACxB,IAAI41D,YAAYgD,GAAM,OAAIh7D,IAAKgqB,IAAG,CAAC,IAAIhqB,IAAKwY,IAAG,CAACwiD,QAAQ,CAAC;EACzD,MAAMnB,QAAW75D,QAAKgqB,GAAG,CAAC,EAAIgxC;EAC9B,MAAMtgD,OAAOqgD,SAASC,GAAMh7D,QAAKgqB,GAAG,CAAC,IAAI+wC,UAAU,CAAC;EACpD,MAAM76D,QAAQF,KAAKg3B,KAAK,CAAC,CAAC/2B,MAAMya,IAAG,IAAKs9C,SAAaA;EACrD,MAAMn8C,SAAS7b,IAAKoE,MAAK,CAAEnE,OAAMya,IAAG,IAAKm/C,QAAW,SAAMA,QAAW;EACrE,IAAIoB,WAAcj7D,QAAKoE,KAAK,CAAC,CAAClE,KAAQ2b,SAAK,IAAK7b,KAAKgqB,GAAG,CAAC,EAAIgxC;EAC7D,IAAI1zD,QAAQi0B,eAAgBs8B,mBAAkB53D,GAAG,EAAED,KAAKg3B,KAAK,CAAEtc,KAAOmB,YAASo/C,cAAcj7D,IAAKgqB,IAAG,CAAC,EAAIgxC,MAAG,IAAKhD,SAAaA;EAC/H,OAAO1wD,QAAQlF,GAAK;IAClBsW,MAAM5W,IAAI,CAAC;MAACwF;MAAOivB,OAAOkkC,OAAQnzD;MAAQ2zD;IAAW;IACrD,IAAIA,eAAe,EAAI;MACrBA,WAAcA,iBAAc,EAAK,QAAK,EAAE;KACnC;MACLA;;IAEF,IAAIA,eAAe,EAAI;MACrBD;MACAC,WAAc;MACdjD,SAAYgD,UAAO,CAAI,OAAIhD,SAAS;;IAEtC1wD,QAAQtH,IAAKg3B,MAAK,CAAEtc,KAAOmB,YAASo/C,WAAcj7D,QAAKgqB,GAAG,CAAC,EAAIgxC,MAAG,IAAKhD,SAAaA;EACtF;EACA,MAAMkD,QAAW3/B,mBAAgBs8B,iBAAkBz1D,IAAG,EAAEkF;EACxDoR,MAAM5W,IAAI,CAAC;IAACwF,KAAO4zD;IAAU3kC,OAAOkkC,OAAQS;IAAWD;EAAW;EAElE,OAAOviD;AACT;AAEe,MAAMyiD,gBAAyBlhC;EAE5C,OAAOlvB,KAAK,aAAc;EAK1B,OAAO9E,QAAW;IAChByS,KAAO;MACLolB,QAAUo8B,QAAMC,UAAU,CAACiB,WAAW;MACtC7kC,KAAO;QACLC,SAAS;MACX;IACF;GACA;EAGF53B,YAAY6E,GAAG,EAAE;IACf,KAAK,CAACA;IAGN,IAAI,CAACvD,KAAK,GAAGhB;IAEb,IAAI,CAAC+I,GAAG,GAAG/I;IAEX,IAAI,CAACs4D,WAAW,GAAGt4D;IACnB,IAAI,CAACu4D,WAAW,GAAG;EACrB;EAEAxlD,KAAM5E,IAAG,EAAE/D,KAAK,EAAE;IAChB,MAAMhC,QAAQ+xD,gBAAgBrxC,SAAS,CAAC/V,KAAK,CAAC68C,KAAK,CAAC,IAAI,EAAE,CAACzhD,KAAK/D,MAAM;IACtE,IAAIhC,UAAU,CAAG;MACf,IAAI,CAAC+zD,KAAK,GAAG,IAAI;MACjB,OAAOn8D;;IAET,OAAO4K,cAASxC,WAAUA,KAAQ,OAAIA,QAAQ,IAAI;EACpD;EAEAg1B,mBAAsB;IACpB,MAAM;MAACr8B,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI,CAACkR,SAAS,CAAC,IAAI;IAEtC,IAAI,CAACrT,GAAG,GAAG6J,cAAS7J,QAAOD,KAAKoC,GAAG,CAAC,CAAGnC,SAAO,IAAI;IAClD,IAAI,CAACmC,GAAG,GAAG0H,cAAS1H,QAAOpC,KAAKoC,GAAG,CAAC,CAAGA,SAAO,IAAI;IAElD,IAAI,IAAI,CAACwE,OAAO,CAACoV,WAAW,EAAE;MAC5B,IAAI,CAACq/C,KAAK,GAAG,IAAI;;IAKnB,IAAI,IAAI,CAACA,KAAK,IAAI,IAAI,CAACp7D,GAAG,KAAK,IAAI,CAAC+6B,aAAa,IAAI,CAAClxB,eAAS,IAAI,CAACgxB,QAAQ,CAAG;MAC7E,IAAI,CAAC76B,GAAG,GAAGA,QAAQs6D,eAAe,IAAI,CAACt6D,GAAG,EAAE,CAAKs6D,mBAAe,IAAI,CAACt6D,GAAG,EAAE,CAAC,KAAKs6D,eAAe,IAAI,CAACt6D,GAAG,EAAE,CAAE;;IAG7G,IAAI,CAACs5D,sBAAsB;EAC7B;EAEAA,sBAAyB;IACvB,MAAM;MAACtuD;MAAYC;IAAAA,CAAW,GAAG,IAAI,CAACF,aAAa;IACnD,IAAI/K,MAAM,IAAI,CAACA,GAAG;IAClB,IAAImC,MAAM,IAAI,CAACA,GAAG;IAElB,MAAMo3D,SAASn+C,KAAMpb,GAAMgL,gBAAahL,MAAMob,CAAC;IAC/C,MAAMo+C,SAASp+C,KAAMjZ,GAAM8I,gBAAa9I,MAAMiZ,CAAC;IAE/C,IAAIpb,QAAQmC,GAAK;MACf,IAAInC,OAAO,CAAG;QACZu5D,MAAO;QACPC,MAAO;OACF;QACLD,MAAOe,gBAAet6D,KAAK,CAAC;QAC5Bw5D,MAAOc,gBAAen4D,KAAK,CAAC;;;IAGhC,IAAInC,OAAO,CAAG;MACZu5D,MAAOe,gBAAen4D,KAAK,CAAC;;IAE9B,IAAIA,OAAO,CAAG;MAEZq3D,MAAOc,gBAAet6D,KAAK,CAAC;;IAG9B,IAAI,CAACA,GAAG,GAAGA;IACX,IAAI,CAACmC,GAAG,GAAGA;EACb;EAEAs6B,UAAa;IACX,MAAM30B,OAAO,IAAI,CAACnB,OAAO;IAEzB,MAAMixD,iBAAoB;MACxB53D,GAAK,MAAI,CAAC66B,QAAQ;MAClB14B,GAAK,MAAI,CAACy4B;IACZ;IACA,MAAMniB,QAAQk/C,aAAcC,oBAAmB,IAAI;IAInD,IAAI9vD,KAAKs4C,MAAM,KAAK,OAAS;MAC3B2Z,kBAAmBthD,QAAO,IAAI,EAAE;;IAGlC,IAAI3Q,KAAKC,OAAO,EAAE;MAChB0Q,MAAM1Q,OAAO;MAEb,IAAI,CAAC9H,KAAK,GAAG,IAAI,CAACkC,GAAG;MACrB,IAAI,CAAC6F,GAAG,GAAG,IAAI,CAAChI,GAAG;KACd;MACL,IAAI,CAACC,KAAK,GAAG,IAAI,CAACD,GAAG;MACrB,IAAI,CAACgI,GAAG,GAAG,IAAI,CAAC7F,GAAG;;IAGrB,OAAOsW;EACT;EAMA3E,iBAAiBzM,KAAK,EAAE;IACtB,OAAOA,UAAUpI,YACb,GACAglB,gBAAa5c,OAAO,IAAI,CAAClI,KAAK,CAACwH,OAAO,CAACud,MAAM,EAAE,IAAI,CAACvd,OAAO,CAAC8R,KAAK,CAACyP,MAAM,CAAC;EAC/E;EAKAviB,SAAY;IACV,MAAM1F,QAAQ,IAAI,CAACD,GAAG;IAEtB,KAAK,CAAC2F,SAAS;IAEf,IAAI,CAAC4xD,WAAW,GAAG8C,KAAMp6D;IACzB,IAAI,CAACu3D,WAAW,GAAG6C,MAAM,IAAI,CAACl4D,GAAG,IAAIk4D,KAAMp6D;EAC7C;EAEAuY,iBAAiBnR,KAAK,EAAE;IACtB,IAAIA,UAAUpI,SAAaoI,cAAU,CAAG;MACtCA,KAAQ,OAAI,CAACrH,GAAG;;IAElB,IAAIqH,KAAU,SAAI,IAAI2V,MAAM3V,KAAQ;MAClC,OAAO+L;;IAET,OAAO,IAAI,CAACwK,kBAAkB,CAACvW,UAAU,IAAI,CAACrH,GAAG,GAC7C,IACA,CAACq6D,MAAMhzD,SAAS,IAAI,CAACkwD,WAAW,IAAI,IAAI,CAACC,WAAW;EAC1D;EAEA15C,iBAAiB8iB,KAAK,EAAE;IACtB,MAAMC,OAAU,OAAI,CAACG,kBAAkB,CAACJ;IACxC,OAAO7gC,KAAKgqB,GAAG,CAAC,EAAI,MAAI,CAACwtC,WAAW,GAAG12B,UAAU,IAAI,CAAC22B,WAAW;EACnE;AACF;ACzNA,SAAS6D,sBAAsBvzD,IAAI,EAAE;EACnC,MAAMkuB,WAAWluB,KAAK2Q,KAAK;EAE3B,IAAIud,QAAShQ,QAAO,IAAIle,KAAKke,OAAO,EAAE;IACpC,MAAMqJ,UAAUO,SAAUoG,UAASoO,eAAe;IAClD,OAAOt0B,cAAekmB,UAASmD,IAAI,IAAInD,SAASmD,IAAI,CAAC7xB,IAAI,EAAEtB,SAASmzB,IAAI,CAAC7xB,IAAI,IAAI+nB,QAAQ3S,MAAM;;EAEjG,OAAO;AACT;AAEA,SAAS4+C,iBAAiBntD,GAAG,EAAEgrB,IAAI,EAAEtlB,KAAK,EAAE;EAC1CA,KAAQvN,WAAQuN,SAASA,KAAQ,IAACA,MAAM;EACxC,OAAO;IACLqa,GAAGqtC,YAAaptD,MAAKgrB,IAAKqH,OAAM,EAAE3sB;IAClCua,GAAGva,KAAMjT,OAAM,GAAGu4B,KAAKG;EACzB;AACF;AAEA,SAASkiC,gBAAgB17C,KAAK,EAAE4L,GAAG,EAAEpkB,IAAI,EAAEtH,GAAG,EAAEmC,GAAG,EAAE;EACnD,IAAI2d,UAAU9f,GAAO8f,cAAU3d,GAAK;IAClC,OAAO;MACLlC,OAAOyrB,MAAOpkB,IAAO;MACrBU,KAAK0jB,MAAOpkB,IAAO;IACrB;EACF,OAAO,IAAIwY,QAAQ9f,GAAO8f,YAAQ3d,GAAK;IACrC,OAAO;MACLlC,OAAOyrB,GAAMpkB;MACbU,GAAK0jB;IACP;;EAGF,OAAO;IACLzrB,KAAOyrB;IACP1jB,KAAK0jB,GAAMpkB;EACb;AACF;AAKA,SAASm0D,kBAAmB7zD,MAAK,EAAE;EA8BjC,MAAMqT,IAAO;IACXnS,GAAGlB,MAAMa,IAAI,GAAGb,KAAMgmD,SAAQ,CAACnlD,IAAI;IACnCG,GAAGhB,MAAMW,KAAK,GAAGX,KAAMgmD,SAAQ,CAACrlD,KAAK;IACrCI,GAAGf,MAAMU,GAAG,GAAGV,KAAMgmD,SAAQ,CAACtlD,GAAG;IACjCO,GAAGjB,MAAMY,MAAM,GAAGZ,KAAMgmD,SAAQ,CAACplD;EACnC;EACA,MAAMkzD,MAAS51D,UAAOyB,MAAM,CAAC,EAAI0T;EACjC,MAAMojB,aAAa,EAAE;EACrB,MAAMhP,UAAU,EAAE;EAClB,MAAMssC,UAAa/zD,SAAMg0D,YAAY,CAACh7D,MAAM;EAC5C,MAAMi7D,cAAiBj0D,SAAMjB,OAAO,CAACuf,WAAW;EAChD,MAAM41C,kBAAkBD,cAAeE,kBAAiB,GAAG17C,KAAKs7C,aAAa,CAAC;EAE9E,KAAK,IAAI96D,IAAI,CAAGA,MAAI86D,YAAY96D,CAAK;IACnC,MAAMiH,OAAO+zD,cAAe1gC,WAAU,CAACvzB,MAAMo0D,oBAAoB,CAACn7D;IAClEwuB,OAAO,CAACxuB,EAAE,GAAGiH,KAAKunB,OAAO;IACzB,MAAMjI,gBAAgBxf,KAAMq0D,iBAAgB,CAACp7D,GAAG+G,KAAMs0D,YAAW,GAAG7sC,OAAO,CAACxuB,EAAE,EAAEi7D;IAChF,MAAMK,SAAS/iC,MAAOtxB,MAAKqxB,IAAI;IAC/B,MAAM00B,WAAWyN,iBAAiB1zD,KAAMuG,IAAG,EAAEguD,MAAQv0D,QAAMg0D,YAAY,CAAC/6D,CAAE;IAC1Ew9B,UAAU,CAACx9B,EAAE,GAAGgtD;IAEhB,MAAM1uB,YAAegmB,mBAAgBv9C,KAAMgf,cAAa,CAAC/lB,CAAKi7D;IAC9D,MAAMh8C,KAAQ/f,QAAKg3B,KAAK,CAAC8H,SAAUM;IACnC,MAAMi9B,UAAUZ,gBAAgB17C,KAAOsH,gBAAchf,CAAC,EAAEylD,SAAS3/B,CAAC,EAAE,CAAG;IACvE,MAAMmuC,UAAUb,gBAAgB17C,KAAOsH,gBAAc/e,CAAC,EAAEwlD,SAASz/B,CAAC,EAAE,EAAI;IACxEkuC,YAAaZ,SAAQzgD,IAAMkkB,gBAAci9B,OAASC;EACpD;EAEAz0D,KAAM20D,eAAc,CAClBthD,KAAKnS,CAAC,GAAG4yD,OAAO5yD,CAAC,EACjB4yD,MAAO9yD,EAAC,GAAGqS,KAAKrS,CAAC,EACjBqS,KAAKtS,CAAC,GAAG+yD,MAAO/yD,EAAC,EACjB+yD,MAAO7yD,EAAC,GAAGoS,KAAKpS,CAAC;EAInBjB,MAAM40D,gBAAgB,GAAGC,oBAAqB70D,QAAOy2B,UAAYhP;AACnE;AAEA,SAASitC,aAAaZ,MAAM,EAAEzgD,IAAI,EAAE6E,KAAK,EAAEs8C,OAAO,EAAEC,OAAO,EAAE;EAC3D,MAAM38C,MAAM3f,IAAKwY,IAAG,CAACxY,KAAK2f,GAAG,CAACI;EAC9B,MAAMN,MAAMzf,IAAKwY,IAAG,CAACxY,KAAKyf,GAAG,CAACM;EAC9B,IAAI1X,CAAI;EACR,IAAIC,CAAI;EACR,IAAI+zD,OAAQn8D,MAAK,GAAGgb,KAAKnS,CAAC,EAAE;IAC1BV,CAAI,GAAC6S,KAAKnS,EAAC,GAAGszD,OAAQn8D,MAAK,IAAIyf;IAC/Bg8C,MAAO5yD,EAAC,GAAG/I,KAAKC,GAAG,CAAC07D,OAAO5yD,CAAC,EAAEmS,IAAKnS,EAAC,GAAGV;EACzC,OAAO,IAAIg0D,OAAQp0D,IAAG,GAAGiT,KAAKrS,CAAC,EAAE;IAC/BR,CAAI,GAACg0D,QAAQp0D,IAAG,GAAGiT,IAAKrS,EAAC,IAAI8W;IAC7Bg8C,MAAO9yD,EAAC,GAAG7I,KAAKoC,GAAG,CAACu5D,OAAO9yD,CAAC,EAAEqS,IAAKrS,EAAC,GAAGR;;EAEzC,IAAIi0D,OAAQp8D,MAAK,GAAGgb,KAAKtS,CAAC,EAAE;IAC1BN,CAAI,GAAC4S,KAAKtS,EAAC,GAAG0zD,OAAQp8D,MAAK,IAAIuf;IAC/Bk8C,MAAO/yD,EAAC,GAAG5I,KAAKC,GAAG,CAAC07D,OAAO/yD,CAAC,EAAEsS,IAAKtS,EAAC,GAAGN;EACzC,OAAO,IAAIg0D,OAAQr0D,IAAG,GAAGiT,KAAKpS,CAAC,EAAE;IAC/BR,CAAI,GAACg0D,QAAQr0D,IAAG,GAAGiT,IAAKpS,EAAC,IAAI2W;IAC7Bk8C,MAAO7yD,EAAC,GAAG9I,KAAKoC,GAAG,CAACu5D,OAAO7yD,CAAC,EAAEoS,IAAKpS,EAAC,GAAGR;;AAE3C;AAEA,SAASq0D,qBAAqB90D,KAAK,EAAEyB,KAAK,EAAEszD,QAAQ,EAAE;EACpD,MAAMC,gBAAgBh1D,MAAMs0D,WAAW;EACvC,MAAM;IAACW;IAAOf;IAAiBzsC,OAAO;IAAE/nB;EAAI,CAAC,GAAGq1D;EAChD,MAAMG,qBAAqBl1D,KAAMq0D,iBAAgB,CAAC5yD,KAAOuzD,kBAAgBC,QAAQxtC,OAASysC;EAC1F,MAAMh8C,QAAQ/f,KAAKg3B,KAAK,CAAC8H,UAAUsmB,eAAgB2X,oBAAmBh9C,KAAK,GAAGK;EAC9E,MAAM9X,IAAI00D,SAAUD,oBAAmBz0D,CAAC,EAAEf,KAAK8mB,CAAC,EAAEtO;EAClD,MAAMsjB,YAAY45B,oBAAqBl9C;EACvC,MAAMrX,OAAOw0D,gBAAiBH,oBAAmB10D,CAAC,EAAEd,KAAK4mB,CAAC,EAAEkV;EAC5D,OAAO;IAELsQ,SAAS,IAAI;IAGbtrC,GAAG00D,mBAAmB10D,CAAC;IACvBC;IAGA+6B;IAGA36B;IACAH,GAAKD;IACLE,KAAOE,SAAOnB,KAAK4mB,CAAC;IACpB1lB,MAAQH,MAAIf,KAAK8mB;EACnB;AACF;AAEA,SAAS8uC,eAAgBn8D,KAAI,EAAEmT,IAAI,EAAE;EACnC,IAAI,CAACA,IAAM;IACT,OAAO,IAAI;;EAEb,MAAM;IAACzL;IAAMH;IAAKC,KAAK;IAAEC;EAAM,CAAC,GAAGzH;EACnC,MAAMo8D,eAAe9yC,cAAe;IAACjiB,CAAGK;IAAMJ,CAAGC;EAAG,GAAG4L,SAASmW,cAAe;IAACjiB,CAAGK;IAAMJ,CAAGG;EAAM,GAAG0L,SACnGmW,cAAe;IAACjiB,CAAGG;IAAOF,CAAGC;EAAG,GAAG4L,SAASmW,cAAe;IAACjiB,CAAGG;IAAOF,CAAGG;GAAS0L;EACpF,OAAO,CAACipD;AACV;AAEA,SAASV,qBAAqB70D,KAAK,EAAEy2B,UAAU,EAAEhP,OAAO,EAAE;EACxD,MAAM1uB,QAAQ,EAAE;EAChB,MAAMg7D,UAAa/zD,SAAMg0D,YAAY,CAACh7D,MAAM;EAC5C,MAAMkH,OAAOF,MAAMjB,OAAO;EAC1B,MAAM;IAACo1D,iBAAiB;IAAE/1C;EAAAA,CAAQ,GAAGle,KAAKoe,WAAW;EACrD,MAAMy2C,QAAW;IACfE,OAAOxB,sBAAsBvzD,IAAQ;IACrCg0D,eAAiBC,sBAAoB17C,EAAKs7C,gBAAa;EACzD;EACA,IAAIznD;EAEJ,KAAK,IAAIrT,IAAI,CAAGA,MAAI86D,YAAY96D,CAAK;IACnC87D,SAASttC,OAAO,GAAGA,OAAO,CAACxuB,CAAE;IAC7B87D,SAASr1D,IAAI,GAAG+2B,UAAU,CAACx9B,CAAE;IAE7B,MAAME,OAAO27D,oBAAqB90D,QAAO/G,CAAG87D;IAC5Ch8D,MAAMkB,IAAI,CAACd;IACX,IAAIilB,YAAY,MAAQ;MACtBjlB,IAAK2yC,QAAO,GAAGwpB,gBAAgBn8D,IAAMmT;MACrC,IAAInT,KAAK2yC,OAAO,EAAE;QAChBx/B,IAAOnT;;;EAGb;EACA,OAAOJ;AACT;AAEA,SAASq8D,qBAAqBl9C,KAAK,EAAE;EACnC,IAAIA,UAAU,CAAKA,cAAU,GAAK;IAChC,OAAO;GACF,UAAIA,QAAQ,GAAK;IACtB,OAAO;;EAGT,OAAO;AACT;AAEA,SAASm9C,iBAAiB70D,CAAC,EAAE8lB,CAAC,EAAE6J,KAAK,EAAE;EACrC,IAAIA,UAAU,OAAS;IACrB3vB,CAAK8lB;GACA,UAAI6J,UAAU,QAAU;IAC7B3vB,KAAM8lB,CAAI;;EAEZ,OAAO9lB;AACT;AAEA,SAAS20D,UAAU10D,CAAC,EAAE+lB,CAAC,EAAEtO,KAAK,EAAE;EAC9B,IAAIA,UAAU,EAAMA,cAAU,GAAK;IACjCzX,KAAM+lB,CAAI;EACZ,OAAO,IAAItO,QAAQ,GAAOA,YAAQ,EAAI;IACpCzX,CAAK+lB;;EAEP,OAAO/lB;AACT;AAEA,SAAS+0D,kBAAkBjvD,GAAG,EAAErG,IAAI,EAAE/G,IAAI,EAAE;EAC1C,MAAM;IAAC0H;IAAMH;IAAKC,KAAK;IAAEC;EAAM,CAAC,GAAGzH;EACnC,MAAM;IAACsjC;EAAa,CAAC,GAAGv8B;EAExB,IAAI,CAACmR,cAAcorB,aAAgB;IACjC,MAAM6T,eAAe0H,aAAc93C,MAAKowC,YAAY;IACpD,MAAM7oB,UAAUO,SAAU9nB,MAAKs8B,eAAe;IAC9Cj2B,IAAIoT,SAAS,GAAG8iB;IAEhB,MAAMg5B,eAAe50D,IAAO4mB,WAAQ5mB,IAAI;IACxC,MAAM60D,cAAch1D,GAAM+mB,WAAQ/mB,GAAG;IACrC,MAAMi1D,aAAgBh1D,WAAQE,IAAO4mB,WAAQ1S,KAAK;IAClD,MAAM6gD,cAAiBh1D,YAASF,GAAM+mB,WAAQ3S,MAAM;IAEpD,IAAI5W,OAAOW,MAAM,CAACyxC,cAAczN,IAAI,CAACrvB,CAAKA,UAAM,CAAI;MAClDjN,IAAIg3B,SAAS;MACb8b,mBAAmB9yC,GAAK;QACtB/F,CAAGi1D;QACHh1D,CAAGi1D;QACHpvC,CAAGqvC;QACHnvC,CAAGovC;QACHl/C,MAAQ45B;MACV;MACA/pC,IAAIkB,IAAI;KACH;MACLlB,IAAIu2B,QAAQ,CAAC24B,YAAcC,eAAaC,aAAeC;;;AAG7D;AAEA,SAASC,eAAgB71D,MAAK,EAAEuqD,UAAU,EAAE;EAC1C,MAAM;IAAChkD;IAAKxH,SAAS;MAACuf;IAAW;EAAC,CAAC,GAAGte;EAEtC,KAAK,IAAI/G,CAAIsxD,gBAAa,CAAGtxD,OAAK,GAAGA,CAAK;IACxC,MAAME,IAAO6G,SAAM40D,gBAAgB,CAAC37D,CAAE;IACtC,IAAI,CAACE,IAAK2yC,QAAO,EAAE;MAEjB;;IAEF,MAAMnR,cAAcrc,WAAYiV,WAAU,CAACvzB,MAAMo0D,oBAAoB,CAACn7D;IACtEu8D,kBAAkBjvD,KAAKo0B,WAAaxhC;IACpC,MAAMo7D,SAAS/iC,MAAOmJ,aAAYpJ,IAAI;IACtC,MAAM;MAAC/wB,CAAC;MAAEC;MAAG+6B;IAAAA,CAAU,GAAGriC;IAE1B8kC,WACE13B,GACAvG,QAAMg0D,YAAY,CAAC/6D,CAAE,GACrBuH,CACAC,MAAK8zD,MAAO7iC,WAAU,GAAG,GACzB6iC,MACA;MACEp5D,OAAOw/B,YAAYx/B,KAAK;MACxBqgC,SAAWA;MACXG,YAAc;IAChB;EAEJ;AACF;AAEA,SAASm6B,eAAe91D,KAAK,EAAE0W,MAAM,EAAE2H,QAAQ,EAAEksC,UAAU,EAAE;EAC3D,MAAM;IAAChkD;EAAG,CAAC,GAAGvG;EACd,IAAIqe,QAAU;IAEZ9X,GAAI4V,IAAG,CAACnc,KAAM6e,QAAO,EAAE7e,KAAM8e,QAAO,EAAEpI,QAAQ,CAAGc;GAC5C;IAEL,IAAIgI,aAAgBxf,SAAMq0D,gBAAgB,CAAC,CAAG39C;IAC9CnQ,IAAIi3B,MAAM,CAAChe,cAAchf,CAAC,EAAEgf,cAAc/e,CAAC;IAE3C,KAAK,IAAIxH,IAAI,CAAGA,MAAIsxD,YAAYtxD,CAAK;MACnCumB,aAAgBxf,SAAMq0D,gBAAgB,CAACp7D,CAAGyd;MAC1CnQ,IAAIk3B,MAAM,CAACje,cAAchf,CAAC,EAAEgf,cAAc/e,CAAC;IAC7C;;AAEJ;AAEA,SAASs1D,eAAe/1D,KAAK,EAAEg2D,YAAY,EAAEt/C,MAAM,EAAE6zC,UAAU,EAAE5wB,UAAU,EAAE;EAC3E,MAAMpzB,MAAMvG,MAAMuG,GAAG;EACrB,MAAM8X,WAAW23C,aAAa33C,QAAQ;EAEtC,MAAM;IAACljB;IAAO6e;EAAAA,CAAU,GAAGg8C;EAE3B,IAAK,CAAC33C,YAAY,CAACksC,cAAe,CAACpvD,KAAS,KAAC6e,SAAatD,aAAS,CAAG;IACpE;;EAGFnQ,IAAIs2B,IAAI;EACRt2B,IAAIsT,WAAW,GAAG1e;EAClBoL,IAAIyT,SAAS,GAAGA;EAChBzT,GAAI82B,YAAW,CAAC1D,WAAWoB,IAAI;EAC/Bx0B,GAAI+2B,eAAc,GAAG3D,WAAWsB,UAAU;EAE1C10B,IAAIg3B,SAAS;EACbu4B,cAAe91D,QAAO0W,QAAQ2H,QAAUksC;EACxChkD,IAAIypC,SAAS;EACbzpC,IAAIm3B,MAAM;EACVn3B,IAAIw2B,OAAO;AACb;AAEA,SAASk5B,wBAAwB/wD,MAAM,EAAEzD,KAAK,EAAEwK,KAAK,EAAE;EACrD,OAAO9G,cAAcD,MAAQ;IAC3B+G;IACAxK;IACA/J,IAAM;EACR;AACF;AAEe,MAAMw+D,iBAA0B1E;EAE7C,OAAOtuD,KAAK,cAAe;EAK3B,OAAO9E,QAAW;IAChBggB,SAAS,IAAI;IAGb+3C,SAAS,IAAI;IACb50C,QAAU;IAEVpD,UAAY;MACVC,SAAS,IAAI;MACbpE,SAAW;MACX8gB,YAAY,EAAE;MACdE,gBAAkB;IACpB;IAEA/mB,IAAM;MACJoK,UAAU;IACZ;IAEA5G,UAAY;IAGZ5G,KAAO;MAELwrB,mBAAmB,IAAI;MAEvBpG,QAAUo8B,QAAMC,UAAU,CAACC;IAC7B;IAEAj0C,WAAa;MACXme,aAAeplC;MAGfmlC,eAAiB;MAGjBpe,SAAS,IAAI;MAGbmT,IAAM;QACJ7xB,IAAM;MACR;MAGAu2B,SAAShqB,KAAK,EAAE;QACd,OAAOA;MACT;MAGAwb,OAAS;MAGT0sC,mBAAmB;IACrB;GACA;EAEF,OAAOrmC,aAAgB;IACrB,kBAAoB;IACpB,mBAAqB;IACrB,aAAe;GACf;EAEF,OAAO/U,WAAc;IACnBoF,UAAY;MACVixC,SAAW;IACb;GACA;EAEFr4D,YAAY6E,GAAG,EAAE;IACf,KAAK,CAACA;IAGN,IAAI,CAACijB,OAAO,GAAGxnB;IAEf,IAAI,CAACynB,OAAO,GAAGznB;IAEf,IAAI,CAACi9D,WAAW,GAAGj9D;IAEnB,IAAI,CAAC28D,YAAY,GAAG,EAAE;IACtB,IAAI,CAACY,gBAAgB,GAAG,EAAE;EAC5B;EAEAtgC,aAAgB;IAEd,MAAM7M,UAAU,IAAI,CAACu+B,QAAQ,GAAGh+B,UAAUyrC,qBAAsB,KAAI,CAAC10D,OAAO,CAAI;IAChF,MAAMunB,IAAI,IAAI,CAACvR,KAAK,GAAG,IAAI,CAACsG,QAAQ,GAAGoM,QAAQ1S,KAAK;IACpD,MAAMyR,IAAI,IAAI,CAAC1R,MAAM,GAAG,IAAI,CAACwG,SAAS,GAAGmM,QAAQ3S,MAAM;IACvD,IAAI,CAAC+J,OAAO,GAAG1mB,KAAKoE,KAAK,CAAC,IAAI,CAACsE,IAAI,GAAGylB,CAAI,OAAImB,QAAQ5mB,IAAI;IAC1D,IAAI,CAACie,OAAO,GAAG3mB,KAAKoE,KAAK,CAAC,IAAI,CAACmE,GAAG,GAAG8lB,CAAI,OAAIiB,QAAQ/mB,GAAG;IACxD,IAAI,CAAC4zD,WAAW,GAAGn8D,IAAKoE,MAAK,CAACpE,IAAKC,IAAG,CAACkuB,GAAGE,CAAK;EACjD;EAEAiO,mBAAsB;IACpB,MAAM;MAACr8B,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI,CAACkR,SAAS,CAAC,KAAK;IAEvC,IAAI,CAACrT,GAAG,GAAG6J,eAAS7J,QAAQ,CAACgd,MAAMhd,GAAOA,UAAM,CAAC;IACjD,IAAI,CAACmC,GAAG,GAAG0H,eAAS1H,QAAQ,CAAC6a,MAAM7a,GAAOA,UAAM,CAAC;IAGjD,IAAI,CAACm3D,sBAAsB;EAC7B;EAMAO,gBAAmB;IACjB,OAAO95D,KAAK23B,IAAI,CAAC,IAAI,CAACwkC,WAAW,GAAGb,sBAAsB,IAAI,CAAC10D,OAAO;EACxE;EAEAi3B,mBAAmBnlB,KAAK,EAAE;IACxB2gD,gBAAgBrxC,SAAS,CAAC6V,kBAAkB,CAACx9B,IAAI,CAAC,IAAI,EAAEqY;IAGxD,IAAI,CAACmjD,YAAY,GAAG,IAAI,CAAClpD,SAAS,GAC/B0O,GAAG,CAAC,CAAC/Z,OAAOgC,KAAU;MACrB,MAAMwK,QAAQo2B,SAAa,IAAI,CAACtjC,OAAO,CAACuf,WAAW,CAAC2X,QAAQ,EAAE,CAACx2B,OAAOgC,MAAM,EAAE,IAAI;MAClF,OAAOwK,KAASA,cAAU,CAAIA,WAAQ,EAAE;KAEzClH,QAAM,CAAC,CAACyO,CAAGva,QAAM,IAAI,CAAC1B,KAAK,CAACue,iBAAiB,CAAC7c;EACnD;EAEAs8B,GAAM;IACJ,MAAMr1B,OAAO,IAAI,CAACnB,OAAO;IAEzB,IAAImB,KAAKke,OAAO,IAAIle,KAAKoe,WAAW,CAACF,OAAO,EAAE;MAC5Cy1C,mBAAmB,IAAI;KAClB;MACL,IAAI,CAACc,cAAc,CAAC,GAAG,GAAG,CAAG;;EAEjC;EAEAA,eAAeyB,YAAY,EAAEC,aAAa,EAAEC,WAAW,EAAEC,cAAc,EAAE;IACvE,IAAI,CAAC13C,OAAO,IAAI1mB,IAAKoE,MAAK,CAAC,CAAC65D,YAAeC,gBAAY,IAAK;IAC5D,IAAI,CAACv3C,OAAO,IAAI3mB,IAAKoE,MAAK,CAAC,CAAC+5D,WAAcC,iBAAa,IAAK;IAC5D,IAAI,CAACjC,WAAW,IAAIn8D,IAAKC,IAAG,CAAC,IAAI,CAACk8D,WAAW,GAAG,GAAGn8D,IAAKoC,IAAG,CAAC67D,cAAcC,eAAeC,WAAaC;EACxG;EAEAv3C,cAAcvd,KAAK,EAAE;IACnB,MAAM+0D,kBAAkBh/C,OAAO,IAAI,CAACw8C,YAAY,CAACh7D,MAAM,IAAI;IAC3D,MAAMye,aAAa,IAAI,CAAC1Y,OAAO,CAAC0Y,UAAU,IAAI;IAE9C,OAAO8lC,gBAAgB97C,KAAQ+0D,qBAAkB97C,SAAUjD;EAC7D;EAEA2H,8BAA8B3f,KAAK,EAAE;IACnC,IAAI4R,cAAc5R,KAAQ;MACxB,OAAO+L;;IAIT,MAAMirD,aAAgB,OAAI,CAACnC,WAAW,IAAI,IAAI,CAAC/5D,GAAG,GAAG,IAAI,CAACnC,GAAG,CAAD;IAC5D,IAAI,IAAI,CAAC2G,OAAO,CAACoB,OAAO,EAAE;MACxB,OAAO,CAAC,IAAI,CAAC5F,GAAG,GAAGkF,KAAI,IAAKg3D;;IAE9B,OAAO,CAACh3D,QAAQ,IAAI,CAACrH,GAAG,IAAIq+D;EAC9B;EAEAC,8BAA8BvzC,QAAQ,EAAE;IACtC,IAAI9R,cAAc8R,QAAW;MAC3B,OAAO3X;;IAGT,MAAMmrD,iBAAiBxzC,QAAY,QAAI,CAACmxC,WAAW,IAAI,IAAI,CAAC/5D,GAAG,GAAG,IAAI,CAACnC,GAAG;IAC1E,OAAO,IAAI,CAAC2G,OAAO,CAACoB,OAAO,GAAG,IAAI,CAAC5F,GAAG,GAAGo8D,cAAiB,OAAI,CAACv+D,GAAG,GAAGu+D,cAAc;EACrF;EAEAvC,qBAAqB3yD,KAAK,EAAE;IAC1B,MAAM6c,WAAc,OAAI,CAAC01C,YAAY,IAAI,EAAE;IAE3C,IAAIvyD,KAAS,SAAKA,KAAQ6c,eAAYtlB,MAAM,EAAE;MAC5C,MAAM49D,aAAat4C,WAAW,CAAC7c,KAAM;MACrC,OAAOw0D,uBAAwB,KAAI,CAAC/rD,UAAU,IAAIzI,KAAOm1D;;EAE7D;EAEAvC,iBAAiB5yD,KAAK,EAAEo1D,kBAAkB,EAAuB;IAAA,IAArB3C,sFAAkB,CAAC;IAC7D,MAAMh8C,QAAQ,IAAI,CAAC8G,aAAa,CAACvd,SAAS8W,OAAU27C;IACpD,OAAO;MACL1zD,GAAGrI,KAAKyf,GAAG,CAACM,SAAS2+C,kBAAqB,OAAI,CAACh4C,OAAO;MACtDpe,GAAGtI,KAAK2f,GAAG,CAACI,SAAS2+C,kBAAqB,OAAI,CAAC/3C,OAAO;MACtD5G;IACF;EACF;EAEAuH,wBAAyBhe,MAAK,EAAEhC,KAAK,EAAE;IACrC,OAAO,IAAI,CAAC40D,gBAAgB,CAAC5yD,OAAO,IAAI,CAAC2d,6BAA6B,CAAC3f;EACzE;EAEAq3D,gBAAgBr1D,KAAK,EAAE;IACrB,OAAO,IAAI,CAACge,wBAAwB,CAAChe,SAAS,CAAG,MAAI,CAAC43B,YAAY;EACpE;EAEA09B,sBAAsBt1D,KAAK,EAAE;IAC3B,MAAM;MAACZ;MAAMH;MAAKC,KAAK;MAAEC;IAAM,CAAC,GAAG,IAAI,CAACg0D,gBAAgB,CAACnzD,KAAM;IAC/D,OAAO;MACLZ;MACAH;MACAC;MACAC;IACF;EACF;EAKAg8B,cAAiB;IACf,MAAM;MAAChjB;MAAiB3F,MAAM;QAACoK;MAAAA;IAAS,CAAC,GAAG,IAAI,CAACtf,OAAO;IACxD,IAAI6a,eAAiB;MACnB,MAAMrT,MAAM,IAAI,CAACA,GAAG;MACpBA,IAAIs2B,IAAI;MACRt2B,IAAIg3B,SAAS;MACbu4B,eAAe,IAAI,EAAE,IAAI,CAAC12C,6BAA6B,CAAC,IAAI,CAACqyC,SAAS,GAAGpzC,QAAU,MAAI,CAAC21C,YAAY,CAACh7D,MAAM;MAC3GuN,IAAIypC,SAAS;MACbzpC,IAAIoT,SAAS,GAAGC;MAChBrT,IAAIkB,IAAI;MACRlB,IAAIw2B,OAAO;;EAEf;EAKAE,QAAW;IACT,MAAM12B,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMrG,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAM;MAACof,UAAU;MAAElK;MAAM6J;IAAAA,CAAO,GAAG5d;IACnC,MAAMqqD,UAAa,OAAI,CAACyJ,YAAY,CAACh7D,MAAM;IAE3C,IAAIC,GAAG+a,MAAQuN;IAEf,IAAIrhB,IAAKoe,YAAW,CAACF,OAAO,EAAE;MAC5By3C,gBAAgB,IAAI,EAAEtL;;IAGxB,IAAIt2C,KAAKmK,OAAO,EAAE;MAChB,IAAI,CAACvN,KAAK,CAAC9Y,OAAO,CAAC,CAACuB,MAAMmI,KAAU;QAClC,IAAIA,UAAU,KAAMA,KAAU,UAAK,IAAI,CAACrJ,GAAG,GAAG,CAAI;UAChD4b,SAAS,IAAI,CAACoL,6BAA6B,CAAC9lB,KAAKmG,KAAK;UACtD,MAAMmN,OAAU,OAAI,CAAC1C,UAAU,CAACzI;UAChC,MAAMk5B,cAAc1mB,IAAKsf,WAAU,CAAC3mB;UACpC,MAAMguB,oBAAoB9c,MAAOyV,WAAU,CAAC3mB;UAE5CmpD,eAAe,IAAI,EAAEp7B,WAAa3mB,UAAQu2C,UAAY3vB;;MAE1D;;IAGF,IAAIzc,WAAWC,OAAO,EAAE;MACtB7X,IAAIs2B,IAAI;MAER,KAAK5jC,CAAIsxD,gBAAa,CAAGtxD,OAAK,GAAGA,CAAK;QACpC,MAAM0hC,cAAcxc,UAAWoV,WAAU,CAAC,IAAI,CAAC6gC,oBAAoB,CAACn7D;QACpE,MAAM;UAACkC;UAAO6e;QAAAA,CAAU,GAAG2gB;QAE3B,IAAI,CAAC3gB,SAAa,KAAC7e,KAAO;UACxB;;QAGFoL,IAAIyT,SAAS,GAAGA;QAChBzT,IAAIsT,WAAW,GAAG1e;QAElBoL,GAAI82B,YAAW,CAAC1C,YAAYG,UAAU;QACtCv0B,GAAI+2B,eAAc,GAAG3C,YAAYK,gBAAgB;QAEjDhnB,SAAS,IAAI,CAACoL,6BAA6B,CAAClf,KAAK2Q,KAAK,CAAC1Q,OAAO,GAAG,IAAI,CAAC/H,GAAG,GAAG,IAAI,CAACmC,GAAG;QACpFgnB,WAAW,IAAI,CAAC8yC,gBAAgB,CAACp7D,CAAG+a;QACpCzN,IAAIg3B,SAAS;QACbh3B,GAAIi3B,OAAM,CAAC,IAAI,CAAC3e,OAAO,EAAE,IAAI,CAACC,OAAO;QACrCvY,IAAIk3B,MAAM,CAAClc,SAAS/gB,CAAC,EAAE+gB,SAAS9gB,CAAC;QACjC8F,IAAIm3B,MAAM;MACZ;MAEAn3B,IAAIw2B,OAAO;;EAEf;EAKAa,aAAa;EAKbE,UAAa;IACX,MAAMv3B,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMrG,OAAO,IAAI,CAACnB,OAAO;IACzB,MAAMqvB,WAAWluB,KAAK2Q,KAAK;IAE3B,IAAI,CAACud,QAAShQ,QAAO,EAAE;MACrB;;IAGF,MAAM3G,UAAa,OAAI,CAACuH,aAAa,CAAC;IACtC,IAAIhL,MAAQe;IAEZxO,IAAIs2B,IAAI;IACRt2B,GAAImtC,UAAS,CAAC,IAAI,CAAC70B,OAAO,EAAE,IAAI,CAACC,OAAO;IACxCvY,IAAIywD,MAAM,CAACv/C;IACXlR,IAAIi1B,SAAS,GAAG;IAChBj1B,IAAIo1B,YAAY,GAAG;IAEnB,IAAI,CAAC9qB,KAAK,CAAC9Y,OAAO,CAAC,CAACuB,MAAMmI,KAAU;MAClC,IAAKA,KAAU,UAAK,IAAI,CAACrJ,GAAG,IAAI,CAAM,KAAC8H,IAAKC,QAAO,EAAE;QACnD;;MAGF,MAAMw6B,cAAcvM,QAASmF,WAAU,CAAC,IAAI,CAACrpB,UAAU,CAACzI;MACxD,MAAM+2B,WAAWhH,MAAOmJ,aAAYpJ,IAAI;MACxCvd,MAAS,OAAI,CAACoL,6BAA6B,CAAC,IAAI,CAACvO,KAAK,CAACpP,KAAM,EAAChC,KAAK;MAEnE,IAAIk7B,YAAY0B,iBAAiB,EAAE;QACjC91B,GAAIgrB,KAAI,GAAGiH,SAASI,MAAM;QAC1B7jB,QAAQxO,IAAIi8C,WAAW,CAAClpD,IAAK2S,MAAK,EAAE8I,KAAK;QACzCxO,GAAIoT,UAAS,GAAGghB,YAAY8B,aAAa;QAEzC,MAAMhV,UAAUO,SAAU2S,aAAY6B,eAAe;QACrDj2B,GAAIu2B,SAAQ,CACV,CAAC/nB,KAAQ,OAAI0S,QAAQ5mB,IAAI,EACzB,CAACmT,SAASwkB,QAAS94B,KAAI,GAAG,CAAI+nB,WAAQ/mB,GAAG,EACzCqU,KAAQ0S,WAAQ1S,KAAK,EACrByjB,QAAS94B,KAAI,GAAG+nB,QAAQ3S,MAAM;;MAIlCmpB,WAAW13B,KAAKjN,IAAK2S,MAAK,EAAE,CAAG,GAAC+H,QAAQwkB,QAAU;QAChDr9B,OAAOw/B,YAAYx/B,KAAK;QACxB6gC,aAAarB,YAAYsB,eAAe;QACxCC,aAAavB,YAAYwB;MAC3B;IACF;IAEA51B,IAAIw2B,OAAO;EACb;EAKAoB,YAAY;AACd;AC5pBA,MAAM84B,SAAY;EAChBC,WAAa;IAACC,QAAQ,IAAI;IAAEz3D,IAAM;IAAGozD,KAAO;EAAI;EAChDsE,MAAQ;IAACD,QAAQ,IAAI;IAAEz3D,IAAM;IAAMozD,KAAO;EAAE;EAC5CuE,MAAQ;IAACF,QAAQ,IAAI;IAAEz3D,IAAM;IAAOozD,KAAO;EAAE;EAC7CwE,IAAM;IAACH,QAAQ,IAAI;IAAEz3D,IAAM;IAASozD,KAAO;EAAE;EAC7CyE,GAAK;IAACJ,QAAQ,IAAI;IAAEz3D,IAAM;IAAUozD,KAAO;EAAE;EAC7C0E,IAAM;IAACL,QAAQ,KAAK;IAAEz3D,IAAM;IAAWozD,KAAO;EAAC;EAC/C2E,KAAO;IAACN,QAAQ,IAAI;IAAEz3D,IAAM;IAASozD,KAAO;EAAE;EAC9C4E,OAAS;IAACP,QAAQ,KAAK;IAAEz3D,IAAM;IAASozD,KAAO;EAAC;EAChD6E,IAAM;IAACR,QAAQ,IAAI;IAAEz3D,IAAM;EAAQ;AACrC;AAKA,MAAMk4D,uBAA6C15D,OAAOC,IAAI,CAAC84D;AAM/D,SAASY,OAAOvnD,CAAC,EAAErP,CAAC,EAAE;EACpB,OAAOqP,CAAIrP;AACb;AAOA,SAASmJ,MAAMpK,KAAK,EAAE83D,KAAK,EAAE;EAC3B,IAAIzmD,cAAcymD,KAAQ;IACxB,OAAO,IAAI;;EAGb,MAAMC,UAAU/3D,MAAMg4D,QAAQ;EAC9B,MAAM;IAACC;IAAQ9oC;IAAO+oC;EAAU,CAAC,GAAGl4D,MAAMm4D,UAAU;EACpD,IAAI14D,KAAQq4D;EAEZ,IAAI,OAAOG,WAAW,UAAY;IAChCx4D,QAAQw4D,MAAOx4D;;EAIjB,IAAI,CAACwC,eAASxC,KAAQ;IACpBA,QAAQ,OAAOw4D,WAAW,QACtBF,WAAQ3tD,KAAK,CAAC3K,KAAO,EAAqBw4D,UAC1CF,OAAQ3tD,MAAK,CAAC3K,KAAM;;EAG1B,IAAIA,UAAU,IAAI,EAAE;IAClB,OAAO,IAAI;;EAGb,IAAI0vB,KAAO;IACT1vB,QAAQ0vB,UAAU,MAAW1R,cAASy6C,UAAeA,oBAAe,IAAI,CAAD,GACnEH,QAAQv3C,OAAO,CAAC/gB,OAAO,SAAWy4D,gBAClCH,QAAQv3C,OAAO,CAAC/gB,OAAO0vB,KAAM;;EAGnC,OAAO,CAAC1vB;AACV;AAUA,SAAS24D,0BAA0BC,OAAO,EAAEjgE,GAAG,EAAEmC,GAAG,EAAE+9D,QAAQ,EAAE;EAC9D,MAAM92D,OAAOo2D,MAAM5+D,MAAM;EAEzB,KAAK,IAAIC,CAAI2+D,SAAMviD,OAAO,CAACgjD,UAAUp/D,CAAIuI,UAAO,CAAG,IAAEvI,CAAG;IACtD,MAAMs/D,WAAWtB,SAAS,CAACW,KAAK,CAAC3+D,EAAE,CAAC;IACpC,MAAMiC,SAASq9D,SAASzF,KAAK,GAAGyF,SAASzF,KAAK,GAAGxvD,OAAOk1D,gBAAgB;IAExE,IAAID,SAASpB,MAAM,IAAIh/D,IAAK23B,KAAI,CAAC,CAACv1B,GAAMnC,MAAE,KAAM8C,SAASq9D,SAAS74D,IAAG,MAAO44D,QAAU;MACpF,OAAOV,KAAK,CAAC3+D,CAAE;;EAEnB;EAEA,OAAO2+D,KAAK,CAACp2D,OAAO,CAAE;AACxB;AAWA,SAASi3D,0BAA2Bz4D,MAAK,EAAEm2B,QAAQ,EAAEkiC,OAAO,EAAEjgE,GAAG,EAAEmC,GAAG,EAAE;EACtE,KAAK,IAAItB,CAAI2+D,SAAM5+D,MAAM,GAAG,CAAGC,OAAK2+D,KAAMviD,QAAO,CAACgjD,UAAUp/D,CAAK;IAC/D,MAAMs3D,OAAOqH,KAAK,CAAC3+D,CAAE;IACrB,IAAIg+D,SAAS,CAAC1G,IAAK,EAAC4G,MAAM,IAAIn3D,MAAMg4D,QAAQ,CAACz3C,IAAI,CAAChmB,KAAKnC,GAAKm4D,WAASp6B,WAAW,CAAG;MACjF,OAAOo6B;;EAEX;EAEA,OAAOqH,KAAK,CAACS,OAAUT,SAAMviD,OAAO,CAACgjD,WAAW,CAAC,CAAC;AACpD;AAMA,SAASK,kBAAmBnI,KAAI,EAAE;EAChC,KAAK,IAAIt3D,IAAI2+D,KAAMviD,QAAO,CAACk7C,IAAQ,OAAG/uD,IAAOo2D,SAAM5+D,MAAM,EAAEC,CAAIuI,SAAM,EAAEvI,CAAG;IACxE,IAAIg+D,SAAS,CAACW,KAAK,CAAC3+D,EAAE,CAAC,CAACk+D,MAAM,EAAE;MAC9B,OAAOS,KAAK,CAAC3+D,CAAE;;EAEnB;AACF;AAOA,SAAS0/D,OAAQ9nD,MAAK,EAAE+nD,IAAI,EAAEC,UAAU,EAAE;EACxC,IAAI,CAACA,UAAY;IACfhoD,KAAK,CAAC+nD,IAAK,IAAG,IAAI;GACb,UAAIC,UAAW7/D,OAAM,EAAE;IAC5B,MAAM;MAACooB,EAAE;MAAEC;IAAAA,CAAG,GAAGy3C,QAAQD,UAAYD;IACrC,MAAMG,SAAYF,aAAU,CAACz3C,GAAG,IAAIw3C,OAAOC,UAAU,CAACz3C,EAAG,IAAGy3C,UAAU,CAACx3C,EAAG;IAC1ExQ,KAAK,CAACkoD,SAAU,IAAG,IAAI;;AAE3B;AASA,SAASC,cAAch5D,KAAK,EAAE6Q,KAAK,EAAE2I,GAAG,EAAEy/C,SAAS,EAAE;EACnD,MAAMlB,UAAU/3D,MAAMg4D,QAAQ;EAC9B,MAAMlpC,QAAQ,CAACipC,QAAQv3C,OAAO,CAAC3P,KAAK,CAAC,EAAE,CAACpR,KAAK,EAAEw5D;EAC/C,MAAMhkD,OAAOpE,KAAK,CAACA,MAAM7X,MAAM,GAAG,EAAE,CAACyG,KAAK;EAC1C,IAAIivB,KAAOjtB;EAEX,KAAKitB,QAAQI,KAAOJ,WAASzZ,IAAMyZ,UAAQ,CAACqpC,QAAQ79D,GAAG,CAACw0B,KAAO,KAAGuqC,SAAY;IAC5Ex3D,KAAQ+X,MAAG,CAACkV,KAAM;IAClB,IAAIjtB,SAAS,CAAG;MACdoP,KAAK,CAACpP,MAAM,CAACitB,KAAK,GAAG,IAAI;;EAE7B;EACA,OAAO7d;AACT;AAQA,SAASqoD,mBAAoBl5D,MAAK,EAAEnB,MAAM,EAAEo6D,SAAS,EAAE;EACrD,MAAMpoD,QAAQ,EAAE;EAEhB,MAAM2I,MAAM,EAAC;EACb,MAAMhY,OAAO3C,OAAO7F,MAAM;EAC1B,IAAIC,CAAGwG;EAEP,KAAKxG,CAAI,MAAGA,CAAIuI,SAAM,EAAEvI,CAAG;IACzBwG,KAAQZ,SAAM,CAAC5F,CAAE;IACjBugB,GAAG,CAAC/Z,MAAM,GAAGxG;IAEb4X,MAAM5W,IAAI,CAAC;MACTwF;MACAivB,OAAO;IACT;EACF;EAIA,OAAQltB,IAAS,UAAK,CAACy3D,YAAapoD,QAAQmoD,aAAch5D,QAAO6Q,KAAO2I,OAAKy/C,SAAU;AACzF;AAEe,MAAME,SAAkB/mC;EAErC,OAAOlvB,KAAK,MAAO;EAKnB,OAAO9E,QAAW;IAQhBo6C,MAAQ;IAER4gB,UAAU,EAAC;IACXR,IAAM;MACJX,QAAQ,KAAK;MACb1H,MAAM,KAAK;MACXphC,OAAO,KAAK;MACZ+oC,YAAY,KAAK;MACjBG,OAAS;MACTgB,gBAAgB;IAClB;IACAxoD,KAAO;MASLukB,MAAQ;MAERa,UAAU,KAAK;MAEfvH,KAAO;QACLC,SAAS;MACX;IACF;GACA;EAKF53B,YAAYwI,KAAK,EAAE;IACjB,KAAK,CAACA;IAGN,IAAI,CAACyQ,MAAM,GAAG;MACZ5N,MAAM,EAAE;MACRyI,QAAQ,EAAE;MACV/K,KAAK;IACP;IAGA,IAAI,CAACw5D,KAAK,GAAG;IAEb,IAAI,CAACC,UAAU,GAAGliE;IAClB,IAAI,CAACmiE,QAAQ,GAAG,EAAC;IACjB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACtB,UAAU,GAAG9gE;EACpB;EAEA+oB,KAAK2qB,SAAS,EAAa;IAAA,IAAX7qC,IAAO,yEAAE;IACvB,MAAM04D,OAAO7tB,UAAU6tB,IAAI,KAAK7tB,SAAU6tB,KAAI,GAAG,EAAC;IAElD,MAAMb,OAAU,OAAI,CAACC,QAAQ,GAAG,IAAIoB,SAAS14C,KAAK,CAACqqB,SAAUquB,SAAQ,CAAC3hE,IAAI;IAE1EsgE,QAAQ33C,IAAI,CAAClgB;IAMb2kC,QAAQ+zB,IAAKS,eAAc,EAAEtB,QAAQ13C,OAAO;IAE5C,IAAI,CAAC83C,UAAU,GAAG;MAChBF,QAAQW,KAAKX,MAAM;MACnB9oC,OAAOypC,KAAKzpC,KAAK;MACjB+oC,YAAYU,KAAKV;IACnB;IAEA,KAAK,CAAC93C,IAAI,CAAC2qB;IAEX,IAAI,CAAC0uB,WAAW,GAAGv5D,KAAKw5D,UAAU;EACpC;EAOAtvD,KAAM5E,IAAG,EAAE/D,KAAK,EAAE;IAChB,IAAI+D,QAAQnO,SAAW;MACrB,OAAO,IAAI;;IAEb,OAAO+S,MAAM,IAAI,EAAE5E;EACrB;EAEA4iB,YAAe;IACb,KAAK,CAACA,YAAY;IAClB,IAAI,CAACpY,MAAM,GAAG;MACZ5N,MAAM,EAAE;MACRyI,QAAQ,EAAE;MACV/K,KAAK;IACP;EACF;EAEA20B,mBAAsB;IACpB,MAAM11B,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMg5D,UAAU,IAAI,CAACC,QAAQ;IAC7B,MAAMzH,IAAOxxD,WAAQ65D,IAAI,CAACrI,IAAI,IAAI;IAElC,IAAI;MAACn4D;MAAKmC;MAAK6I;MAAYC;IAAAA,CAAW,GAAG,IAAI,CAACF,aAAa;IAK3D,SAASw2D,YAAanhB,OAAM,EAAE;MAC5B,IAAI,CAACp1C,UAAc,KAACgS,KAAMojC,QAAOpgD,GAAG,CAAG;QACrCA,MAAMD,IAAKC,IAAG,CAACA,KAAKogD,OAAOpgD,GAAG;;MAEhC,IAAI,CAACiL,UAAc,KAAC+R,KAAMojC,QAAOj+C,GAAG,CAAG;QACrCA,MAAMpC,IAAKoC,IAAG,CAACA,KAAKi+C,OAAOj+C,GAAG;;IAElC;IAGA,IAAI,CAAC6I,UAAc,KAACC,UAAY;MAE9Bs2D,YAAa,KAAI,CAACC,eAAe;MAIjC,IAAI76D,QAAQy5C,MAAM,KAAK,WAAWz5C,QAAQ8R,KAAK,CAACukB,MAAM,KAAK,QAAU;QACnEukC,aAAa,IAAI,CAACluD,SAAS,CAAC,KAAK;;;IAIrCrT,MAAM6J,cAAS7J,SAAQ,CAACgd,MAAMhd,GAAOA,UAAM,CAAC2/D,QAAQv3C,OAAO,CAAC7nB,IAAKC,IAAG,IAAI23D,IAAK;IAC7Eh2D,MAAM0H,cAAS1H,SAAQ,CAAC6a,MAAM7a,OAAOA,GAAM,IAACw9D,OAAQt3C,MAAK,CAAC9nB,KAAKC,GAAG,IAAI23D,QAAQ,CAAC;IAG/E,IAAI,CAACn4D,GAAG,GAAGD,KAAKC,GAAG,CAACA,KAAKmC,GAAM;IAC/B,IAAI,CAACA,GAAG,GAAGpC,KAAKoC,GAAG,CAACnC,MAAM,CAAGmC;EAC/B;EAKAq/D,eAAkB;IAChB,MAAM3qD,MAAM,IAAI,CAAC4qD,kBAAkB;IACnC,IAAIzhE,MAAMkL,OAAOE,iBAAiB;IAClC,IAAIjJ,MAAM+I,OAAOC,iBAAiB;IAElC,IAAI0L,IAAIjW,MAAM,EAAE;MACdZ,GAAM6W,MAAG,CAAC,CAAE;MACZ1U,MAAM0U,GAAG,CAACA,GAAIjW,OAAM,GAAG,CAAE;;IAE3B,OAAO;MAACZ;MAAKmC;IAAG;EAClB;EAKAs6B,UAAa;IACX,MAAM91B,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM+6D,WAAW/6D,QAAQ65D,IAAI;IAC7B,MAAMxqC,WAAWrvB,QAAQ8R,KAAK;IAC9B,MAAMgoD,UAAazqC,YAASgH,MAAM,KAAK,QAAW,OAAI,CAACykC,kBAAkB,EAAK,OAAI,CAACE,SAAS,EAAE;IAE9F,IAAIh7D,QAAQy5C,MAAM,KAAK,OAAWqgB,eAAW7/D,MAAM,EAAE;MACnD,IAAI,CAACZ,GAAG,GAAG,IAAI,CAAC66B,QAAQ,IAAI4lC,UAAU,CAAC,CAAE;MACzC,IAAI,CAACt+D,GAAG,GAAG,IAAI,CAACy4B,QAAQ,IAAI6lC,UAAU,CAACA,WAAW7/D,MAAM,GAAG,CAAE;;IAG/D,MAAMZ,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMmC,MAAM,IAAI,CAACA,GAAG;IAEpB,MAAMsW,QAAQmpD,cAAenB,aAAYzgE,GAAKmC;IAK9C,IAAI,CAAC++D,KAAK,GAAGQ,SAASvJ,IAAI,KAAKniC,SAASD,QAAQ,GAC5CiqC,0BAA0B0B,QAASzB,QAAO,EAAE,IAAI,CAACjgE,GAAG,EAAE,IAAI,CAACmC,GAAG,EAAE,IAAI,CAAC0/D,iBAAiB,CAAC7hE,GACvFqgE,gCAA2B,IAAI,EAAE5nD,MAAM7X,MAAM,EAAE8gE,SAASzB,OAAO,EAAE,IAAI,CAACjgE,GAAG,EAAE,IAAI,CAACmC,GAAG,CAAC,CAAD;IACvF,IAAI,CAACg/D,UAAU,GAAG,CAACnrC,QAASM,MAAK,CAACC,OAAO,IAAI,IAAI,CAAC2qC,KAAK,KAAK,MAASjiE,eACjEqhE,mBAAmB,IAAI,CAACY,KAAK,CAAC;IAClC,IAAI,CAACY,WAAW,CAACrB;IAEjB,IAAI95D,QAAQoB,OAAO,EAAE;MACnB0Q,MAAM1Q,OAAO;;IAGf,OAAO+4D,oBAAoB,IAAI,EAAEroD,KAAO,MAAI,CAAC0oD,UAAU;EACzD;EAEAlkC,aAAgB;IAGd,IAAI,IAAI,CAACt2B,OAAO,CAACo7D,mBAAmB,EAAE;MACpC,IAAI,CAACD,WAAW,CAAC,IAAI,CAACrpD,KAAK,CAAC2I,GAAG,CAAClgB,IAAQ,KAACA,KAAKmG,KAAK;;EAEvD;EAUAy6D,cAA6B;IAAA,IAAjBrB,UAAa,yEAAE;IACzB,IAAIxgE,KAAQ;IACZ,IAAI+H,GAAM;IACV,IAAI0uB,KAAO7Z;IAEX,IAAI,IAAI,CAAClW,OAAO,CAACiV,MAAM,IAAI6kD,WAAW7/D,MAAM,EAAE;MAC5C81B,QAAQ,IAAI,CAACsrC,kBAAkB,CAACvB,UAAU,CAAC,CAAE;MAC7C,IAAIA,WAAW7/D,MAAM,KAAK,CAAG;QAC3BX,QAAQ,CAAIy2B;OACP;QACLz2B,KAAQ,GAAC,KAAI,CAAC+hE,kBAAkB,CAACvB,UAAU,CAAC,EAAE,CAAI/pC,QAAI,IAAK;;MAE7D7Z,IAAO,OAAI,CAACmlD,kBAAkB,CAACvB,UAAU,CAACA,WAAW7/D,MAAM,GAAG,CAAE;MAChE,IAAI6/D,WAAW7/D,MAAM,KAAK,CAAG;QAC3BoH,GAAM6U;OACD;QACL7U,MAAM,CAAC6U,IAAO,OAAI,CAACmlD,kBAAkB,CAACvB,UAAU,CAACA,UAAW7/D,OAAM,GAAG,EAAE,KAAK;;;IAGhF,MAAMyhC,QAAQo+B,UAAW7/D,OAAM,GAAG,IAAI,MAAM,IAAI;IAChDX,KAAQ0+B,eAAY1+B,OAAO,CAAGoiC;IAC9Br6B,GAAM22B,eAAY32B,KAAK,CAAGq6B;IAE1B,IAAI,CAAC++B,QAAQ,GAAG;MAACnhE;MAAO+H;MAAKlF,QAAQ,CAAK7C,SAAQ,OAAI+H,GAAE;IAAE;EAC5D;EASA25D,SAAY;IACV,MAAMhC,UAAU,IAAI,CAACC,QAAQ;IAC7B,MAAM5/D,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMmC,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMwE,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM+6D,WAAW/6D,QAAQ65D,IAAI;IAE7B,MAAMyB,KAAQP,YAASvJ,IAAI,IAAI6H,yBAA0B0B,UAASzB,OAAO,EAAEjgE,GAAKmC,OAAK,IAAI,CAAC0/D,iBAAiB,CAAC7hE;IAC5G,MAAM45D,WAAW9pD,cAAenJ,SAAQ8R,KAAK,CAACmhD,QAAQ,EAAE;IACxD,MAAMsI,UAAUD,KAAU,cAASP,QAAS5B,WAAU,GAAG,KAAK;IAC9D,MAAMqC,UAAa98C,YAAS68C,OAAYA,iBAAY,IAAI;IACxD,MAAMzpD,QAAQ,EAAC;IACf,IAAIie,KAAQ12B;IACZ,IAAIwgE,IAAMvuD;IAGV,IAAIkwD,UAAY;MACdzrC,QAAQ,CAACipC,QAAQv3C,OAAO,CAACsO,OAAO,SAAWwrC;;IAI7CxrC,QAAQ,CAACipC,OAAQv3C,QAAO,CAACsO,KAAOyrC,eAAa,QAAQF,KAAK;IAG1D,IAAItC,QAAQx3C,IAAI,CAAChmB,KAAKnC,GAAKiiE,WAAS,SAASrI,QAAU;MACrD,MAAM,IAAIjyC,MAAM3nB,GAAM,aAAUmC,MAAM,sCAAyCy3D,cAAW,MAAMqI,KAAO;;IAGzG,MAAMxB,aAAa95D,QAAQ8R,KAAK,CAACukB,MAAM,KAAK,UAAU,IAAI,CAAColC,iBAAiB;IAC5E,KAAK5B,OAAO9pC,KAAOzkB,UAAQ,CAAC,EAAEuuD,OAAOr+D,GAAKq+D,SAAO,CAACb,QAAQ79D,GAAG,CAAC0+D,MAAM5G,QAAUqI,UAAQhwD,OAAO,EAAE;MAC7FsuD,QAAQ9nD,OAAO+nD,IAAMC;IACvB;IAEA,IAAID,SAASr+D,GAAOwE,YAAQy5C,MAAM,KAAK,WAAWnuC,UAAU,CAAG;MAC7DsuD,QAAQ9nD,OAAO+nD,IAAMC;;IAIvB,OAAO36D,OAAOC,IAAI,CAAC0S,KAAOR,MAAI,CAACwnD,QAAQr+C,GAAG,CAAChZ,KAAK,CAACA;EACnD;EAMA0L,iBAAiBzM,KAAK,EAAE;IACtB,MAAMs4D,UAAU,IAAI,CAACC,QAAQ;IAC7B,MAAM8B,QAAW,OAAI,CAAC/6D,OAAO,CAAC65D,IAAI;IAElC,IAAIkB,SAASW,aAAa,EAAE;MAC1B,OAAO1C,OAAQz3C,OAAM,CAAC7gB,OAAOq6D,SAASW,aAAa;;IAErD,OAAO1C,QAAQz3C,MAAM,CAAC7gB,OAAOq6D,QAAST,eAAc,CAACqB,QAAQ;EAC/D;EAOAp6C,MAAO7gB,MAAK,EAAE6gB,MAAM,EAAE;IACpB,MAAMvhB,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAMshB,OAAUthB,WAAQ65D,IAAI,CAACS,cAAc;IAC3C,MAAM9I,OAAO,IAAI,CAAC+I,KAAK;IACvB,MAAMqB,GAAMr6C,aAAUD,OAAO,CAACkwC,IAAK;IACnC,OAAO,IAAI,CAACyH,QAAQ,CAAC13C,MAAM,CAAC7gB,KAAOk7D;EACrC;EAWAC,oBAAoBhC,IAAI,EAAEn3D,KAAK,EAAEoP,KAAK,EAAEyP,MAAM,EAAE;IAC9C,MAAMvhB,UAAU,IAAI,CAACA,OAAO;IAC5B,MAAM87D,SAAY97D,WAAQ8R,KAAK,CAAColB,QAAQ;IAExC,IAAI4kC,SAAW;MACb,OAAOriE,SAAKqiE,SAAW,GAACjC,MAAMn3D,OAAOoP,MAAM,EAAE,IAAI;;IAGnD,MAAMwP,OAAUthB,WAAQ65D,IAAI,CAACS,cAAc;IAC3C,MAAM9I,OAAO,IAAI,CAAC+I,KAAK;IACvB,MAAML,YAAY,IAAI,CAACM,UAAU;IACjC,MAAMuB,WAAcvK,WAAQlwC,OAAO,CAACkwC,IAAK;IACzC,MAAMwK,WAAc9B,gBAAa54C,OAAO,CAAC44C,SAAU;IACnD,MAAM3/D,OAAOuX,KAAK,CAACpP,KAAM;IACzB,MAAMitB,KAAQuqC,gBAAa8B,WAAezhE,YAAQA,KAAKo1B,KAAK;IAE5D,OAAO,IAAI,CAACspC,QAAQ,CAAC13C,MAAM,CAACs4C,IAAMt4C,aAAWoO,QAAQqsC,WAAcD,cAAW,CAAD;EAC/E;EAKA9kC,mBAAmBnlB,KAAK,EAAE;IACxB,IAAI5X,GAAGuI,IAAMlI;IAEb,KAAKL,IAAI,GAAGuI,IAAOqP,SAAM7X,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC9CK,IAAOuX,QAAK,CAAC5X,CAAE;MACfK,IAAK2S,MAAK,GAAG,IAAI,CAAC2uD,mBAAmB,CAACthE,KAAKmG,KAAK,EAAExG,CAAG4X;IACvD;EACF;EAMAupD,mBAAmB36D,KAAK,EAAE;IACxB,OAAOA,UAAU,IAAI,GAAG+L,MAAM,CAAC/L,QAAQ,IAAI,CAACrH,GAAG,KAAK,IAAI,CAACmC,GAAG,GAAG,IAAI,CAACnC,GAAE,CAAE;EAC1E;EAMAwY,iBAAiBnR,KAAK,EAAE;IACtB,MAAMu7D,UAAU,IAAI,CAACxB,QAAQ;IAC7B,MAAM11C,GAAM,OAAI,CAACs2C,kBAAkB,CAAC36D;IACpC,OAAO,IAAI,CAACuW,kBAAkB,CAAC,CAACglD,OAAQ3iE,MAAK,GAAGyrB,GAAE,IAAKk3C,QAAQ9/D,MAAM;EACvE;EAMAgb,iBAAiB8iB,KAAK,EAAE;IACtB,MAAMgiC,UAAU,IAAI,CAACxB,QAAQ;IAC7B,MAAM11C,MAAM,IAAI,CAACsV,kBAAkB,CAACJ,SAASgiC,OAAQ9/D,OAAM,GAAG8/D,QAAQ56D,GAAG;IACzE,OAAO,IAAI,CAAChI,GAAG,GAAG0rB,GAAO,QAAI,CAACvpB,GAAG,GAAG,IAAI,CAACnC,GAAG,CAAD;EAC7C;EAOA6iE,cAAchvD,KAAK,EAAE;IACnB,MAAMivD,SAAY,OAAI,CAACn8D,OAAO,CAAC8R,KAAK;IACpC,MAAMsqD,iBAAiB,IAAI,CAAC50D,GAAG,CAACi8C,WAAW,CAACv2C,OAAO8I,KAAK;IACxD,MAAMmD,QAAQwC,SAAU,KAAI,CAAChI,YAAY,KAAKwoD,SAAU7kC,YAAW,GAAG6kC,UAAU9kC,WAAW;IAC3F,MAAMglC,cAAcjjE,IAAKyf,IAAG,CAACM;IAC7B,MAAMmjD,cAAcljE,IAAK2f,IAAG,CAACI;IAC7B,MAAMojD,eAAe,IAAI,CAAC3iC,uBAAuB,CAAC,GAAGj5B,IAAI;IAEzD,OAAO;MACL4mB,CAAG,EAAC60C,cAAiBC,iBAAgBE,YAAeD;MACpD70C,CAAG,EAAC20C,cAAiBE,iBAAgBC,YAAeF;IACtD;EACF;EAOAnB,kBAAkBsB,WAAW,EAAE;IAC7B,MAAMzB,QAAW,OAAI,CAAC/6D,OAAO,CAAC65D,IAAI;IAClC,MAAMS,iBAAiBS,SAAST,cAAc;IAG9C,MAAM/4C,SAAS+4C,cAAc,CAACS,SAASvJ,IAAI,CAAC,IAAI8I,eAAenC,WAAW;IAC1E,MAAMsE,eAAe,IAAI,CAACZ,mBAAmB,CAACW,WAAa,KAAGrC,mBAAoB,KAAI,EAAE,CAACqC,YAAY,EAAE,IAAI,CAAChC,UAAU,CAAGj5C;IACzH,MAAM5gB,IAAO,OAAI,CAACu7D,aAAa,CAACO;IAGhC,MAAMlD,WAAWngE,KAAKoE,KAAK,CAAC,IAAI,CAACmW,YAAY,KAAK,IAAI,CAACqC,KAAK,GAAGrV,KAAK4mB,CAAC,GAAG,IAAI,CAACxR,MAAM,GAAGpV,IAAK8mB,EAAC,CAAI;IAChG,OAAO8xC,WAAW,CAAIA,cAAW,CAAC;EACpC;EAKAkC,iBAAoB;IAClB,IAAI3B,aAAa,IAAI,CAAC7oD,MAAM,CAAC5N,IAAI,IAAI,EAAE;IACvC,IAAInJ,CAAGuI;IAEP,IAAIq3D,WAAW7/D,MAAM,EAAE;MACrB,OAAO6/D;;IAGT,MAAMllC,QAAQ,IAAI,CAAC3vB,uBAAuB;IAE1C,IAAI,IAAI,CAACy1D,WAAW,IAAI9lC,MAAM36B,MAAM,EAAE;MACpC,OAAQ,IAAI,CAACgX,MAAM,CAAC5N,IAAI,GAAGuxB,KAAK,CAAC,EAAE,CAACzvB,UAAU,CAAC4H,kBAAkB,CAAC,IAAI;;IAGxE,KAAK7S,IAAI,GAAGuI,IAAOmyB,SAAM36B,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC9C4/D,UAAaA,cAAW1oD,MAAM,CAACwjB,KAAK,CAAC16B,CAAE,EAACiL,UAAU,CAAC4H,kBAAkB,CAAC,IAAI;IAC5E;IAEA,OAAQ,IAAI,CAACkE,MAAM,CAAC5N,IAAI,GAAG,IAAI,CAACq5D,SAAS,CAAC5C;EAC5C;EAKAgB,kBAAqB;IACnB,MAAMhB,aAAa,IAAI,CAAC7oD,MAAM,CAACnF,MAAM,IAAI,EAAE;IAC3C,IAAI5R,CAAGuI;IAEP,IAAIq3D,WAAW7/D,MAAM,EAAE;MACrB,OAAO6/D;;IAGT,MAAMhuD,SAAS,IAAI,CAACC,SAAS;IAC7B,KAAK7R,IAAI,GAAGuI,IAAOqJ,UAAO7R,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC/C4/D,WAAW5+D,IAAI,CAACmQ,MAAM,IAAI,EAAES,MAAM,CAAC5R,CAAE;IACvC;IAEA,OAAQ,IAAI,CAAC+W,MAAM,CAACnF,MAAM,GAAG,IAAI,CAAC4uD,WAAW,GAAGZ,UAAa,OAAI,CAAC4C,SAAS,CAAC5C,UAAW;EACzF;EAMA4C,UAAU58D,MAAM,EAAE;IAEhB,OAAOuR,aAAavR,MAAOwR,KAAI,CAACwnD;EAClC;AACF;ACvpBA,SAASjhB,WAAY8kB,MAAK,EAAEvmD,GAAG,EAAEhV,OAAO,EAAE;EACxC,IAAIihB,EAAK;EACT,IAAIC,KAAKq6C,KAAM1iE,OAAM,GAAG;EACxB,IAAI2iE,YAAYC,YAAYC,UAAYC;EACxC,IAAI37D,OAAS;IACX,IAAIgV,GAAOumD,SAAK,CAACt6C,GAAG,CAAC0C,GAAG,IAAI3O,OAAOumD,KAAK,CAACr6C,EAAG,EAACyC,GAAG,EAAE;MAC/C;QAAC1C;QAAIC;MAAAA,CAAG,GAAGJ,aAAay6C,KAAO,SAAOvmD,GAAG;;IAE3C;MAAC2O,GAAK63C;MAAY/C,MAAMiD;IAAU,CAAC,GAAGH,KAAK,CAACt6C,GAAG;IAC/C;MAAC0C,GAAK83C;MAAYhD,MAAMkD;IAAU,CAAC,GAAGJ,KAAK,CAACr6C,GAAG;GAC3C;IACL,IAAIlM,GAAOumD,SAAK,CAACt6C,GAAG,CAACw3C,IAAI,IAAIzjD,OAAOumD,KAAK,CAACr6C,EAAG,EAACu3C,IAAI,EAAE;MACjD;QAACx3C;QAAIC;MAAAA,CAAG,GAAGJ,aAAay6C,KAAO,UAAQvmD,GAAG;;IAE5C;MAACyjD,IAAM+C;MAAY73C,KAAK+3C;IAAU,CAAC,GAAGH,KAAK,CAACt6C,GAAG;IAC/C;MAACw3C,IAAMgD;MAAY93C,KAAKg4C;IAAU,CAAC,GAAGJ,KAAK,CAACr6C,GAAG;;EAGlD,MAAM06C,OAAOH,UAAaD;EAC1B,OAAOI,IAAOF,gBAAa,CAACC,UAAaD,aAAS,KAAM1mD,GAAMwmD,aAAS,CAAKI,UAAOF,UAAU;AAC/F;AAEA,MAAMG,eAAwB7C;EAE5B,OAAOj2D,KAAK,YAAa;EAKzB,OAAO9E,WAAW+6D,SAAU/6D,SAAQ;EAKpCrH,YAAYwI,KAAK,EAAE;IACjB,KAAK,CAACA;IAGN,IAAI,CAAC08D,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACC,OAAO,GAAG7kE;IAEf,IAAI,CAAC8kE,WAAW,GAAG9kE;EACrB;EAKA6iE,WAAc;IACZ,MAAMrB,aAAa,IAAI,CAACuD,sBAAsB;IAC9C,MAAMV,QAAQ,IAAI,CAACO,MAAM,GAAG,IAAI,CAACI,gBAAgB,CAACxD;IAClD,IAAI,CAACqD,OAAO,GAAGtlB,YAAY8kB,KAAO,MAAI,CAACtjE,GAAG;IAC1C,IAAI,CAAC+jE,WAAW,GAAGvlB,WAAY8kB,QAAO,IAAI,CAACnhE,GAAG,IAAI,IAAI,CAAC2hE,OAAO;IAC9D,KAAK,CAAChC,WAAW,CAACrB;EACpB;EAaAwD,iBAAiBxD,UAAU,EAAE;IAC3B,MAAM;MAACzgE,GAAG;MAAEmC;IAAG,CAAC,GAAG,IAAI;IACvB,MAAMxB,QAAQ,EAAE;IAChB,MAAM2iE,QAAQ,EAAE;IAChB,IAAIziE,GAAGuI,IAAMgJ,QAAMiG,IAAMkB;IAEzB,KAAK1Y,IAAI,GAAGuI,IAAOq3D,cAAW7/D,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MACnDwX,IAAOooD,aAAU,CAAC5/D,CAAE;MACpB,IAAIwX,QAAQrY,GAAOqY,YAAQlW,GAAK;QAC9BxB,MAAMkB,IAAI,CAACwW;;IAEf;IAEA,IAAI1X,MAAMC,MAAM,GAAG,CAAG;MAEpB,OAAO,CACL;QAAC4/D,IAAMxgE;QAAK0rB,GAAK;MAAC,GAClB;QAAC80C,IAAMr+D;QAAKupB,GAAK;MAAC,EACnB;;IAGH,KAAK7qB,IAAI,GAAGuI,IAAOzI,SAAMC,MAAM,EAAEC,IAAIuI,IAAM,IAAEvI,CAAG;MAC9C0Y,IAAO5Y,QAAK,CAACE,IAAI,CAAE;MACnBuR,IAAOzR,QAAK,CAACE,IAAI,CAAE;MACnBwX,IAAO1X,QAAK,CAACE,CAAE;MAGf,IAAId,KAAKg3B,KAAK,CAAExd,KAAOnH,OAAG,IAAK,OAAOiG,IAAM;QAC1CirD,MAAMzhE,IAAI,CAAC;UAAC2+D,IAAMnoD;UAAMqT,GAAK7qB,OAAKuI,OAAO;QAAE;;IAE/C;IACA,OAAOk6D;EACT;EAQA3B,SAAY;IACV,MAAM3hE,MAAM,IAAI,CAACA,GAAG;IACpB,MAAMmC,MAAM,IAAI,CAACA,GAAG;IACpB,IAAIs+D,aAAa,KAAK,CAAC2B,iBAAiB;IACxC,IAAI,CAAC3B,WAAWn0C,QAAQ,CAACtsB,QAAQ,CAACygE,WAAW7/D,MAAM,EAAE;MACnD6/D,UAAWzpD,OAAM,CAAC,GAAG,CAAGhX;;IAE1B,IAAI,CAACygE,WAAWn0C,QAAQ,CAACnqB,QAAQs+D,UAAW7/D,OAAM,KAAK,CAAG;MACxD6/D,WAAW5+D,IAAI,CAACM;;IAElB,OAAOs+D,WAAWxoD,IAAI,CAAC,CAACC,GAAGrP,MAAMqP,CAAIrP;EACvC;EAOAm7D,sBAAyB;IACvB,IAAIvD,aAAa,IAAI,CAAC7oD,MAAM,CAAClQ,GAAG,IAAI,EAAE;IAEtC,IAAI+4D,WAAW7/D,MAAM,EAAE;MACrB,OAAO6/D;;IAGT,MAAMz2D,OAAO,IAAI,CAACo4D,iBAAiB;IACnC,MAAMvuD,QAAQ,IAAI,CAAC4tD,kBAAkB;IACrC,IAAIz3D,IAAKpJ,OAAM,IAAIiT,MAAMjT,MAAM,EAAE;MAG/B6/D,aAAa,IAAI,CAAC4C,SAAS,CAACr5D,KAAK+N,MAAM,CAAClE;KACnC;MACL4sD,aAAaz2D,IAAKpJ,OAAM,GAAGoJ,OAAO6J,KAAK;;IAEzC4sD,aAAa,IAAI,CAAC7oD,MAAM,CAAClQ,GAAG,GAAG+4D;IAE/B,OAAOA;EACT;EAMAuB,mBAAmB36D,KAAK,EAAE;IACxB,OAAO,CAACm3C,WAAY,KAAI,CAACqlB,MAAM,EAAEx8D,KAAS,QAAI,CAACy8D,OAAM,IAAK,IAAI,CAACC,WAAW;EAC5E;EAMAjmD,iBAAiB8iB,KAAK,EAAE;IACtB,MAAMgiC,UAAU,IAAI,CAACxB,QAAQ;IAC7B,MAAMvgC,UAAU,IAAI,CAACG,kBAAkB,CAACJ,SAASgiC,OAAQ9/D,OAAM,GAAG8/D,QAAQ56D,GAAG;IAC7E,OAAOw2C,WAAY,KAAI,CAACqlB,MAAM,EAAEhjC,OAAU,OAAI,CAACkjC,WAAW,GAAG,IAAI,CAACD,OAAO,EAAE,IAAI;EACjF;AACF;;;;;;;;;;MC3JaI,aAAgB,IAC3Bh8B,aACAj0B,UACA+M,SACAtU","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\golu\\Desktop\\expense-tracker_fullstack-master\\frontend\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}